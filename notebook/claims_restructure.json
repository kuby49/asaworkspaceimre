{
	"name": "claims_restructure",
	"properties": {
		"folder": {
			"name": "Insider"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool33",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "19",
				"spark.autotune.trackingId": "339df26f-fd28-4cf4-88e4-efcb768ab064"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d9001b44-c845-4abb-b589-9b145195aaea/resourceGroups/synapse_asa_l400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre2/bigDataPools/sparkpool33",
				"name": "sparkpool33",
				"type": "Spark",
				"endpoint": "https://asaworkspaceimre2.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool33",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#set up variables like file location \r\n",
					"\r\n",
					"dataPath = 'abfss://synapsehackaton@asadatalakeimre2.dfs.core.windows.net/30tb/*/';\r\n",
					"claimsPath = dataPath + 'Claim.ndjson';\r\n",
					"observationPath = dataPath + 'Observation.ndjson';\r\n",
					"\r\n",
					"#Claims output paths\r\n",
					"outClaimsPath = 'abfss://bronze@asadatalakeimre2.dfs.core.windows.net/historic_data/Claim/'\r\n",
					"outIncrementalClaimsPath = 'abfss://bronze@asadatalakeimre2.dfs.core.windows.net/incremental_data/Claim/'\r\n",
					"\r\n",
					"#observations output path\r\n",
					"outObservationsPath = 'abfss://bronze@asadatalakeimre2.dfs.core.windows.net/historic_data/Observation/'\r\n",
					"outIncrementalObservationPath = 'abfss://bronze@asadatalakeimre2.dfs.core.windows.net/incremental_data/Claim/'\r\n",
					"\r\n",
					"# read teh schema to be used from 2 individual json files, in order to avoid scanning all 20000 / 40000 files to be scanned twice\r\n",
					"schemaClaimsPath = 'abfss://synapsehackaton@asadatalakeimre2.dfs.core.windows.net/30tb/000047ca-00c7-492b-bf65-740805144cd2/Claim.ndjson' \r\n",
					"schemaObservationPath = 'abfss://synapsehackaton@asadatalakeimre2.dfs.core.windows.net/30tb/000047ca-00c7-492b-bf65-740805144cd2/Observation.ndjson'\r\n",
					"schemaClaims =  spark.read.option(\"mutiline\", \"true\").json(schemaClaimsPath).schema\r\n",
					"schemaObservations =  spark.read.option(\"mutiline\", \"true\").json(schemaObservationPath).schema"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from    pyspark.sql.functions import substring ;\r\n",
					"print(substring('2010-02-04', 6,2))"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#read the Claims files and filter on the relevant years for yearly split / historical data \r\n",
					"from pyspark.sql.functions import to_date, year, month, dayofmonth, col;\r\n",
					"dfClaims = spark.read.option(\"mutiline\", \"true\").option(\"columnNameOfCorruptRecord\", \"corrupt\").schema (schemaClaims).json(claimsPath);\r\n",
					"\r\n",
					"dfClaimsByYear = dfClaims.withColumn('year', year(to_date(dfClaims.created))).where(col('year') > 2015).where (col('year') < 2021) \r\n",
					"#print(dfClaimsByYear.count())\r\n",
					"\r\n",
					"dfClaimsByYear.write.option(\"mutiline\", \"false\").mode(\"overwrite\").partitionBy ('year').json(outClaimsPath)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#read the Claims files and filter on the relevant years for daily split / incremental data, then partition by year, month, day and write \r\n",
					"from pyspark.sql.functions import to_date, year, month, dayofmonth, col;\r\n",
					"dfClaims = spark.read.option(\"mutiline\", \"true\").option(\"columnNameOfCorruptRecord\", \"corrupt\").schema (schemaClaims).json(claimsPath);\r\n",
					"\r\n",
					"#add partition columns\r\n",
					"dfClaimsByDay = dfClaims.withColumn('year', substring('created', 1,4)).withColumn('month', substring('created', 6,2)).withColumn('day', substring('created', 9,2)).where(col('year') == \"2021\")\r\n",
					"\r\n",
					"#write out the incremental data for Claims\r\n",
					"dfClaimsByDay.write.option(\"mutiline\", \"false\").mode(\"overwrite\").partitionBy ('year', 'month', 'day').json(outIncrementalClaimsPath)"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#read the Observations  files and filter on the relevant years for yearly split \r\n",
					"from pyspark.sql.functions import to_date, year, col;\r\n",
					"dfObservations = spark.read.json(observationPath);\r\n",
					"\r\n",
					"dfObservationsByYear = dfClaims.withColumn('year', year(to_date(dfClaims.created))).where((dfClaimsByYear.year > 2015) and (dfClaimsByYear.year < 2021)) \r\n",
					"\r\n",
					"\r\n",
					"dfObservationsByYear.write.option(\"mutiline\", \"false\").partitionBy ('year').json(outObservationsPath)"
				],
				"execution_count": 7
			}
		]
	}
}