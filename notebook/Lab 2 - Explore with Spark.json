{
	"name": "Lab 2 - Explore with Spark",
	"properties": {
		"folder": {
			"name": "Lab_05_Synapse_Saprk"
		},
		"nbformat": 0,
		"nbformat_minor": 0,
		"bigDataPool": {
			"referenceName": "SparkPool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"bf640098-ad88-4b5d-be5c-394a97379924": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"Quantity": 3,
										"ProductId": 4475,
										"CustomerId": 127962,
										"TotalAmount": 71.47800000000001,
										"ProfitAmount": 20.196,
										"Price": 21.66,
										"StoreId": 1973,
										"TransactionId": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
										"TransactionDate": 20170501,
										"Hour": 3,
										"Minute": 32
									},
									{
										"Quantity": 2,
										"ProductId": 3903,
										"CustomerId": 127962,
										"TotalAmount": 64.658,
										"ProfitAmount": 17.226000000000003,
										"Price": 29.39,
										"StoreId": 1973,
										"TransactionId": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
										"TransactionDate": 20170501,
										"Hour": 3,
										"Minute": 32
									},
									{
										"Quantity": 3,
										"ProductId": 2235,
										"CustomerId": 127962,
										"TotalAmount": 96.525,
										"ProfitAmount": 32.274,
										"Price": 29.25,
										"StoreId": 1973,
										"TransactionId": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
										"TransactionDate": 20170501,
										"Hour": 3,
										"Minute": 32
									},
									{
										"Quantity": 3,
										"ProductId": 194,
										"CustomerId": 127962,
										"TotalAmount": 93.852,
										"ProfitAmount": 30.393,
										"Price": 28.44,
										"StoreId": 1973,
										"TransactionId": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
										"TransactionDate": 20170501,
										"Hour": 3,
										"Minute": 32
									},
									{
										"Quantity": 4,
										"ProductId": 1808,
										"CustomerId": 127972,
										"TotalAmount": 93.19200000000001,
										"ProfitAmount": 27.588,
										"Price": 21.18,
										"StoreId": 5318,
										"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
										"TransactionDate": 20170501,
										"Hour": 14,
										"Minute": 15
									},
									{
										"Quantity": 3,
										"ProductId": 3660,
										"CustomerId": 127972,
										"TotalAmount": 93.126,
										"ProfitAmount": 25.740000000000002,
										"Price": 28.22,
										"StoreId": 5318,
										"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
										"TransactionDate": 20170501,
										"Hour": 14,
										"Minute": 15
									},
									{
										"Quantity": 1,
										"ProductId": 155,
										"CustomerId": 127972,
										"TotalAmount": 32.989000000000004,
										"ProfitAmount": 8.448,
										"Price": 29.99,
										"StoreId": 5318,
										"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
										"TransactionDate": 20170501,
										"Hour": 14,
										"Minute": 15
									},
									{
										"Quantity": 2,
										"ProductId": 108,
										"CustomerId": 127972,
										"TotalAmount": 25.762,
										"ProfitAmount": 8.074,
										"Price": 11.71,
										"StoreId": 5318,
										"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
										"TransactionDate": 20170501,
										"Hour": 14,
										"Minute": 15
									},
									{
										"Quantity": 4,
										"ProductId": 90,
										"CustomerId": 127972,
										"TotalAmount": 126.28000000000002,
										"ProfitAmount": 39.6,
										"Price": 28.7,
										"StoreId": 5318,
										"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
										"TransactionDate": 20170501,
										"Hour": 14,
										"Minute": 15
									},
									{
										"Quantity": 1,
										"ProductId": 111,
										"CustomerId": 127972,
										"TotalAmount": 28.985000000000003,
										"ProfitAmount": 8.888,
										"Price": 26.35,
										"StoreId": 5318,
										"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
										"TransactionDate": 20170501,
										"Hour": 14,
										"Minute": 15
									}
								],
								"schema": {
									"TransactionId": "string",
									"CustomerId": "int",
									"ProductId": "int",
									"Quantity": "int",
									"Price": "double",
									"TotalAmount": "double",
									"TransactionDate": "int",
									"ProfitAmount": "double",
									"Hour": "int",
									"Minute": "int",
									"StoreId": "int"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"TransactionId"
									],
									"seriesFieldKeys": [
										"CustomerId"
									],
									"isStacked": false
								}
							}
						}
					},
					"eeac3b38-547f-408b-ac90-d87f5ed21d4e": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"CustomerId": 3,
										"ProductId": 4581
									},
									{
										"CustomerId": 3,
										"ProductId": 1365
									},
									{
										"CustomerId": 3,
										"ProductId": 2641
									},
									{
										"CustomerId": 3,
										"ProductId": 220
									},
									{
										"CustomerId": 3,
										"ProductId": 110
									},
									{
										"CustomerId": 3,
										"ProductId": 2
									},
									{
										"CustomerId": 11,
										"ProductId": 3323
									},
									{
										"CustomerId": 11,
										"ProductId": 4763
									},
									{
										"CustomerId": 11,
										"ProductId": 4070
									},
									{
										"CustomerId": 11,
										"ProductId": 582
									},
									{
										"CustomerId": 11,
										"ProductId": 194
									},
									{
										"CustomerId": 11,
										"ProductId": 70
									},
									{
										"CustomerId": 11,
										"ProductId": 32
									},
									{
										"CustomerId": 41,
										"ProductId": 3321
									},
									{
										"CustomerId": 41,
										"ProductId": 244
									},
									{
										"CustomerId": 41,
										"ProductId": 3009
									},
									{
										"CustomerId": 41,
										"ProductId": 126
									},
									{
										"CustomerId": 41,
										"ProductId": 3564
									},
									{
										"CustomerId": 41,
										"ProductId": 1091
									},
									{
										"CustomerId": 41,
										"ProductId": 4660
									},
									{
										"CustomerId": 41,
										"ProductId": 2726
									},
									{
										"CustomerId": 41,
										"ProductId": 88
									},
									{
										"CustomerId": 41,
										"ProductId": 134
									},
									{
										"CustomerId": 41,
										"ProductId": 186
									},
									{
										"CustomerId": 41,
										"ProductId": 84
									},
									{
										"CustomerId": 42,
										"ProductId": 3256
									},
									{
										"CustomerId": 42,
										"ProductId": 4843
									},
									{
										"CustomerId": 42,
										"ProductId": 2836
									},
									{
										"CustomerId": 42,
										"ProductId": 2996
									},
									{
										"CustomerId": 42,
										"ProductId": 4544
									},
									{
										"CustomerId": 42,
										"ProductId": 57
									},
									{
										"CustomerId": 42,
										"ProductId": 35
									},
									{
										"CustomerId": 42,
										"ProductId": 229
									},
									{
										"CustomerId": 43,
										"ProductId": 412
									},
									{
										"CustomerId": 43,
										"ProductId": 2031
									},
									{
										"CustomerId": 43,
										"ProductId": 4220
									},
									{
										"CustomerId": 43,
										"ProductId": 3478
									},
									{
										"CustomerId": 43,
										"ProductId": 2776
									},
									{
										"CustomerId": 43,
										"ProductId": 153
									},
									{
										"CustomerId": 43,
										"ProductId": 30
									},
									{
										"CustomerId": 52,
										"ProductId": 3604
									},
									{
										"CustomerId": 52,
										"ProductId": 2711
									},
									{
										"CustomerId": 52,
										"ProductId": 4830
									},
									{
										"CustomerId": 52,
										"ProductId": 4260
									},
									{
										"CustomerId": 52,
										"ProductId": 686
									},
									{
										"CustomerId": 52,
										"ProductId": 609
									},
									{
										"CustomerId": 52,
										"ProductId": 619
									},
									{
										"CustomerId": 52,
										"ProductId": 160
									},
									{
										"CustomerId": 52,
										"ProductId": 209
									},
									{
										"CustomerId": 52,
										"ProductId": 18
									},
									{
										"CustomerId": 61,
										"ProductId": 2430
									},
									{
										"CustomerId": 61,
										"ProductId": 4196
									},
									{
										"CustomerId": 61,
										"ProductId": 2482
									},
									{
										"CustomerId": 61,
										"ProductId": 3663
									},
									{
										"CustomerId": 61,
										"ProductId": 1329
									},
									{
										"CustomerId": 61,
										"ProductId": 2655
									},
									{
										"CustomerId": 61,
										"ProductId": 2751
									},
									{
										"CustomerId": 61,
										"ProductId": 1302
									},
									{
										"CustomerId": 61,
										"ProductId": 37
									},
									{
										"CustomerId": 61,
										"ProductId": 176
									},
									{
										"CustomerId": 61,
										"ProductId": 112
									},
									{
										"CustomerId": 64,
										"ProductId": 2229
									},
									{
										"CustomerId": 64,
										"ProductId": 3352
									},
									{
										"CustomerId": 64,
										"ProductId": 2551
									},
									{
										"CustomerId": 64,
										"ProductId": 3039
									},
									{
										"CustomerId": 64,
										"ProductId": 2240
									},
									{
										"CustomerId": 64,
										"ProductId": 1140
									},
									{
										"CustomerId": 64,
										"ProductId": 1397
									},
									{
										"CustomerId": 64,
										"ProductId": 3779
									},
									{
										"CustomerId": 64,
										"ProductId": 263
									},
									{
										"CustomerId": 64,
										"ProductId": 1447
									},
									{
										"CustomerId": 64,
										"ProductId": 48
									},
									{
										"CustomerId": 64,
										"ProductId": 169
									},
									{
										"CustomerId": 70,
										"ProductId": 4109
									},
									{
										"CustomerId": 70,
										"ProductId": 1189
									},
									{
										"CustomerId": 70,
										"ProductId": 2648
									},
									{
										"CustomerId": 70,
										"ProductId": 1911
									},
									{
										"CustomerId": 70,
										"ProductId": 3514
									},
									{
										"CustomerId": 70,
										"ProductId": 1564
									},
									{
										"CustomerId": 70,
										"ProductId": 2549
									},
									{
										"CustomerId": 70,
										"ProductId": 4317
									},
									{
										"CustomerId": 70,
										"ProductId": 3645
									},
									{
										"CustomerId": 70,
										"ProductId": 226
									},
									{
										"CustomerId": 70,
										"ProductId": 19
									},
									{
										"CustomerId": 88,
										"ProductId": 1604
									},
									{
										"CustomerId": 88,
										"ProductId": 808
									},
									{
										"CustomerId": 88,
										"ProductId": 2461
									},
									{
										"CustomerId": 88,
										"ProductId": 3004
									},
									{
										"CustomerId": 88,
										"ProductId": 3551
									},
									{
										"CustomerId": 88,
										"ProductId": 1062
									},
									{
										"CustomerId": 88,
										"ProductId": 3231
									},
									{
										"CustomerId": 88,
										"ProductId": 172
									},
									{
										"CustomerId": 88,
										"ProductId": 7
									},
									{
										"CustomerId": 91,
										"ProductId": 323
									},
									{
										"CustomerId": 91,
										"ProductId": 1757
									},
									{
										"CustomerId": 91,
										"ProductId": 607
									},
									{
										"CustomerId": 91,
										"ProductId": 2995
									},
									{
										"CustomerId": 91,
										"ProductId": 2465
									},
									{
										"CustomerId": 91,
										"ProductId": 1271
									},
									{
										"CustomerId": 91,
										"ProductId": 4622
									}
								],
								"schema": {
									"CustomerId": "int",
									"ProductId": "int"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"ProductId"
									],
									"seriesFieldKeys": [
										"CustomerId"
									],
									"isStacked": false
								}
							}
						}
					},
					"872b6e86-89ef-4955-a965-3a0971274692": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"Quantity": "1",
										"ProductId": "4909",
										"CustomerId": "126061",
										"TotalAmount": "32.46100000000000262101451654",
										"ProfitAmount": "9.592000000000000774491581979",
										"Price": "29.510000000000000000",
										"StoreId": "3962",
										"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
										"TransactionDateId": "20170502",
										"Hour": "19",
										"Minute": "57"
									},
									{
										"Quantity": "1",
										"ProductId": "776",
										"CustomerId": "126061",
										"TotalAmount": "32.07600000000000258992827185",
										"ProfitAmount": "8.756000000000000706990022081",
										"Price": "29.160000000000000000",
										"StoreId": "3962",
										"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
										"TransactionDateId": "20170502",
										"Hour": "19",
										"Minute": "57"
									},
									{
										"Quantity": "2",
										"ProductId": "2928",
										"CustomerId": "126061",
										"TotalAmount": "68.26600000000000551203527266",
										"ProfitAmount": "23.98000000000000193622895495",
										"Price": "31.030000000000000000",
										"StoreId": "3962",
										"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
										"TransactionDateId": "20170502",
										"Hour": "19",
										"Minute": "57"
									},
									{
										"Quantity": "4",
										"ProductId": "180",
										"CustomerId": "126061",
										"TotalAmount": "113.5640000000000091695540050",
										"ProfitAmount": "36.56400000000000295230506708",
										"Price": "25.810000000000000000",
										"StoreId": "3962",
										"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
										"TransactionDateId": "20170502",
										"Hour": "19",
										"Minute": "57"
									},
									{
										"Quantity": "2",
										"ProductId": "150",
										"CustomerId": "126061",
										"TotalAmount": "57.97000000000000468070027182",
										"ProfitAmount": "19.95400000000000161115565334",
										"Price": "26.350000000000000000",
										"StoreId": "3962",
										"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
										"TransactionDateId": "20170502",
										"Hour": "19",
										"Minute": "57"
									},
									{
										"Quantity": "3",
										"ProductId": "3163",
										"CustomerId": "126086",
										"TotalAmount": "85.27200000000000688515910952",
										"ProfitAmount": "26.13600000000000211031192521",
										"Price": "25.840000000000000000",
										"StoreId": "218",
										"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
										"TransactionDateId": "20170502",
										"Hour": "22",
										"Minute": "25"
									},
									{
										"Quantity": "1",
										"ProductId": "2110",
										"CustomerId": "126086",
										"TotalAmount": "26.05900000000000210409467627",
										"ProfitAmount": "7.271000000000000587085935422",
										"Price": "23.690000000000000000",
										"StoreId": "218",
										"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
										"TransactionDateId": "20170502",
										"Hour": "22",
										"Minute": "25"
									},
									{
										"Quantity": "4",
										"ProductId": "1895",
										"CustomerId": "126086",
										"TotalAmount": "149.4680000000000120685683669",
										"ProfitAmount": "46.28800000000000373745479010",
										"Price": "33.970000000000000000",
										"StoreId": "218",
										"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
										"TransactionDateId": "20170502",
										"Hour": "22",
										"Minute": "25"
									},
									{
										"Quantity": "1",
										"ProductId": "1037",
										"CustomerId": "126086",
										"TotalAmount": "33.01100000000000266542343752",
										"ProfitAmount": "7.711000000000000622613072210",
										"Price": "30.010000000000000000",
										"StoreId": "218",
										"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
										"TransactionDateId": "20170502",
										"Hour": "22",
										"Minute": "25"
									},
									{
										"Quantity": "1",
										"ProductId": "4203",
										"CustomerId": "126086",
										"TotalAmount": "21.68100000000000175059966523",
										"ProfitAmount": "7.337000000000000592415005940",
										"Price": "19.710000000000000000",
										"StoreId": "218",
										"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
										"TransactionDateId": "20170502",
										"Hour": "22",
										"Minute": "25"
									}
								],
								"schema": {
									"TransactionId": "string",
									"CustomerId": "string",
									"ProductId": "string",
									"Quantity": "string",
									"Price": "string",
									"TotalAmount": "string",
									"TransactionDateId": "string",
									"ProfitAmount": "string",
									"Hour": "string",
									"Minute": "string",
									"StoreId": "string"
								}
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"TransactionId"
									],
									"seriesFieldKeys": [
										"TransactionId"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
				"name": "SparkPool01",
				"type": "Spark",
				"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Exploring and fixing data with Synapse Spark\n",
					"\n",
					"In this task, you will use a Synapse Spark notebook to explore a few of the files in the `wwi-02/sale-poc` folder in the data lake. You will also use Python code to fix the issues with the `sale-20170502.csv` file, so all the files in the directory can be ingested using a Synapse Pipeline later in this lab.\n",
					"\n",
					"The first thing we need to is set a variable within the notebook to provide the name of your primary data lake storage account. Before executing the cell below, you will need to replace `[YOUR-DATA-LAKE-ACCOUNT-NAME]` with the name of the primary data lake storage account associated with your Syanpse workspace.\n",
					"\n",
					"You can find the name of your data lake storage account by navigating to the **Data** hub in Synapse Studio, selecting the **Linked** tab, and locating the storage account name that begins with **asadatalake** under **Azure Data Lake Storage Gen2**.\n",
					"\n",
					"![The primary data lake storage account is highlighted on the Data hub's Linked tab.](https://solliancepublicdata.blob.core.windows.net/images/synapse/data-hub-primary-data-lake-storage-account.png \"Primary ADLS Gen2 Account\")\n",
					"\n",
					"1. Copy the name of your data lake storage account and paste it in place of `[YOUR-DATA-LAKE-ACCOUNT-NAME]` in the cell below, then execute the cell by selecting the **Run cell** button that becomes visible when you select the cell.\n",
					"\n",
					"    ![The primary data lake storage account is highlighted on the Data hub's Linked tab.](https://solliancepublicdata.blob.core.windows.net/images/synapse/synapse-notebook-run-cell.png \"Primary ADLS Gen2 Account\")\n",
					"\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"adls_account_name = '[YOUR-DATA-LAKE-ACCOUNT-NAME]'"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Exploring files with Spark\n",
					"\n",
					"1. The first step in exploring data using Synapse Spark is to load a file from the data lake. For this, we can use the `spark.read.load()` method of the `SparkSession`.\n",
					"\n",
					"2. In Spark, we can load the data from our files into [DataFrames](https://spark.apache.org/docs/2.2.0/sql-programming-guide.html#datasets-and-dataframes), which are an abstraction that allows data to be structured in named columns. Execute the cell below to load the data from the `sale-20170501.csv` file into a data frame. You can run the cell by hovering your mouse over the left-hand side of the cell and then selecting the blue **Run cell** button.\n",
					"\n",
					"    ![The Run Cell button is highlighted to the left of the cell contents to execute.](https://solliancepublicdata.blob.core.windows.net/images/synapse/synapse-notebook-run-cell-load-sale-20170501-csv.png \"Run cell\")"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# First, load the file `sale-20170501.csv` file, which we know from our previous exploration to be formatted correctly.\n",
					"# Note the use of the `header` and `inferSchema` parameters. Header indicates the first row of the file contains column headers,\n",
					"# and `inferSchema` instruct Spark to use data within the file to infer data types.\n",
					"df = spark.read.load(f'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20170501.csv', format='csv', header=True, inferSchema=True)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"source": [
					"## View the contents of the DataFrame\n",
					"\n",
					"With the data from the `sale-20170501.csv` file loaded into a data frame, we can now use various methods of a data frame to explore the properties of the data.\n",
					"\n",
					"1. First, let's look at the data as it was imported. Execute the cell below to view and inspect the data in the data frame."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"TransactionId"
							],
							"values": [
								"CustomerId"
							],
							"yLabel": "CustomerId",
							"xLabel": "TransactionId",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{\"CustomerId\":{\"cdd2ed88-8aae-4295-884a-ac4d40c3c33c\":44,\"e067fc11-e07d-4517-bc93-f7dc4b44f35e\":18}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					},
					"collapsed": false
				},
				"source": [
					"display(df.limit(10))"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"source": [
					"2. Like we saw duing exploration with the SQL on-demand capabilities of Azure Synapse, Spark allows us to view and query against the data contained within files. \n",
					"\n",
					"3. Now, use the `printSchema()` method of the data frame to view the results of using the `inferSchema` parameter when creating the data frame. Execute the cell below and observe the output."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Now, print the inferred schema. We will need this information below to help with the missing headers in the May 2, 2017 file.\n",
					"df.printSchema()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"source": [
					"4. The `printSchema` method outputs both field names and data types that are based on the Spark engine's evaluation of the data contained within each field.\n",
					"\n",
					"    > We can use this information later to help define the schema for the poorly formed `sale-20170502.csv` file. In addition to the field names and data types, we should note the number of features or columns contained in the file. In this case, note that there are 11 fields. That will be used to determine where to split the single row of data.\n",
					"\n",
					"5. As an example of further exploration we can do, run the cell below to create and display a new data frame that contains an ordered list of distinct Customer and Product Id pairings. We can use these types of functions to find invalid or empty values quickly in targeted fields."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [],
							"values": [
								"ProductId"
							],
							"yLabel": "ProductId",
							"xLabel": "",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{\"ProductId\":{\"\":189206}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					},
					"collapsed": false
				},
				"source": [
					"# Create a new data frame containing a list of distinct CustomerId and ProductId values in descending order of the CustomerId.\n",
					"df_distinct_products = df.select('CustomerId', 'ProductId').distinct().orderBy('CustomerId')\n",
					"\n",
					"# Display the first 100 rows of the resulting data frame.\n",
					"display(df_distinct_products.limit(100))"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"source": [
					"6. Next, let's attempt to open and explore the `sale-20170502.csv` file using the `load()` method, as we did above."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Next, let's try to read in the May 2, 2017 file using the same `load()` method we used for the first file.\n",
					"df = spark.read.load(f'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20100502.csv', format='csv')\n",
					"display(df.limit(10))"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"source": [
					"7. As we saw in T-SQL, we receive a similar error in Spark that the number of columns processed may have exceeded limit of 20480 columns. To work with the data in this file, we need to use more advanced methods, as you will see in the next section below.\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Handling and fixing poorly formed CSV files\n",
					"\n",
					"> The steps below provide example code for fixing the poorly-formed CSV file, `sale-20170502.csv` we discovered during exploration of the files in the `wwi-02/sale-poc` folder. This is just one of many ways to handle \"fixing\" a poorly-formed CSV file using Spark.\n",
					"\n",
					"1. To \"fix\" the bad file, we need to take a programmatic approach, using Python to read in the contents of the file and then parse them to put them into the proper shape.\n",
					"\n",
					"    > To handle the data being in a single row, we can use the `textFile()` method of our `SparkContext` to read the file as a collection of rows into a resilient distributed dataset (RDD). This allows us to get around the errors around the number of columns because we are essentially getting a single string value stored in a single column.\n",
					"\n",
					"2. Execute the cell below to load the RDD with data from the file."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Import the NumPy library. NumPy is a python library used for working with arrays.\n",
					"import numpy as np\n",
					"\n",
					"# Read the CSV file into a resilient distributed dataset (RDD) as a text file. This will read each row of the file into rows in an RDD.\n",
					"rdd = sc.textFile(f'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20100502.csv')"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"source": [
					"3. With the data now stored in an RDD, we can access the first, and only, populated row in the RDD, and split that into individual fields. We know from our inspection of the file in Notepad++ that it all the fields are separated by a comma (,), so let's start by splitting on that to create an array of field values. Execute the cell below to create a data array."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Since we know there is only one row, grab the first row of the RDD and split in on the field delimiter (comma).\n",
					"data = rdd.first().split(',')\n",
					"\n",
					"field_count = len(data)\n",
					"# Print out the count of fields read into the array.\n",
					"print(field_count)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"source": [
					"4. By splitting the row on the field delimiter, we created an array of all the individual field values in the file, the count of which you can see above.\n",
					"\n",
					"5. Now, run the cell below to do a quick calculation on the expected number of rows that will be generated by parsing every 11 fields into a single row."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import math\n",
					"\n",
					"expected_row_count = math.floor(field_count / 11)\n",
					"print(f'The expected row count is: {expected_row_count}')"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"source": [
					"6. Next, let's create an array to store the data associated with each \"row\".\n",
					"\n",
					"    > We will set the max_index to the number of columns that are expected in each row. We know from our exploration of other files in the `wwi-02/sale-poc` folder that they contain 11 columns, so that is the value we will set.\n",
					"\n",
					"7. In addition to setting variables, we will use the cell below to loop through the `data` array and assign every 11 values to a row. By doing this, we are able to \"split\" the data that was once a single row into appropriate rows containing the proper data and columns from the file.\n",
					"\n",
					"8. Execute the cell below to create an array of rows from the file data."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Create an array to store the data associated with each \"row\". Set the max_index to the number of columns that are in each row. This is 11, which we noted above when viewing the schema of the May 1 file.\n",
					"row_list = []\n",
					"max_index = 11\n",
					"\n",
					"# Now, we are going to loop through the array of values extracted from the single row of the file and build rows consisting of 11 columns.\n",
					"while max_index <= len(data):\n",
					"    row = [data[i] for i in np.arange(max_index-11, max_index)]\n",
					"    row_list.append(row)\n",
					"    max_index += 11\n",
					"\n",
					"print(f'The row array contains {len(row_list)} rows. The expected number of rows was {expected_row_count}.')"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"source": [
					"9. The last thing we need to do to be able to work with the file data as rows is to read it into a Spark DataFrame. In the cell below, we use the `createDataFrame()` method to convert the `row_list` array into a data frame, which also adding names for the columns. Column names are based on the schema we observed in the well formatted files in the `wwi-02/sale-poc` directory.\n",
					"\n",
					"10. Execute the cell below to create a data frame containing row data from the file and then display the first 10 rows."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"TransactionId"
							],
							"values": [
								"TransactionId"
							],
							"yLabel": "TransactionId",
							"xLabel": "TransactionId",
							"aggregation": "COUNT",
							"aggByBackend": false
						},
						"aggData": "{\"TransactionId\":{\"5455a4b4-62bd-401a-b5c6-79ea24f30531\":5,\"a4116581-5aad-416a-b767-aefa516737b1\":5}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					},
					"collapsed": false
				},
				"source": [
					"# Finally, we can use the row_list we created above to create a DataFrame. We can add to this a schema parameter, which contains the column names we saw in the schema of the first file.\n",
					"df_fixed = spark.createDataFrame(row_list,schema=['TransactionId', 'CustomerId', 'ProductId', 'Quantity', 'Price', 'TotalAmount', 'TransactionDateId', 'ProfitAmount', 'Hour', 'Minute', 'StoreId'])\n",
					"display(df_fixed.limit(10))"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write the \"fixed\" file into the data lake\n",
					"\n",
					"1. The last step we will take as part of our exploration and file fixing process is to write the data back into the data lake, so it can be ingested following the same process as the other files in the `wwi-02/sale-poc` folder.\n",
					"\n",
					"2. Execute the cell below to save the data frame into the data lake a series of files in a folder named `sale-20170502-fixed`.\n",
					"\n",
					"    > Note: Spark parallelizes workloads across worker nodes, so when saving files, you will notice they are saved as a collection \"part\" files, and not as a single file. While there are some libraries you can use to create a single file, it is helpful to get used to working with files generated via Spark notebooks as they are natively created.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df.write.format('csv').option('header',True).mode('overwrite').option('sep',',').save(f'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20170502-fixed')"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Inspect the fixed file in the data lake\n",
					"\n",
					"1. With the fixed file written to the data lake, you can quickly inpsect it to verify the files are now formatted properly. Select the `wwi-02` tab above and then double-click on the `sale-20170502-fixed` folder.\n",
					"\n",
					"    ![](https://solliancepublicdata.blob.core.windows.net/images/synapse/wwi-02-sale-poc-sale-20170502-fixed.png)\n",
					"\n",
					"2. In the `sale-20170502-fixed` folder, right-click the first file whose name begins with `part` and whose extension is `.csv` and select **Preview** from the context menu.\n",
					"\n",
					"    ![](https://solliancepublicdata.blob.core.windows.net/images/synapse/wwi-02-sale-poc-sale-20170502-fixed-content.png)\n",
					"\n",
					"3. In the **Preview** dialog, verify you see the proper columns and that the data looks valid in each field.\n",
					"\n",
					"    ![](https://solliancepublicdata.blob.core.windows.net/images/synapse/sale-20170502-fixed-preview.png)\n",
					"\n",
					"## Wrap-up\n",
					"\n",
					"Throughout this exercise, you used a Spark notebook to explore data stored within files in the data lake. You used Python code to extract data from a poorly formatted CSV file, assemble the data from that file into proper rows, and then write the \"fixed\" file back out into your data lake.\n",
					"\n",
					"You can now return to the lab guide to continue with the next section of Lab 2.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"a = spark.conf.get(\"spark.sql.warehouse.dir\")\r\n",
					"b = spark.conf.get(\"spark.sql.hive.metastore.version\")\r\n",
					"c = spark.sparkContext.getConf().getAll()\r\n",
					"# c = spark.conf.get(\"hive.metastore.uris\")\r\n",
					"# c =spark.catalog.listFunctions()\r\n",
					"d = spark.conf.get(\"spark.sql.catalogImplementation\")\r\n",
					"e = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionDriverName\")\r\n",
					"f = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionURL\") \r\n",
					"g = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionPassword\") \r\n",
					"h = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionUserName\")\r\n",
					"\r\n",
					"print(\"spark.sql.warehouse.dir:\", a)\r\n",
					"print(\"spark.sql.hive.metastore.version:\", b)\r\n",
					"#print (c)\r\n",
					"print (\"spark.sql.catalogImplementation: \", d)\r\n",
					"print(\"spark.hadoop.javax.jdo.option.ConnectionDriverName: \" , e)\r\n",
					"print(\"spark.hadoop.javax.jdo.option.ConnectionURL: \", f)\r\n",
					"print(\"spark.hadoop.javax.jdo.option.ConnectionPassword: \", g)\r\n",
					"print(\"spark.hadoop.javax.jdo.option.ConnectionUserName: \", h)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"h = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionUserName\")\r\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}