{
	"name": "LAB 02 - Exercise 4",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_spark",
				"display_name": "Synapse Spark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
				"name": "SparkPool01",
				"type": "Spark",
				"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"val df = spark.read.sqlanalytics(\"SQLPool01.wwi.UserTopProductPurchases\") \n",
					"// df.write.mode(\"overwrite\").saveAsTable(\"default.t1\")\n",
					"df.show(10)"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"df.head(10)\r\n",
					"\r\n",
					"// create a temporary view usable - this gets registered in the metastore\r\n",
					"df.createTempView(\"df2\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"# Calling the DataFrame df created in Scala to Python\r\n",
					"\r\n",
					"#create view based on temp table registred in metastore in earlier scala step\r\n",
					"df3 = sqlContext.table(\"df2\")\r\n",
					"# *********************\r\n",
					"\r\n",
					"topPurchases = df3.select(\r\n",
					"    \"UserId\", \"ProductId\",\r\n",
					"    \"ItemsPurchasedLast12Months\", \"IsTopProduct\",\r\n",
					"    \"IsPreferredProduct\")\r\n",
					"\r\n",
					"topPurchases.show(100)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"topPreferredProducts = (topPurchases\r\n",
					"    .filter( col(\"IsTopProduct\") == True)\r\n",
					"    .filter( col(\"IsPreferredProduct\") == True)\r\n",
					"    .orderBy( col(\"ItemsPurchasedLast12Months\").desc() ))\r\n",
					"\r\n",
					"topPreferredProducts.show(100)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- top 5 products for each user \r\n",
					"CREATE OR REPLACE TEMPORARY VIEW top_5_products\r\n",
					"AS\r\n",
					"    select UserId, ProductId, ItemsPurchasedLast12Months, seqnum\r\n",
					"    from (select *,\r\n",
					"                row_number() over (partition by UserId order by ItemsPurchasedLast12Months desc) as seqnum\r\n",
					"        from df2 order by UserId, ItemsPurchasedLast12Months, ProductID \r\n",
					"        ) a\r\n",
					"    where seqnum <= 5 and IsTopProduct == true and IsPreferredProduct = true\r\n",
					"    order by a.UserId\r\n",
					"\r\n",
					"    "
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"top5Products = sqlContext.table(\"top_5_products\")\r\n",
					"\r\n",
					"top5Products.show(100)"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- Test\r\n",
					"CREATE OR REPLACE TEMPORARY VIEW test\r\n",
					"AS\r\n",
					"    select userID, productId, count(*) as A\r\n",
					"           from df2  \r\n",
					"    where userId = 80000\r\n",
					"    group by UserId, ProductId\r\n",
					"    order by a desc\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"top5Products = sqlContext.table(\"test\")\r\n",
					"\r\n",
					"top5Products.show(100)"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"print('before filter: ', topPreferredProducts.count(), ', after filter: ', top5Products.count())"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"top5ProductsOverall = (top5Products.select(\"ProductId\",\"ItemsPurchasedLast12Months\")\r\n",
					"    .groupBy(\"ProductId\")\r\n",
					"    .agg( sum(\"ItemsPurchasedLast12Months\").alias(\"Total\") )\r\n",
					"    .orderBy( col(\"Total\").desc() )\r\n",
					"    .limit(5))\r\n",
					"\r\n",
					"top5ProductsOverall.show()"
				],
				"execution_count": 32
			}
		]
	}
}