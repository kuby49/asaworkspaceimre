{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "asaworkspaceimre2"
		},
		"AzureSynapse_keyVault_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapse_keyVault'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=asaworkspaceimre.database.windows.net;Initial Catalog=SQLPool01;User ID=asa.sql.admin"
		},
		"HMS_Test_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'HMS_Test'"
		},
		"asacosmosdb1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asacosmosdb1'"
		},
		"asadatalakeimre_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'asadatalakeimre'"
		},
		"asastoreimre_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asastoreimre'"
		},
		"asaworkspaceimre-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asaworkspaceimre-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:asaworkspaceimre.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"asaworkspaceimre2-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asaworkspaceimre2-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:asaworkspaceimre2.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"sqlpool01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=asaworkspaceimre.sql.azuresynapse.net;Initial Catalog=SQLPool01;User ID=asa.sql.admin"
		},
		"sqlpool01_highperf_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_highperf'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=asaworkspaceimre.sql.azuresynapse.net;Initial Catalog=SQLPool01;User ID=asa.sql.highperf"
		},
		"sqlpool01_import01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_import01'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=asaworkspaceimre.sql.azuresynapse.net;Initial Catalog=SQLPool01;User ID=asa.sql.import01"
		},
		"sqlpool01_workload01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_workload01'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=asaworkspaceimre.sql.azuresynapse.net;Initial Catalog=SQLPool01;User ID=asa.sql.workload01"
		},
		"sqlpool01_workload02_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_workload02'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=asaworkspaceimre.sql.azuresynapse.net;Initial Catalog=SQLPool01;User ID=asa.sql.workload02"
		},
		"AzureKeyValut_v2_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvaultimre.vault.azure.net/"
		},
		"AzureMLService1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "fe5aef09-bf0f-4faf-9c28-311200cf35cd"
		},
		"AzureMLService1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "Synapse-WS-L400"
		},
		"asadatalakeimre_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakeimre.dfs.core.windows.net"
		},
		"asakeyvaultimre_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvaultimre2.vault.azure.net/"
		},
		"asaworkspaceimre-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakeimre.dfs.core.windows.net"
		},
		"asaworkspaceimre2-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakeimre2.dfs.core.windows.net"
		},
		"synapse_hackaton_source_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'synapse_hackaton_source'"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/ASAL400 - Lab 2 - Write DailyCounts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "asal400_lab2_writecampaignanalyticstoasa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "asal400_lab2_writecampaignanalyticstoasa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DailyCountsIn": {},
									"CampaignAnalyticsASA": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 80,
								"computeType": "ComputeOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-11T08:36:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/asal400_lab2_writecampaignanalyticstoasa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAL400 - Lab 2 - Write User Profile Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "asal400_lab2_writeuserprofiledatatoasa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "asal400_lab2_writeuserprofiledatatoasa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EcommerceUserProfiles": {},
									"UserProfiles": {},
									"UserTopProductPurchasesASA": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "asaworkspaceimre-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging/userprofiles"
							},
							"compute": {
								"coreCount": 80,
								"computeType": "ComputeOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-28T16:22:09Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/asal400_lab2_writeuserprofiledatatoasa')]",
				"[concat(variables('workspaceId'), '/linkedServices/asaworkspaceimre-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ASAL400-Lab 5 - KeyvaultSecrets')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://asakeyvaultimre.vault.azure.net/secrets/PipelineSecret/8ddb31ec9afb415c9b44cc27bc56f4a7?api-version=7.0",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SecretValue",
							"value": {
								"value": "@activity('Web1').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SecretValue": {
						"type": "string",
						"defaultValue": "@activity('Web1').output.value"
					}
				},
				"variables": {
					"SecretValue": {
						"type": "String",
						"defaultValue": "@activity('Web1').output.value"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-03T14:00:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Challenge-CopyCsvSalesData')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Sales 2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "wwi-02/sale-poc/"
							},
							{
								"name": "Destination",
								"value": "wwi_poc.Sale_test"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "TRUNCATE TABLE wwi_poc.sale_test;",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 8,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TransactionId",
											"type": "String"
										},
										"sink": {
											"name": "TransactionId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "CustomerId",
											"type": "Int32"
										},
										"sink": {
											"name": "CustomerId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProductId",
											"type": "Int16"
										},
										"sink": {
											"name": "ProductId",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "Byte"
										},
										"sink": {
											"name": "Quantity",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "Decimal"
										},
										"sink": {
											"name": "Price",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TotalAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "TotalAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TransactionDate",
											"type": "Int32"
										},
										"sink": {
											"name": "TransactionDateId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProfitAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "ProfitAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "Hour",
											"type": "Byte"
										},
										"sink": {
											"name": "Hour",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "Minute",
											"type": "Byte"
										},
										"sink": {
											"name": "Minute",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "StoreId",
											"type": "Int16"
										},
										"sink": {
											"name": "StoreId",
											"type": "Int16"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "asal400_challenge_salepoc_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asal400_saletestheap_asa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T21:11:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_challenge_salepoc_csv')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_saletestheap_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyPipeline_fromSynapse')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_9gj",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "wwi.SaleSmall"
							},
							{
								"name": "Destination",
								"value": "wwi-02/test/sale-small"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_9gj",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_9gj",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-08-31T13:15:43Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_9gj')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_9gj')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 08 - Execute Business Analyst Queries')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Analyst",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,10)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 2 for Data Analyst",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "wwi02_sale_small_workload_02_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-11-11T16:44:02Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/wwi02_sale_small_workload_02_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 08 - Execute Data Analyst and CEO Queries')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CEO",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,20)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 1 for CEO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "wwi02_sale_small_workload_01_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Analyst",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,20)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Workload 2 for Data Analyst",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlDWSource",
											"sqlReaderQuery": "select count(X.A) from (\nselect CAST(CustomerId as nvarchar(20)) as A from wwi.SaleSmall) X where A like '%3%'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "wwi02_sale_small_workload_02_asa",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-11-11T16:44:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/wwi02_sale_small_workload_01_asa')]",
				"[concat(variables('workspaceId'), '/datasets/wwi02_sale_small_workload_02_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab01 - ASAL400 - Copy December Sales')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Sales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "TRUNCATE TABLE wwi_staging.Sale_Heap;",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"dataIntegrationUnits": 8,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TransactionId",
											"type": "String"
										},
										"sink": {
											"name": "TransactionId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "CustomerId",
											"type": "Int32"
										},
										"sink": {
											"name": "CustomerId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProductId",
											"type": "Int16"
										},
										"sink": {
											"name": "ProductId",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "SByte"
										},
										"sink": {
											"name": "Quantity",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "Decimal"
										},
										"sink": {
											"name": "Price",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TotalAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "TotalAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TransactionDate",
											"type": "Int32"
										},
										"sink": {
											"name": "TransactionDateId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProfitAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "ProfitAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "Hour",
											"type": "SByte"
										},
										"sink": {
											"name": "Hour",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "Minute",
											"type": "SByte"
										},
										"sink": {
											"name": "Minute",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "StoreId",
											"type": "Int16"
										},
										"sink": {
											"name": "StoreId",
											"type": "Int16"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "asal400_december_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asal400_saleheap_asa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-12-27T20:59:53Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_december_sales')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_saleheap_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Triglav Write DailyCounts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "asal400_lab2_writedailycountstoasa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "asal400_lab2_writecampaignanalyticstoasa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DailyCountsIn": {},
									"CampaignAnalyticsASA": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 80,
								"computeType": "ComputeOptimized"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-11T09:36:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/asal400_lab2_writecampaignanalyticstoasa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Triglav-CopyDailyCounts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Triglav Copy DailyCounts",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "wwi-02/sale-poc/"
							},
							{
								"name": "Destination",
								"value": "wwi_poc.Sale_test"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "TRUNCATE TABLE wwi_staging.DailySalesCounts2;",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								},
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "asadatalakeimre",
									"type": "LinkedServiceReference"
								}
							},
							"dataIntegrationUnits": 8,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Date",
											"type": "String"
										},
										"sink": {
											"name": "Date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "A",
											"type": "String"
										},
										"sink": {
											"name": "NorthAmerica",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "B",
											"type": "String"
										},
										"sink": {
											"name": "SouthAmerica",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "C",
											"type": "String"
										},
										"sink": {
											"name": "Europe",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "D",
											"type": "String"
										},
										"sink": {
											"name": "Africa",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "E",
											"type": "String"
										},
										"sink": {
											"name": "Asia",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "asal400_daily_counts3_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asal400_wwi_dailycounts3_asa",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-11T08:51:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_daily_counts3_source')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_wwi_dailycounts3_asa')]",
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_9gj')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeimre",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sale-small",
						"folderPath": "test",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_9gj')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_highperf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_highperf')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPoolLInkedServices')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "DateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Day",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Month",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Quarter",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Year",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "Date"
				},
				"sqlPool": {
					"referenceName": "SQLPool01",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/SQLPool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_campaign_analytics_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeimre",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "campaignanalytics.csv",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_challenge_salepoc_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeimre",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sale-20170501.csv",
						"folderPath": "sale-poc",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "ᄁ",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\\"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "String"
					},
					{
						"name": "CustomerId",
						"type": "String"
					},
					{
						"name": "ProductId",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Price",
						"type": "String"
					},
					{
						"name": "TotalAmount",
						"type": "String"
					},
					{
						"name": "TransactionDate",
						"type": "String"
					},
					{
						"name": "ProfitAmount",
						"type": "String"
					},
					{
						"name": "Hour",
						"type": "String"
					},
					{
						"name": "Minute",
						"type": "String"
					},
					{
						"name": "StoreId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_customerprofile_cosmosdb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asacosmosdb1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"userId": {
							"type": "integer"
						},
						"cartId": {
							"type": "string"
						},
						"preferredProducts": {
							"type": "array"
						},
						"productReviews": {
							"type": "array"
						}
					}
				},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asacosmosdb1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_daily_counts3_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeimre",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dailycounts3-escape.txt",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"columnDelimiter": ";",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "A",
						"type": "String"
					},
					{
						"name": "B",
						"type": "String"
					},
					{
						"name": "C",
						"type": "String"
					},
					{
						"name": "D",
						"type": "String"
					},
					{
						"name": "E",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_december_sales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeimre",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sale-20161230-snappy.parquet",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "INT32"
					},
					{
						"name": "ProductId",
						"type": "INT_16"
					},
					{
						"name": "Quantity",
						"type": "INT_8"
					},
					{
						"name": "Price",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TransactionDate",
						"type": "INT32"
					},
					{
						"name": "ProfitAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Hour",
						"type": "INT_8"
					},
					{
						"name": "Minute",
						"type": "INT_8"
					},
					{
						"name": "StoreId",
						"type": "INT_16"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_ecommerce_userprofiles_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeimre",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online-user-profiles-02",
						"fileSystem": "wwi-02"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"visitorId": {
							"type": "integer"
						},
						"topProductPurchases": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"itemsPurchasedLast12Months": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_saleheap_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_import01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "wwi_staging",
					"table": "Sale_Heap"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_import01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_sales_adlsgen2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakeimre",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sale-small",
						"fileSystem": "wwi-02"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "INT32"
					},
					{
						"name": "ProductId",
						"type": "INT_16"
					},
					{
						"name": "Quantity",
						"type": "INT_8"
					},
					{
						"name": "Price",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TransactionDate",
						"type": "INT32"
					},
					{
						"name": "ProfitAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Hour",
						"type": "INT_8"
					},
					{
						"name": "Minute",
						"type": "INT_8"
					},
					{
						"name": "StoreId",
						"type": "INT_16"
					},
					{
						"name": "Year",
						"type": "UTF8"
					},
					{
						"name": "Quarter",
						"type": "UTF8"
					},
					{
						"name": "Month",
						"type": "UTF8"
					},
					{
						"name": "Day",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakeimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_saletestheap_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_import01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi_poc",
					"table": "Sale_test"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_import01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_campaign_analytics_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Country",
						"type": "nvarchar"
					},
					{
						"name": "ProductCategory",
						"type": "nvarchar"
					},
					{
						"name": "CampaignName",
						"type": "nvarchar"
					},
					{
						"name": "Revenue",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "RevenueTarget",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "CampaignAnalytics"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_dailycounts3_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "Date",
						"type": "nvarchar"
					},
					{
						"name": "NorthAmerica",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SouthAmerica",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Europe",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Africa",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Asia",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "wwi_staging",
					"table": "DailySalesCounts2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_userproductreviews_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReviewText",
						"type": "nvarchar"
					},
					{
						"name": "ReviewDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "UserProductReviews"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_wwi_usertopproductpurchases_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ItemsPurchasedLast12Months",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsTopProduct",
						"type": "bit"
					},
					{
						"name": "IsPreferredProduct",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "UserTopProductPurchases"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wwi02_sale_small_workload_01_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_workload01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_workload01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wwi02_sale_small_workload_02_asa')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlpool01_workload02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "TransactionId",
						"type": "uniqueidentifier"
					},
					{
						"name": "CustomerId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductId",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Quantity",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "TransactionDateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProfitAmount",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Minute",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "StoreId",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "wwi",
					"table": "SaleSmall"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sqlpool01_workload02')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyValut_v2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyValut_v2_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('AzureMLService1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureMLService1_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "amlworkspaceimre",
					"authentication": "MSI"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapse_keyVault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapse_keyVault_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultimre",
							"type": "LinkedServiceReference"
						},
						"secretName": "SqlPassword"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HMS_Test')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('HMS_Test_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connected own PowerBI workspace to Synapse",
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "c07c061d-47cf-4ecc-b31a-b3cecbfd1e15",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asacosmosdb1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('asacosmosdb1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asadatalakeimre')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asadatalakeimre_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('asadatalakeimre_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asakeyvaultimre')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('asakeyvaultimre_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asastoreimre')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('asastoreimre_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspaceimre-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asaworkspaceimre-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspaceimre-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asaworkspaceimre-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspaceimre2-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asaworkspaceimre2-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspaceimre2-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asaworkspaceimre2-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultimre",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_highperf')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_highperf_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultimre",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_import01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_import01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultimre",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultimre",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload02')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload02_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultimre",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultimre')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse_hackaton_source')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('synapse_hackaton_source_sasUri')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureIntegrationRuntime01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_lab2_writecampaignanalyticstoasa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asal400_daily_counts3_source",
								"type": "DatasetReference"
							},
							"name": "DailyCountsIn"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "asal400_wwi_dailycounts3_asa",
								"type": "DatasetReference"
							},
							"name": "CampaignAnalyticsASA"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tDate as string,\n\t\tA as integer,\n\t\tB as integer,\n\t\tC as integer,\n\t\tD as integer,\n\t\tE as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmultiLineRow: true) ~> DailyCountsIn\nDailyCountsIn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDate as string,\n\t\tNorthAmerica as integer,\n\t\tSouthAmerica as integer,\n\t\tEurope as integer,\n\t\tAfrica as integer,\n\t\tAsia as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tDate,\n\t\tNorthAmerica = A,\n\t\tSouthAmerica = B,\n\t\tDate = C,\n\t\tAfrica = D,\n\t\tAsia = E\n\t)) ~> CampaignAnalyticsASA"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_daily_counts3_source')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_wwi_dailycounts3_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_lab2_writeuserprofiledatatoasa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asal400_ecommerce_userprofiles_source",
								"type": "DatasetReference"
							},
							"name": "EcommerceUserProfiles"
						},
						{
							"dataset": {
								"referenceName": "asal400_customerprofile_cosmosdb",
								"type": "DatasetReference"
							},
							"name": "UserProfiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "asal400_wwi_usertopproductpurchases_asa",
								"type": "DatasetReference"
							},
							"name": "UserTopProductPurchasesASA"
						}
					],
					"transformations": [
						{
							"name": "userId"
						},
						{
							"name": "UserTopProducts"
						},
						{
							"name": "DeriveProductColumns"
						},
						{
							"name": "UserPreferredProducts"
						},
						{
							"name": "JoinTopProductsWithPreferredProducts"
						},
						{
							"name": "DerivedColumnsForMerge"
						},
						{
							"name": "NonNullProductIDs"
						}
					],
					"script": "source(output(\n\t\tvisitorId as string,\n\t\ttopProductPurchases as (productId as string, itemsPurchasedLast12Months as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'arrayOfDocuments',\n\twildcardPaths:['online-user-profiles-02/*.json']) ~> EcommerceUserProfiles\nsource(output(\n\t\tuserId as integer,\n\t\tcartId as string,\n\t\tpreferredProducts as integer[],\n\t\tproductReviews as (productId as integer, reviewDate as string, reviewText as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'document',\n\tpartitionBy('hash', 30,\n\t\tuserId\n\t)) ~> UserProfiles\nEcommerceUserProfiles derive(visitorId = toInteger(visitorId)) ~> userId\nuserId foldDown(unroll(topProductPurchases),\n\tmapColumn(\n\t\tvisitorId,\n\t\tproductId = topProductPurchases.productId,\n\t\titemsPurchasedLast12Months = topProductPurchases.itemsPurchasedLast12Months\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UserTopProducts\nUserTopProducts derive(productId = toInteger(productId),\n\t\titemsPurchasedLast12Months = toInteger(itemsPurchasedLast12Months)) ~> DeriveProductColumns\nUserProfiles foldDown(unroll(preferredProducts),\n\tmapColumn(\n\t\tuserId,\n\t\tpreferredProductId = preferredProducts\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UserPreferredProducts\nDeriveProductColumns, UserPreferredProducts join(visitorId == userId,\n\tjoinType:'outer',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinTopProductsWithPreferredProducts\nJoinTopProductsWithPreferredProducts derive(isTopProduct = toBoolean(iif(isNull(productId), 'false', 'true')),\n\t\tisPreferredProduct = toBoolean(iif(isNull(preferredProductId), 'false', 'true')),\n\t\tproductId = iif(isNull(productId), preferredProductId, productId),\n\t\tuserId = iif(isNull(userId), visitorId, userId)) ~> DerivedColumnsForMerge\nDerivedColumnsForMerge filter(!isNull(productId)) ~> NonNullProductIDs\nNonNullProductIDs sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tUserId as integer,\n\t\tProductId as integer,\n\t\tItemsPurchasedLast12Months as integer,\n\t\tIsTopProduct as boolean,\n\t\tIsPreferredProduct as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tUserId = userId,\n\t\tProductId = productId,\n\t\tItemsPurchasedLast12Months = itemsPurchasedLast12Months,\n\t\tIsTopProduct = isTopProduct,\n\t\tIsPreferredProduct = isPreferredProduct\n\t)) ~> UserTopProductPurchasesASA"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_ecommerce_userprofiles_source')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_customerprofile_cosmosdb')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_wwi_usertopproductpurchases_asa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_Lab04_Serverless')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS [result]\n\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2019/*/*/*/*',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n\nSELECT\n    TransactionDate, ProductId,\n        CAST(SUM(ProfitAmount) AS decimal(18,2)) AS [(sum) Profit],\n        CAST(AVG(ProfitAmount) AS decimal(18,2)) AS [(avg) Profit],\n        SUM(Quantity) AS [(sum) Quantity]\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS [r] GROUP BY r.TransactionDate, r.ProductId;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/01_Star_Schema_creation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "_LAB02_Serving"
				},
				"content": {
					"query": "/* Create start schema */\nCREATE TABLE dbo.[DimCustomer](\n    [CustomerID] [int] NOT NULL,\n    [Title] [nvarchar](8) NULL,\n    [FirstName] [nvarchar](50) NOT NULL,\n    [MiddleName] [nvarchar](50) NULL,\n    [LastName] [nvarchar](50) NOT NULL,\n    [Suffix] [nvarchar](10) NULL,\n    [CompanyName] [nvarchar](128) NULL,\n    [SalesPerson] [nvarchar](256) NULL,\n    [EmailAddress] [nvarchar](50) NULL,\n    [Phone] [nvarchar](25) NULL,\n    [InsertedDate] [datetime] NOT NULL,\n    [ModifiedDate] [datetime] NOT NULL,\n    [HashKey] [char](66)\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\nCREATE TABLE [dbo].[FactResellerSales](\n    [ProductKey] [int] NOT NULL,\n    [OrderDateKey] [int] NOT NULL,\n    [DueDateKey] [int] NOT NULL,\n    [ShipDateKey] [int] NOT NULL,\n    [ResellerKey] [int] NOT NULL,\n    [EmployeeKey] [int] NOT NULL,\n    [PromotionKey] [int] NOT NULL,\n    [CurrencyKey] [int] NOT NULL,\n    [SalesTerritoryKey] [int] NOT NULL,\n    [SalesOrderNumber] [nvarchar](20) NOT NULL,\n    [SalesOrderLineNumber] [tinyint] NOT NULL,\n    [RevisionNumber] [tinyint] NULL,\n    [OrderQuantity] [smallint] NULL,\n    [UnitPrice] [money] NULL,\n    [ExtendedAmount] [money] NULL,\n    [UnitPriceDiscountPct] [float] NULL,\n    [DiscountAmount] [float] NULL,\n    [ProductStandardCost] [money] NULL,\n    [TotalProductCost] [money] NULL,\n    [SalesAmount] [money] NULL,\n    [TaxAmt] [money] NULL,\n    [Freight] [money] NULL,\n    [CarrierTrackingNumber] [nvarchar](25) NULL,\n    [CustomerPONumber] [nvarchar](25) NULL,\n    [OrderDate] [datetime] NULL,\n    [DueDate] [datetime] NULL,\n    [ShipDate] [datetime] NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH([SalesOrderNumber]),\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\nCREATE TABLE [dbo].[DimDate]\n( \n    [DateKey] [int]  NOT NULL,\n    [DateAltKey] [datetime]  NOT NULL,\n    [CalendarYear] [int]  NOT NULL,\n    [CalendarQuarter] [int]  NOT NULL,\n    [MonthOfYear] [int]  NOT NULL,\n    [MonthName] [nvarchar](15)  NOT NULL,\n    [DayOfMonth] [int]  NOT NULL,\n    [DayOfWeek] [int]  NOT NULL,\n    [DayName] [nvarchar](15)  NOT NULL,\n    [FiscalYear] [int]  NOT NULL,\n    [FiscalQuarter] [int]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\nCREATE TABLE [dbo].[DimReseller](\n    [ResellerKey] [int] NOT NULL,\n    [GeographyKey] [int] NULL,\n    [ResellerAlternateKey] [nvarchar](15) NULL,\n    [Phone] [nvarchar](25) NULL,\n    [BusinessType] [varchar](20) NOT NULL,\n    [ResellerName] [nvarchar](50) NOT NULL,\n    [NumberEmployees] [int] NULL,\n    [OrderFrequency] [char](1) NULL,\n    [OrderMonth] [tinyint] NULL,\n    [FirstOrderYear] [int] NULL,\n    [LastOrderYear] [int] NULL,\n    [ProductLine] [nvarchar](50) NULL,\n    [AddressLine1] [nvarchar](60) NULL,\n    [AddressLine2] [nvarchar](60) NULL,\n    [AnnualSales] [money] NULL,\n    [BankName] [nvarchar](50) NULL,\n    [MinPaymentType] [tinyint] NULL,\n    [MinPaymentAmount] [money] NULL,\n    [AnnualRevenue] [money] NULL,\n    [YearOpened] [int] NULL\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\nCREATE TABLE [dbo].[DimEmployee](\n    [EmployeeKey] [int] NOT NULL,\n    [ParentEmployeeKey] [int] NULL,\n    [EmployeeNationalIDAlternateKey] [nvarchar](15) NULL,\n    [ParentEmployeeNationalIDAlternateKey] [nvarchar](15) NULL,\n    [SalesTerritoryKey] [int] NULL,\n    [FirstName] [nvarchar](50) NOT NULL,\n    [LastName] [nvarchar](50) NOT NULL,\n    [MiddleName] [nvarchar](50) NULL,\n    [NameStyle] [bit] NOT NULL,\n    [Title] [nvarchar](50) NULL,\n    [HireDate] [date] NULL,\n    [BirthDate] [date] NULL,\n    [LoginID] [nvarchar](256) NULL,\n    [EmailAddress] [nvarchar](50) NULL,\n    [Phone] [nvarchar](25) NULL,\n    [MaritalStatus] [nchar](1) NULL,\n    [EmergencyContactName] [nvarchar](50) NULL,\n    [EmergencyContactPhone] [nvarchar](25) NULL,\n    [SalariedFlag] [bit] NULL,\n    [Gender] [nchar](1) NULL,\n    [PayFrequency] [tinyint] NULL,\n    [BaseRate] [money] NULL,\n    [VacationHours] [smallint] NULL,\n    [SickLeaveHours] [smallint] NULL,\n    [CurrentFlag] [bit] NOT NULL,\n    [SalesPersonFlag] [bit] NOT NULL,\n    [DepartmentName] [nvarchar](50) NULL,\n    [StartDate] [date] NULL,\n    [EndDate] [date] NULL,\n    [Status] [nvarchar](50) NULL,\n    [EmployeePhoto] [varbinary](max) NULL\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED INDEX (EmployeeKey)\n);\nGO\n\nCREATE TABLE [dbo].[DimProduct](\n    [ProductKey] [int] NOT NULL,\n    [ProductAlternateKey] [nvarchar](25) NULL,\n    [ProductSubcategoryKey] [int] NULL,\n    [WeightUnitMeasureCode] [nchar](3) NULL,\n    [SizeUnitMeasureCode] [nchar](3) NULL,\n    [EnglishProductName] [nvarchar](50) NOT NULL,\n    [SpanishProductName] [nvarchar](50) NULL,\n    [FrenchProductName] [nvarchar](50) NULL,\n    [StandardCost] [money] NULL,\n    [FinishedGoodsFlag] [bit] NOT NULL,\n    [Color] [nvarchar](15) NOT NULL,\n    [SafetyStockLevel] [smallint] NULL,\n    [ReorderPoint] [smallint] NULL,\n    [ListPrice] [money] NULL,\n    [Size] [nvarchar](50) NULL,\n    [SizeRange] [nvarchar](50) NULL,\n    [Weight] [float] NULL,\n    [DaysToManufacture] [int] NULL,\n    [ProductLine] [nchar](2) NULL,\n    [DealerPrice] [money] NULL,\n    [Class] [nchar](2) NULL,\n    [Style] [nchar](2) NULL,\n    [ModelName] [nvarchar](50) NULL,\n    [LargePhoto] [varbinary](max) NULL,\n    [EnglishDescription] [nvarchar](400) NULL,\n    [FrenchDescription] [nvarchar](400) NULL,\n    [ChineseDescription] [nvarchar](400) NULL,\n    [ArabicDescription] [nvarchar](400) NULL,\n    [HebrewDescription] [nvarchar](400) NULL,\n    [ThaiDescription] [nvarchar](400) NULL,\n    [GermanDescription] [nvarchar](400) NULL,\n    [JapaneseDescription] [nvarchar](400) NULL,\n    [TurkishDescription] [nvarchar](400) NULL,\n    [StartDate] [datetime] NULL,\n    [EndDate] [datetime] NULL,\n    [Status] [nvarchar](7) NULL    \n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED INDEX (ProductKey)\n);\nGO\n\nCREATE TABLE [dbo].[DimGeography](\n    [GeographyKey] [int] NOT NULL,\n    [City] [nvarchar](30) NULL,\n    [StateProvinceCode] [nvarchar](3) NULL,\n    [StateProvinceName] [nvarchar](50) NULL,\n    [CountryRegionCode] [nvarchar](3) NULL,\n    [EnglishCountryRegionName] [nvarchar](50) NULL,\n    [SpanishCountryRegionName] [nvarchar](50) NULL,\n    [FrenchCountryRegionName] [nvarchar](50) NULL,\n    [PostalCode] [nvarchar](15) NULL,\n    [SalesTerritoryKey] [int] NULL,\n    [IpAddressLocator] [nvarchar](15) NULL\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\nSELECT*  FROM [DimGeography]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_Lab04_Create_External_Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'wwi-02_asadatalakeimre_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [wwi-02_asadatalakeimre_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION   = 'https://asadatalakeimre.dfs.core.windows.net/wwi-02' \n    );\nGo\n\nCREATE DATABASE SCOPED CREDENTIAL [storeimre]\nWITH IDENTITY='SHARED ACCESS SIGNATURE',  \nSECRET = '?sv=2021-04-10&st=2022-08-31T18%3A33%3A21Z&se=2026-12-01T19%3A33%3A00Z&sr=c&sp=racwdxltf&sig=1MGMbwv84yKe2f0skBhK9F67P5UHifwwSv0F%2Byja6cI%3D'\nGO\n\nDROP EXTERNAL DATA SOURCE [wwi-02_storeimre_wasb_core_windows_net] \n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'wwi-02_storeimre_wasb_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [wwi-02_storeimre_wasb_core_windows_net] \n\tWITH (\n\t\tLOCATION   =  'wasbs://staging@asastoreimre.blob.core.windows.net/',\n        CREDENTIAL = [storeimre]\n    );\nGo\n\nCREATE View VAllSalesExt \nAS SELECT \t\n    [CustomerId],\n\t[ProductId] ,\n\t[Quantity] ,\n\t[Price] ,\n\t[TotalAmount] ,\n\t[ProfitAmount],\n\t[Hour] ,\n\t[Minute],\n\t[StoreId]  FROM [wwi].[SaleSmall];\n\nCREATE External Table AllSalesExt \n\tWITH (\n\tLOCATION = '/test/allsalesext',\n\tDATA_SOURCE = [wwi-02_storeimre_wasb_core_windows_net],\n\tFILE_FORMAT = [QuotedCsvWithHeader]\n\t)\nAS (SELECT * FROM vAllSalesExt);\n\n\nGO\n\nCREATE EXTERNAL TABLE AllSales (\n\t[TransactionId] varchar(8000),\n\t[CustomerId] int,\n\t[ProductId] smallint,\n\t[Quantity] smallint,\n\t[Price] numeric(38,18),\n\t[TotalAmount] numeric(38,18),\n\t[TransactionDate] int,\n\t[ProfitAmount] numeric(38,18),\n\t[Hour] smallint,\n\t[Minute] smallint,\n\t[StoreId] smallint\n\t)\n\tWITH (\n\tLOCATION = 'sale-small/Year=2019/*/*/*/*',\n\tDATA_SOURCE = [wwi-02_asadatalakeimre_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\n\n/* DROP EXTERNAL TABLE All2019Sales */\n\nSELECT TOP 100 * FROM All2019Sales\nGO\n\nSELECT count(*) FROM All2019Sales\nGO\n\n\nIF NOT EXISTS (SELECT * FROM sys.symmetric_keys) BEGIN\n    declare @pasword nvarchar(400) = CAST(newid() as VARCHAR(400));\n    EXEC('CREATE MASTER KEY ENCRYPTION BY PASSWORD = ''' + @pasword + '''')\nEND\n\nCREATE DATABASE SCOPED CREDENTIAL [sqlondemand]\nWITH IDENTITY='SHARED ACCESS SIGNATURE',  \nSECRET = 'sv=2018-03-28&ss=bf&srt=sco&sp=rl&st=2019-10-14T12%3A10%3A25Z&se=2061-12-31T12%3A10%3A00Z&sig=KlSU2ullCscyTS0An0nozEpo4tO5JAgGBvw%2FJX2lguw%3D'\nGO\n\n-- Create external data source secured using credential\nCREATE EXTERNAL DATA SOURCE SqlOnDemandDemo WITH (\n    LOCATION = 'https://sqlondemandstorage.blob.core.windows.net',\n    CREDENTIAL = sqlondemand\n);\nGO\n\nCREATE EXTERNAL FILE FORMAT QuotedCsvWithHeader\nWITH (  \n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS (\n        FIELD_TERMINATOR = ',',\n        STRING_DELIMITER = '\"',\n        FIRST_ROW = 2\n    )\n);\nGO\n\nCREATE EXTERNAL TABLE [population]\n(\n    [country_code] VARCHAR (5) COLLATE Latin1_General_BIN2,\n    [country_name] VARCHAR (100) COLLATE Latin1_General_BIN2,\n    [year] smallint,\n    [population] bigint\n)\nWITH (\n    LOCATION = 'csv/population/population.csv',\n    DATA_SOURCE = SqlOnDemandDemo,\n    FILE_FORMAT = QuotedCsvWithHeader\n);\nGO\n\nSELECT * FROM POPULATION\n\nCREATE VIEW CustomerInfo AS\n    SELECT * \nFROM OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/customer-info/customerinfo.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0',\n        FIRSTROW=2\n    )\nWITH (\n    [UserName] VARCHAR (50),\n    [Gender] VARCHAR (10),\n    [Phone] VARCHAR (50),\n    [Email] VARCHAR (100),\n    [CreditCard] VARCHAR (50)\n) AS [r];\nGO\n\nSELECT * FROM CustomerInfo;\nGO\n\nSELECT count(*) FROM CustomerInfo;\nGO\n\nSELECT * FROM vstats_columns\nWhere user_created = 'True'\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/02_Star_Schema_Populating')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "_LAB02_Serving"
				},
				"content": {
					"query": "COPY INTO [dbo].[DimProduct]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimProduct.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[DimReseller]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimReseller.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[DimEmployee]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimEmployee.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[DimGeography]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimGeography.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[FactResellerSales]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/FactResellerSales.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[DimDate]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimDate.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='0x0a',\n    ENCODING = 'UTF16'\n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/03_Query_Synapse')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "_LAB02_Serving"
				},
				"content": {
					"query": "SELECT\n    Coalesce(p.[ModelName], p.[EnglishProductName]) AS [Model]\n    ,g.City AS ResellerCity\n    ,g.StateProvinceName AS StateProvince\n    ,d.[CalendarYear]\n    ,d.[FiscalYear]\n    ,d.[MonthOfYear] AS [Month]\n    ,sum(f.OrderQuantity) AS Quantity\n    ,sum(f.ExtendedAmount) AS Amount\n    ,approx_count_distinct(f.SalesOrderNumber) AS UniqueOrders  \nFROM\n    [dbo].[FactResellerSales] f\nINNER JOIN [dbo].[DimReseller] r\n    ON f.ResellerKey = r.ResellerKey\nINNER JOIN [dbo].[DimGeography] g\n    ON r.GeographyKey = g.GeographyKey\nINNER JOIN [dbo].[DimDate] d\n    ON f.[OrderDateKey] = d.[DateKey]\nINNER JOIN [dbo].[DimProduct] p\n    ON f.[ProductKey] = p.[ProductKey]\nGROUP BY\n    Coalesce(p.[ModelName], p.[EnglishProductName])\n    ,g.City\n    ,g.StateProvinceName\n    ,d.[CalendarYear]\n    ,d.[FiscalYear]\n    ,d.[MonthOfYear]\nORDER BY Amount DESC\n\n/* same as previous, limit to 2012-2013 October */\nSELECT\n    Coalesce(p.[ModelName], p.[EnglishProductName]) AS [Model]\n    ,g.City AS ResellerCity\n    ,g.StateProvinceName AS StateProvince\n    ,d.[CalendarYear]\n    ,d.[FiscalYear]\n    ,d.[MonthOfYear] AS [Month]\n    ,sum(f.OrderQuantity) AS Quantity\n    ,sum(f.ExtendedAmount) AS Amount\n    ,approx_count_distinct(f.SalesOrderNumber) AS UniqueOrders  \nFROM\n    [dbo].[FactResellerSales] f\nINNER JOIN [dbo].[DimReseller] r\n    ON f.ResellerKey = r.ResellerKey\nINNER JOIN [dbo].[DimGeography] g\n    ON r.GeographyKey = g.GeographyKey\nINNER JOIN [dbo].[DimDate] d\n    ON f.[OrderDateKey] = d.[DateKey]\nINNER JOIN [dbo].[DimProduct] p\n    ON f.[ProductKey] = p.[ProductKey]\nWHERE d.[MonthOfYear] = 10 AND d.[FiscalYear] IN (2012, 2013)\nGROUP BY\n    Coalesce(p.[ModelName], p.[EnglishProductName])\n    ,g.City\n    ,g.StateProvinceName\n    ,d.[CalendarYear]\n    ,d.[FiscalYear]\n    ,d.[MonthOfYear]\nORDER BY d.[FiscalYear]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ABN_ORC')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create schema abnorc\n\ncreate table abnorc.abn WITH (DISTRIBUTION=ROUND_ROBIN, HEAP) AS select * FROM dbo.mark_test\n\nSELECT * FROM abnorc.abn\n\nSELECT CAST (Column16 AS VARBINARY(MAX)) AS cColumn16Bin, Column16 FROM abnorc.abn\n\nSELECT (CONVERT(VARBINARY(MAX), CONVERT(NVARCHAR(max), Column16, 1))) AS cColumn16Bin, Column16 FROM abnorc.abn\n\nTRUNCATE TABLE abnorc.abn\n\nSELECT * FROM sys.dm_pdw_exec_requests where COMMAND LIKE 'COPY%';\n\n\nCOPY INTO [abnorc].[abn] ([Column16] 16) \nFROM 'https://asadatalakeimre.dfs.core.windows.net:443/wwi-02/test/abnorc' \nWITH (\n--   IDENTITY_INSERT='OFF',\n--   CREDENTIAL=(IDENTITY='Storage Account Key',SECRET='***'),\n    FILE_TYPE='ORC'\n--    ,COMPRESSION='NONE'\n--    ,ENCODING='UTF8'\n)\nOPTION (LABEL='direct copy into')\n\ndrop table [abnorc].[abn_varchar]\n\nCREATE TABLE [abnorc].[abn_varchar]\n( \n--\t[Column16] [varchar](256) COLLATE  Latin1_General_100_CI_AS_UTF8 NULL\n    [Column16] [varchar](256)  NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nGO;\n\nCOPY INTO [abnorc].[abn_varchar] (\n    [Column16] 16\n)\nFROM 'https://asadatalakeimre.dfs.core.windows.net:443/wwi-02/test/abnorc' \nWITH (\n--   IDENTITY_INSERT='OFF',\n--   CREDENTIAL=(IDENTITY='Storage Account Key',SECRET='***'),\n    FILE_TYPE='ORC'\n--    ,COMPRESSION='NONE'\n--    ,ENCODING='UTF8'\n)\nOPTION (LABEL='direct copy into all sorts of varchar');\n\nSELECT * FROM abnorc.abn_varchar\n\nSELECT CAST (Column16 AS VARBINARY(MAX)), Column16 FROM abnorc.abn_varchar\n\nSELECT (CONVERT(VARBINARY(MAX), CONVERT(VARCHAR(max), Column16, 1))) AS cColumn16Bin, Column16 FROM abnorc.abn_varchar\n\ncreate table abnorc.abn_polybase  WITH (DISTRIBUTION=ROUND_ROBIN, HEAP) AS select * FROM dbo.mark_test\n\ncreate table abnorc.abn_polybase_varchar  WITH (DISTRIBUTION=ROUND_ROBIN, HEAP) AS select * from  abnorc.abn_varchar\n\ntruncate table abnorc.abn_polybase\n\ntruncate table abnorc.abn_polybase_varchar\n\nSELECT COMMAND FROM sys.dm_pdw_exec_requests WHERE COMMAND LIKE 'CREATE EXTERNAL%' ORDER BY start_time desc \n\nSELECT * FROM abnorc.abn_polybase\n\nDROP EXTERNAL DATA SOURCE [ImreDataSource] \n\nCREATE EXTERNAL DATA SOURCE [ImreDataSource] \n            WITH (\n                TYPE = HADOOP, \n                   LOCATION ='abfss://wwi-02@asadatalakeimre.dfs.core.windows.net'\n            );\n\nCREATE EXTERNAL FILE FORMAT [ImreOrcFileFormat]\n            WITH (\n                FORMAT_TYPE = ORC\n            );\n\nCREATE EXTERNAL TABLE [abnorc].[abn_polybase_external] ([DEBT_ASSESSMENT_ID] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_LOANS] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_CURRENT_AC] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_OBSI] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_LEASE] nvarchar(4000) NULL,[TOT_CR_ESR_AMT_ABN_AMRO_LSE] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_MORTGAGES] nvarchar(4000) NULL,[TOT_RECOVERY_AMT_EXPECTED] nvarchar(4000) NULL,[TOT_CR_COMMITTED] nvarchar(4000) NULL,[EXPECTED_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[PROPOSED_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[PROPOSED_WRITE_OFFS] nvarchar(4000) NULL,[OTHER_LOAN_LOSS_PROVISION_LBL] nvarchar(4000) NULL,[OTHER_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[OTHER_CR_COMMITTED] nvarchar(4000) NULL,[OTHER_CR_COMMITTED_LABEL] nvarchar(4000) NULL,[CLOSING_TOT_CR_LIMIT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_SEQ_NBR] nvarchar(4000) NULL,[APPROVAL_DAT] nvarchar(4000) NULL,[AR_DATA_LAST_UPDATE_DAT] nvarchar(4000) NULL,[AR_SECURITY_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[ASES_CMB_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[CR_PROFILE_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[CUST_DATA_LAST_UPDATE_DAT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_LCS_TP_ID] nvarchar(4000) NULL,[LOAN_LOSS_PROVISION_DATA_ST_ID] nvarchar(4000) NULL,[ENTRY_EXIT_DATA_ST_ID] nvarchar(4000) NULL,[CUST_DATA_ST_ID] nvarchar(4000) NULL,[CR_PROFILE_DATA_ST_ID] nvarchar(4000) NULL,[ASSESSMENT_CMB_DATA_ST_ID] nvarchar(4000) NULL,[AR_SECURITY_DATA_ST_ID] nvarchar(4000) NULL,[AR_DATA_ST_ID] nvarchar(4000) NULL,[DEBT_ASSESSMENT_TP_ID] nvarchar(4000) NULL,[DELIVERY_SYSTEM_ID] nvarchar(4000) NULL,[CR_AGREEMENT_ID] nvarchar(4000) NULL,[INTERNAL_FRR_RATING_VALUE_ID] nvarchar(4000) NULL,[CUST_DATA_REJECT_REASON] nvarchar(4000) NULL,[AR_DATA_REJECT_REASON] nvarchar(4000) NULL,[ASSESSMENT_CMB_DATA_RJCT_RSN] nvarchar(4000) NULL,[CR_PROFILE_DATA_REJECT_REASON] nvarchar(4000) NULL,[AR_SECURITY_DATA_REJECT_REASON] nvarchar(4000) NULL,[ENTRY_EXIT_DATA_REJECT_REASON] nvarchar(4000) NULL,[LOAN_LOSS_PRVN_DATA_RJCT_RSN] nvarchar(4000) NULL,[FIRST_CR_AGREEMENT_START_DAT] nvarchar(4000) NULL,[LATEST_CR_AGREEMENT_START_DAT] nvarchar(4000) NULL,[AR_TERMINATION_REQUEST_DAT] nvarchar(4000) NULL,[SCHEDULED_DIRECT_RECOVERY_COST] nvarchar(4000) NULL,[DIRECT_REC_COST_PRDC_ITRV_ID] nvarchar(4000) NULL,[DIRECT_RECOVERY_COSTS_STRT_DAT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_REMARKS] nvarchar(4000) NULL,[DEBT_ASSESSMENT_LCS_TP_DAT] nvarchar(4000) NULL,[NORM_RECOVERY_AMT] nvarchar(4000) NULL,[RECOVERY_ADDED_VALUE] nvarchar(4000) NULL,[RECOVERY_ADDED_VALUE_DAT] nvarchar(4000) NULL,[VERSION_SDAT] nvarchar(4000) NULL,[VERSION_EDAT] nvarchar(4000) NULL,[INIT_POPULATION_TMS] nvarchar(4000) NULL,[LAST_POPULATION_TMS] nvarchar(4000) NULL,[BUSINESS_RULE_VERSION_NBR] nvarchar(4000) NULL,[STATUS_IND] nvarchar(4000) NULL)\n            WITH (LOCATION='/test/abnorc',\n                  DATA_SOURCE = [ImreDataSource],\n                  FILE_FORMAT = [ImreOrcFileFormat]\n                  ,REJECT_TYPE=value, REJECT_VALUE=0\n            );\n\nDROP EXTERNAL  TABLE [abnorc].[abn_polybase_external2] \n\nCREATE EXTERNAL TABLE [abnorc].[abn_polybase_external2] ([DEBT_ASSESSMENT_ID] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_LOANS] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_CURRENT_AC] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_OBSI] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_LEASE] nvarchar(4000) NULL,[TOT_CR_ESR_AMT_ABN_AMRO_LSE] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_MORTGAGES] nvarchar(4000) NULL,[TOT_RECOVERY_AMT_EXPECTED] nvarchar(4000) NULL,[TOT_CR_COMMITTED] nvarchar(4000) NULL,[EXPECTED_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[PROPOSED_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[PROPOSED_WRITE_OFFS] nvarchar(4000) NULL,[OTHER_LOAN_LOSS_PROVISION_LBL] nvarchar(4000) NULL,[OTHER_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[OTHER_CR_COMMITTED] nvarchar(4000) NULL,\n       [OTHER_CR_COMMITTED_LABEL] nvarchar(200) ,[CLOSING_TOT_CR_LIMIT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_SEQ_NBR] nvarchar(4000) NULL,[APPROVAL_DAT] nvarchar(4000) NULL,[AR_DATA_LAST_UPDATE_DAT] nvarchar(4000) NULL,[AR_SECURITY_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[ASES_CMB_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[CR_PROFILE_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[CUST_DATA_LAST_UPDATE_DAT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_LCS_TP_ID] nvarchar(4000) NULL,[LOAN_LOSS_PROVISION_DATA_ST_ID] nvarchar(4000) NULL,[ENTRY_EXIT_DATA_ST_ID] nvarchar(4000) NULL,[CUST_DATA_ST_ID] nvarchar(4000) NULL,[CR_PROFILE_DATA_ST_ID] nvarchar(4000) NULL,[ASSESSMENT_CMB_DATA_ST_ID] nvarchar(4000) NULL,[AR_SECURITY_DATA_ST_ID] nvarchar(4000) NULL,[AR_DATA_ST_ID] nvarchar(4000) NULL,[DEBT_ASSESSMENT_TP_ID] nvarchar(4000) NULL,[DELIVERY_SYSTEM_ID] nvarchar(4000) NULL,[CR_AGREEMENT_ID] nvarchar(4000) NULL,[INTERNAL_FRR_RATING_VALUE_ID] nvarchar(4000) NULL,[CUST_DATA_REJECT_REASON] nvarchar(4000) NULL,[AR_DATA_REJECT_REASON] nvarchar(4000) NULL,[ASSESSMENT_CMB_DATA_RJCT_RSN] nvarchar(4000) NULL,[CR_PROFILE_DATA_REJECT_REASON] nvarchar(4000) NULL,[AR_SECURITY_DATA_REJECT_REASON] nvarchar(4000) NULL,[ENTRY_EXIT_DATA_REJECT_REASON] nvarchar(4000) NULL,[LOAN_LOSS_PRVN_DATA_RJCT_RSN] nvarchar(4000) NULL,[FIRST_CR_AGREEMENT_START_DAT] nvarchar(4000) NULL,[LATEST_CR_AGREEMENT_START_DAT] nvarchar(4000) NULL,[AR_TERMINATION_REQUEST_DAT] nvarchar(4000) NULL,[SCHEDULED_DIRECT_RECOVERY_COST] nvarchar(4000) NULL,[DIRECT_REC_COST_PRDC_ITRV_ID] nvarchar(4000) NULL,[DIRECT_RECOVERY_COSTS_STRT_DAT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_REMARKS] nvarchar(4000) NULL,[DEBT_ASSESSMENT_LCS_TP_DAT] nvarchar(4000) NULL,[NORM_RECOVERY_AMT] nvarchar(4000) NULL,[RECOVERY_ADDED_VALUE] nvarchar(4000) NULL,[RECOVERY_ADDED_VALUE_DAT] nvarchar(4000) NULL,[VERSION_SDAT] nvarchar(4000) NULL,[VERSION_EDAT] nvarchar(4000) NULL,[INIT_POPULATION_TMS] nvarchar(4000) NULL,[LAST_POPULATION_TMS] nvarchar(4000) NULL,[BUSINESS_RULE_VERSION_NBR] nvarchar(4000) NULL,[STATUS_IND] nvarchar(4000) NULL)\n            WITH (LOCATION='/test/abnorc',\n                  DATA_SOURCE = [ImreDataSource],\n                  FILE_FORMAT = [ImreOrcFileFormat]\n                  ,REJECT_TYPE=value, REJECT_VALUE=0\n            );\n\nALTER TABLE [abnorc].[abn_polybase_external2] \nALTER COLUMN OTHER_CR_COMMITTED_LABEL VARCHAR(50) COLLATE SQL_Latin1_General_CP1_CI_AS\n\n\nSELECT DATABASEPROPERTYEX(DB_NAME(), 'Collation') AS Collation;\n\n/* SELECT * FROM sys.sp_tablecollations_100 (abn_polybase_external2) */\n\nSELECT [OTHER_CR_COMMITTED_LABEL] FROM [abnorc].[abn_polybase_external]\n\nSELECT (CONVERT(VARBINARY(MAX), CONVERT(VARCHAR(max), [OTHER_CR_COMMITTED_LABEL], 1))) AS cColumn16Bin, [OTHER_CR_COMMITTED_LABEL] FROM abnorc.abn_polybase_external\n\nSELECT (CONVERT(VARBINARY(MAX), CONVERT(NVARCHAR(max), [OTHER_CR_COMMITTED_LABEL], 1))) AS cColumn16Bin, [OTHER_CR_COMMITTED_LABEL] FROM abnorc.abn_polybase_external\n\nSELECT (CAST( [OTHER_CR_COMMITTED_LABEL] AS VARBINARY(MAX))), [OTHER_CR_COMMITTED_LABEL] FROM abnorc.abn_polybase_external\n\nSELECT [OTHER_CR_COMMITTED_LABEL] FROM [abnorc].[abn_polybase_external2]\n\nSELECT (CONVERT(VARBINARY(MAX), CONVERT(VARCHAR(max), [OTHER_CR_COMMITTED_LABEL], 1))) AS cColumn16Bin, [OTHER_CR_COMMITTED_LABEL] FROM abnorc.abn_polybase_external2\n\nSELECT (CONVERT(VARBINARY(MAX), CONVERT(NVARCHAR(max), [OTHER_CR_COMMITTED_LABEL], 1))) AS cColumn16Bin, [OTHER_CR_COMMITTED_LABEL] FROM abnorc.abn_polybase_external2\n\nSELECT (CAST( [OTHER_CR_COMMITTED_LABEL] AS VARBINARY(MAX))), [OTHER_CR_COMMITTED_LABEL] FROM abnorc.abn_polybase_external2\n\nCREATE EXTERNAL TABLE [abnorc].[abn_polybase_external3] ([DEBT_ASSESSMENT_ID] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_LOANS] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_CURRENT_AC] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_OBSI] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_LEASE] nvarchar(4000) NULL,[TOT_CR_ESR_AMT_ABN_AMRO_LSE] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_MORTGAGES] nvarchar(4000) NULL,[TOT_RECOVERY_AMT_EXPECTED] nvarchar(4000) NULL,[TOT_CR_COMMITTED] nvarchar(4000) NULL,[EXPECTED_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[PROPOSED_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[PROPOSED_WRITE_OFFS] nvarchar(4000) NULL,[OTHER_LOAN_LOSS_PROVISION_LBL] nvarchar(4000) NULL,[OTHER_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[OTHER_CR_COMMITTED] nvarchar(4000) NULL,[OTHER_CR_COMMITTED_LABEL] varchar(200) NULL,[CLOSING_TOT_CR_LIMIT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_SEQ_NBR] nvarchar(4000) NULL,[APPROVAL_DAT] nvarchar(4000) NULL,[AR_DATA_LAST_UPDATE_DAT] nvarchar(4000) NULL,[AR_SECURITY_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[ASES_CMB_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[CR_PROFILE_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[CUST_DATA_LAST_UPDATE_DAT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_LCS_TP_ID] nvarchar(4000) NULL,[LOAN_LOSS_PROVISION_DATA_ST_ID] nvarchar(4000) NULL,[ENTRY_EXIT_DATA_ST_ID] nvarchar(4000) NULL,[CUST_DATA_ST_ID] nvarchar(4000) NULL,[CR_PROFILE_DATA_ST_ID] nvarchar(4000) NULL,[ASSESSMENT_CMB_DATA_ST_ID] nvarchar(4000) NULL,[AR_SECURITY_DATA_ST_ID] nvarchar(4000) NULL,[AR_DATA_ST_ID] nvarchar(4000) NULL,[DEBT_ASSESSMENT_TP_ID] nvarchar(4000) NULL,[DELIVERY_SYSTEM_ID] nvarchar(4000) NULL,[CR_AGREEMENT_ID] nvarchar(4000) NULL,[INTERNAL_FRR_RATING_VALUE_ID] nvarchar(4000) NULL,[CUST_DATA_REJECT_REASON] nvarchar(4000) NULL,[AR_DATA_REJECT_REASON] nvarchar(4000) NULL,[ASSESSMENT_CMB_DATA_RJCT_RSN] nvarchar(4000) NULL,[CR_PROFILE_DATA_REJECT_REASON] nvarchar(4000) NULL,[AR_SECURITY_DATA_REJECT_REASON] nvarchar(4000) NULL,[ENTRY_EXIT_DATA_REJECT_REASON] nvarchar(4000) NULL,[LOAN_LOSS_PRVN_DATA_RJCT_RSN] nvarchar(4000) NULL,[FIRST_CR_AGREEMENT_START_DAT] nvarchar(4000) NULL,[LATEST_CR_AGREEMENT_START_DAT] nvarchar(4000) NULL,[AR_TERMINATION_REQUEST_DAT] nvarchar(4000) NULL,[SCHEDULED_DIRECT_RECOVERY_COST] nvarchar(4000) NULL,[DIRECT_REC_COST_PRDC_ITRV_ID] nvarchar(4000) NULL,[DIRECT_RECOVERY_COSTS_STRT_DAT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_REMARKS] nvarchar(4000) NULL,[DEBT_ASSESSMENT_LCS_TP_DAT] nvarchar(4000) NULL,[NORM_RECOVERY_AMT] nvarchar(4000) NULL,[RECOVERY_ADDED_VALUE] nvarchar(4000) NULL,[RECOVERY_ADDED_VALUE_DAT] nvarchar(4000) NULL,[VERSION_SDAT] nvarchar(4000) NULL,[VERSION_EDAT] nvarchar(4000) NULL,[INIT_POPULATION_TMS] nvarchar(4000) NULL,[LAST_POPULATION_TMS] nvarchar(4000) NULL,[BUSINESS_RULE_VERSION_NBR] nvarchar(4000) NULL,[STATUS_IND] nvarchar(4000) NULL)\n            WITH (LOCATION='/test/abnorc',\n                  DATA_SOURCE = [ImreDataSource],\n                  FILE_FORMAT = [ImreOrcFileFormat]\n                  ,REJECT_TYPE=value, REJECT_VALUE=0\n            );\n\nSELECT (CONVERT(VARBINARY(MAX), CONVERT(VARCHAR(max), [OTHER_CR_COMMITTED_LABEL], 1))) AS cColumn16Bin, [OTHER_CR_COMMITTED_LABEL] FROM abnorc.abn_polybase_external3\n\nSELECT (CONVERT(VARBINARY(MAX), CONVERT(NVARCHAR(max), [OTHER_CR_COMMITTED_LABEL], 1))) AS cColumn16Bin, [OTHER_CR_COMMITTED_LABEL] FROM abnorc.abn_polybase_external3\n\nSELECT (CAST( [OTHER_CR_COMMITTED_LABEL] AS VARBINARY(MAX))), [OTHER_CR_COMMITTED_LABEL] FROM abnorc.abn_polybase_external3\n\nCREATE EXTERNAL TABLE [abnorc].[abn_polybase_external] ([DEBT_ASSESSMENT_ID] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_LOANS] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_CURRENT_AC] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_OBSI] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_LEASE] nvarchar(4000) NULL,[TOT_CR_ESR_AMT_ABN_AMRO_LSE] nvarchar(4000) NULL,[TOT_CR_EXPOSURE_AMT_MORTGAGES] nvarchar(4000) NULL,[TOT_RECOVERY_AMT_EXPECTED] nvarchar(4000) NULL,[TOT_CR_COMMITTED] nvarchar(4000) NULL,[EXPECTED_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[PROPOSED_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[PROPOSED_WRITE_OFFS] nvarchar(4000) NULL,[OTHER_LOAN_LOSS_PROVISION_LBL] nvarchar(4000) NULL,[OTHER_LOAN_LOSS_PROVISION] nvarchar(4000) NULL,[OTHER_CR_COMMITTED] nvarchar(4000) NULL,[OTHER_CR_COMMITTED_LABEL] nvarchar(4000) NULL,[CLOSING_TOT_CR_LIMIT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_SEQ_NBR] nvarchar(4000) NULL,[APPROVAL_DAT] nvarchar(4000) NULL,[AR_DATA_LAST_UPDATE_DAT] nvarchar(4000) NULL,[AR_SECURITY_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[ASES_CMB_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[CR_PROFILE_DATA_LAST_UDT_DAT] nvarchar(4000) NULL,[CUST_DATA_LAST_UPDATE_DAT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_LCS_TP_ID] nvarchar(4000) NULL,[LOAN_LOSS_PROVISION_DATA_ST_ID] nvarchar(4000) NULL,[ENTRY_EXIT_DATA_ST_ID] nvarchar(4000) NULL,[CUST_DATA_ST_ID] nvarchar(4000) NULL,[CR_PROFILE_DATA_ST_ID] nvarchar(4000) NULL,[ASSESSMENT_CMB_DATA_ST_ID] nvarchar(4000) NULL,[AR_SECURITY_DATA_ST_ID] nvarchar(4000) NULL,[AR_DATA_ST_ID] nvarchar(4000) NULL,[DEBT_ASSESSMENT_TP_ID] nvarchar(4000) NULL,[DELIVERY_SYSTEM_ID] nvarchar(4000) NULL,[CR_AGREEMENT_ID] nvarchar(4000) NULL,[INTERNAL_FRR_RATING_VALUE_ID] nvarchar(4000) NULL,[CUST_DATA_REJECT_REASON] nvarchar(4000) NULL,[AR_DATA_REJECT_REASON] nvarchar(4000) NULL,[ASSESSMENT_CMB_DATA_RJCT_RSN] nvarchar(4000) NULL,[CR_PROFILE_DATA_REJECT_REASON] nvarchar(4000) NULL,[AR_SECURITY_DATA_REJECT_REASON] nvarchar(4000) NULL,[ENTRY_EXIT_DATA_REJECT_REASON] nvarchar(4000) NULL,[LOAN_LOSS_PRVN_DATA_RJCT_RSN] nvarchar(4000) NULL,[FIRST_CR_AGREEMENT_START_DAT] nvarchar(4000) NULL,[LATEST_CR_AGREEMENT_START_DAT] nvarchar(4000) NULL,[AR_TERMINATION_REQUEST_DAT] nvarchar(4000) NULL,[SCHEDULED_DIRECT_RECOVERY_COST] nvarchar(4000) NULL,[DIRECT_REC_COST_PRDC_ITRV_ID] nvarchar(4000) NULL,[DIRECT_RECOVERY_COSTS_STRT_DAT] nvarchar(4000) NULL,[DEBT_ASSESSMENT_REMARKS] nvarchar(4000) NULL,[DEBT_ASSESSMENT_LCS_TP_DAT] nvarchar(4000) NULL,[NORM_RECOVERY_AMT] nvarchar(4000) NULL,[RECOVERY_ADDED_VALUE] nvarchar(4000) NULL,[RECOVERY_ADDED_VALUE_DAT] nvarchar(4000) NULL,[VERSION_SDAT] nvarchar(4000) NULL,[VERSION_EDAT] nvarchar(4000) NULL,[INIT_POPULATION_TMS] nvarchar(4000) NULL,[LAST_POPULATION_TMS] nvarchar(4000) NULL,[BUSINESS_RULE_VERSION_NBR] nvarchar(4000) NULL,[STATUS_IND] nvarchar(4000) NULL)\n            WITH (LOCATION='/test/abnorc',\n                  DATA_SOURCE = [ImreDataSource],\n                  FILE_FORMAT = [ImreOrcFileFormat]\n                  ,REJECT_TYPE=value, REJECT_VALUE=0\n            );\n\nSELECT * FROM sys.fn_helpcollations()\nWHERE name LIKE 'SQL%';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity 03 - Columnar Month Partition')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Partition01]\n( \n\t[TransactionId] [uniqueidentifier]  NOT NULL,\n\t[CustomerId] [int]  NOT NULL,\n\t[ProductId] [smallint]  NOT NULL,\n\t[Quantity] [tinyint]  NOT NULL,\n\t[Price] [decimal](9,2)  NOT NULL,\n\t[TotalAmount] [decimal](9,2)  NOT NULL,\n\t[TransactionDateId] [int]  NOT NULL,\n\t[ProfitAmount] [decimal](9,2)  NOT NULL,\n\t[Hour] [tinyint]  NOT NULL,\n\t[Minute] [tinyint]  NOT NULL,\n\t[StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX,\n\tPARTITION\n\t(\n\t\t[TransactionDateId] RANGE RIGHT FOR VALUES (20190101, 20190201, 20190301, 20190401, 20190501, 20190601, 20190701, 20190801, 20190901, 20191001, 20191101, 20191201)\n\t)\n)\nGO\n\n\n-- columnstore table\n-- Distributed on customer ID, => all same customer IDs on same distribution \n-- Columnstore will take advantage of columnar compression, MIN / MAX values per ROW GROUP for quantity, count Distinct values\n-- Columstore will also allow to retrieve only columns impacted.\n-- Partitioned month;y. Partition size is SUBoptimal, because we have 20 million rows per partition (way less than the minimum 60 million)\n\nEXECUTE AS USER = 'asa.sql.highperf'\nGO\nSELECT CURRENT_USER;  \nGO  \n\nEXEC sp_addrolemember 'staticrc80', 'asa.sql.highperf'\nGO\n\nDROP Table [wwi_perf].[Sale_Result]\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Result]\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nAS\nSELECT \n    FS.CustomerID\n    ,MIN(FS.Quantity) as MinQuantity\n    ,MAX(FS.Quantity) as MaxQuantity\n    ,AVG(FS.Price) as AvgPrice\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\nFROM\n    wwi_perf.Sale_Partition01 FS\nGROUP BY\n    FS.CustomerId\nGO \n\n-- only one request step, no DMS, no shuffling\n-- DWU 2000 1st runtime 6 s, 2nd runtime 3 secs\n\nEXEC sp_droprolemember 'staticrc80', 'asa.sql.highperf'\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity 03 - Columnar No partiton')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Hash_Ordered]\n( \n\t[TransactionId] [uniqueidentifier]  NOT NULL,\n\t[CustomerId] [int]  NOT NULL,\n\t[ProductId] [smallint]  NOT NULL,\n\t[Quantity] [tinyint]  NOT NULL,\n\t[Price] [decimal](9,2)  NOT NULL,\n\t[TotalAmount] [decimal](9,2)  NOT NULL,\n\t[TransactionDateId] [int]  NOT NULL,\n\t[ProfitAmount] [decimal](9,2)  NOT NULL,\n\t[Hour] [tinyint]  NOT NULL,\n\t[Minute] [tinyint]  NOT NULL,\n\t[StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n-- columnstore table\n-- Distributed on customer ID, => all same customer IDs on same distribution \n-- Columnstore will take advantage of columnar compression, MIN / MAX values per ROW GROUP for quantity, count Distinct values\n-- Columstore will also allow to retrieve only columns impacted.\n\nEXECUTE AS USER = 'asa.sql.highperf'\nGO\nSELECT CURRENT_USER;  \nGO  \n\nEXEC sp_addrolemember 'staticrc80', 'asa.sql.highperf'\nGO\n\nDROP Table [wwi_perf].[Sale_Result]\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Result]\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nAS\nSELECT \n    FS.CustomerID\n    ,MIN(FS.Quantity) as MinQuantity\n    ,MAX(FS.Quantity) as MaxQuantity\n    ,AVG(FS.Price) as AvgPrice\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\nFROM\n    wwi_perf.Sale_Hash_ordered FS\nGROUP BY\n    FS.CustomerId\nGO \n\n-- only one request step, no DMS, no shuffling\n-- DWU 2000 1st runtime 5 s, 2nd runtime 3 secs\n\nEXEC sp_droprolemember 'staticrc80', 'asa.sql.highperf'\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity 03 - Columnar quarter partition')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Partition02]\n( \n\t[TransactionId] [uniqueidentifier]  NOT NULL,\n\t[CustomerId] [int]  NOT NULL,\n\t[ProductId] [smallint]  NOT NULL,\n\t[Quantity] [tinyint]  NOT NULL,\n\t[Price] [decimal](9,2)  NOT NULL,\n\t[TotalAmount] [decimal](9,2)  NOT NULL,\n\t[TransactionDateId] [int]  NOT NULL,\n\t[ProfitAmount] [decimal](9,2)  NOT NULL,\n\t[Hour] [tinyint]  NOT NULL,\n\t[Minute] [tinyint]  NOT NULL,\n\t[StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX,\n\tPARTITION\n\t(\n\t\t[TransactionDateId] RANGE RIGHT FOR VALUES (20190101, 20190401, 20190701, 20191001)\n\t)\n)\nGO\n\n-- columnstore table\n-- Distributed on customer ID, => all same customer IDs on same distribution \n-- Columnstore will take advantage of columnar compression, MIN / MAX values per ROW GROUP for quantity, count Distinct values\n-- Columstore will also allow to retrieve only columns impacted.\n-- Partitioned. Partition size is optimal, because we have 80 million rows per partition \n\n\nEXECUTE AS USER = 'asa.sql.highperf'\nGO\nSELECT CURRENT_USER;  \nGO  \n\nEXEC sp_addrolemember 'staticrc80', 'asa.sql.highperf'\nGO\n\nDROP Table [wwi_perf].[Sale_Result]\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Result]\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nAS\nSELECT \n    FS.CustomerID\n    ,MIN(FS.Quantity) as MinQuantity\n    ,MAX(FS.Quantity) as MaxQuantity\n    ,AVG(FS.Price) as AvgPrice\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\nFROM\n    wwi_perf.Sale_Partition02 FS\nGROUP BY\n    FS.CustomerId\nGO \n\n-- only one request step, no DMS, no shuffling\n-- DWU 2000 1st runtime 5 s, 2nd runtime 2 secs\n-- SWU 2000 1st runtime 7 s, 2nd runtime 4s\n\nEXEC sp_droprolemember 'staticrc80', 'asa.sql.highperf'\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity 03 - Data Warehouse Optimization')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nDROP Table [wwi_perf].[Sale_Result]\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Result]\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n) \nAS \nSELECT\n    FS.CustomerID\n    ,MIN(FS.Quantity) as MinQuantity\n    ,MAX(FS.Quantity) as MaxQuantity\n    ,AVG(FS.Price) as AvgPrice\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\nFROM\n    wwi_perf.Sale_Heap FS\nGROUP BY\n    FS.CustomerId\n\n\n-- DWU 2000 runtime is 29,26 seconds\n-- DWU 500 runtime is 56, 64 seconds\n-- redistribution / shuffling steps visible in request steps \n\n-- table has 330 million rows\nSELECT COUNT(*) FROM wwi_perf.Sale_Heap FS\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity 03-Distributed-no colum')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Index]\n( \n\t[TransactionId] [uniqueidentifier]  NOT NULL,\n\t[CustomerId] [int]  NOT NULL,\n\t[ProductId] [smallint]  NOT NULL,\n\t[Quantity] [tinyint]  NOT NULL,\n\t[Price] [decimal](9,2)  NOT NULL,\n\t[TotalAmount] [decimal](9,2)  NOT NULL,\n\t[TransactionDateId] [int]  NOT NULL,\n\t[ProfitAmount] [decimal](9,2)  NOT NULL,\n\t[Hour] [tinyint]  NOT NULL,\n\t[Minute] [tinyint]  NOT NULL,\n\t[StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED INDEX \n\t(\n\t\t[CustomerId] ASC\n\t)\n)\nGO\n\n\n-- Table will be distributed on CustomerID,\n--  this will eliminate shuffling, as all identical customerIDs are going to be on one distribution / node\n-- Clustered index will make sure customer table is sorted in ascending orded of CUstomerIDs\n-- IO will still be relatively big, as rows, no columnar compression, no selection of needed columns only\nEXECUTE AS USER = 'asa.sql.highperf'\nGO\nSELECT CURRENT_USER;  \nGO  \n\nEXEC sp_addrolemember 'staticrc80', 'asa.sql.highperf'\nGO\n\nDROP Table [wwi_perf].[Sale_Result]\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Result]\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nAS\nSELECT \n    FS.CustomerID\n    ,MIN(FS.Quantity) as MinQuantity\n    ,MAX(FS.Quantity) as MaxQuantity\n    ,AVG(FS.Price) as AvgPrice\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\nFROM\n    wwi_perf.Sale_Index FS\nGROUP BY\n    FS.CustomerId\nGO \n\nSELECt COUNT(*) FROM wwi_perf.Sale_Index\n\n-- only one request step, no DMS, no shuffling\n-- DWU 2000 1st runtime 11 s, 2nd runtime 9 secs\n-- DWU 500 1st runtime 39 s, 2nd runtime 28 secs\n\nEXEC sp_droprolemember 'staticrc80', 'asa.sql.highperf'\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/COPY Date issue')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n\nCOPY INTO wwi_staging.DIM_CVR_CMPT\nFROM 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/campaign-analytics/ZTSI_DM.GEN.DIM_CVR_CMPT_42_pre.csv'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIELDTERMINATOR=';',\n    ROWTERMINATOR='0X0A',\n    ENCODING = 'UTF8'\n)\nGO\n\nCOPY INTO wwi_staging.DIM_CVR_CMPT\n-- FROM 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/campaign-analytics/faulty_test.csv'\nFROM 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/campaign-analytics/faulty_date.csv'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIELDTERMINATOR=';',\n    ROWTERMINATOR='0X0A',\n    ENCODING = 'UTF8'\n    ,DATEFORMAT = 'DATEFORMAT = 'date_format''\n)\nGO\n\nSELECT CAST('1753-03-31' AS DATETIME)\n\nSELECT * FROM wwi_staging.DIM_CVR_CMPT\n\n\n/****** Object:  Table [ZTSI_DM_GEN].[DIM_CVR_CMPT]    Script Date: 15. 01. 2021 14:18:32 ******/\n/*SET ANSI_NULLS ON\nGO\n\n\nSET QUOTED_IDENTIFIER ON\nGO */\nDROP TABLE [wwi_staging].[DIM_CVR_CMPT];\n\nCREATE TABLE [wwi_staging].[DIM_CVR_CMPT]\n(\n    [CVR_CMPT_ID] [bigint] NULL,\n    [CVR_CMPT_AID] [bigint] NULL,\n    [IDV_AGRM_ID] [bigint] NULL,\n    [POLICY_AID] [bigint] NULL,\n    [TP_ID] [int] NULL,\n    [TP_NM] [nvarchar](100) NULL,\n    [TP_DSC] [nvarchar](512) NULL,\n    [BM_NM] [nvarchar](100) NULL,\n    [BM_DSC] [nvarchar](256) NULL,\n    [BM_CORR_FCTR] [decimal](10, 4) NULL,\n    [BNS_MALUS_ID] [bigint] NULL,\n    [INCEPTION_DT] [datetime] NULL,\n    [PLN_END_DT] [datetime] NULL,\n    [DDCB_TP] [nvarchar](200) NULL,\n    [RPR_BY] [nvarchar](200) NULL,\n    [ACTV] [int] NULL,\n    [ID_ITEM] [nvarchar](100) NULL,\n    [NM] [nvarchar](100) NULL,\n    [PRN_PLCY_NM] [nvarchar](100) NULL,\n    [ANNEX_NM] [nvarchar](100) NULL,\n    [INS_DT_FM] [datetime] NULL,\n    [INS_DT_TO] [datetime] NULL,\n    [KATP_ID] [int] NULL,\n    [KATP_NM] [nvarchar](100) NULL,\n    [KATP_GRP_NM] [nvarchar](100) NULL,\n    [ESR_AMT] [decimal](20, 4) NULL,\n    [ESR_AMT_RC] [decimal](20, 4) NULL,\n    [ESR_AMT_DC] [decimal](20, 4) NULL,\n    [ESR_CCY_ID] [bigint] NULL,\n    [ESR_CCY_NM] [nvarchar](100) NULL,\n    [FNC_SVCS_UNIT_AID] [bigint] NULL,\n    [FNC_SVCS_UNIT_TP_NM] [nvarchar](100) NULL,\n    [FNC_SVCS_UNIT_TP_DSC] [nvarchar](1024) NULL,\n    [FNC_SVCS_UNIT_DSC] [nvarchar](512) NULL,\n    [FNC_SVCS_UNIT_LEGACY_CODE1] [nvarchar](14) NULL,\n    [FNC_SVCS_UNIT_LEGACY_CODE2] [nvarchar](28) NULL,\n    [PRL_CGY_NM] [nvarchar](100) NULL,\n    [PRL_CGY_SHRT_DSC] [nvarchar](200) NULL,\n    [PRL_CGY_DSC] [nvarchar](512) NULL,\n    [FNC_SVCS_PD_NM] [nvarchar](400) NULL,\n    [FNC_SVCS_PD_DSC] [nvarchar](512) NULL,\n    [INS_CLSS_NM] [nvarchar](100) NULL,\n    [INS_CLSS_DSC] [nvarchar](512) NULL,\n    [DDCB_TP_NM] [nvarchar](100) NULL,\n    [DDCB_PCT_MN] [decimal](7, 4) NULL,\n    [DDCB_PCT_MX] [decimal](7, 4) NULL,\n    [DDCB_AMT_MN] [decimal](15, 2) NULL,\n    [DDCB_AMT_MX] [decimal](15, 2) NULL,\n    [ANNEX_AID] [bigint] NULL,\n    [OBJ_AID] [bigint] NULL,\n    [INS_CLSS_AID] [bigint] NULL,\n    [FNC_SVCS_PD_AID] [bigint] NULL,\n    [PRL_CGY_AID] [bigint] NULL,\n    [TMT_DT] [datetime] NULL,\n    [ST_ID] [bigint] NULL,\n    [ST_DSC] [nvarchar](1024) NULL,\n    [EFF_FM_DT] [datetime] NULL,\n    [EFF_TO_DT] [datetime] NULL,\n    [VLD_FM_DT] [datetime] NULL,\n    [VLD_TO_DT] [datetime] NULL,\n    [VLD_FLG] [tinyint] NULL,\n    [PPN_INFO_ID] [bigint] NULL,\n    [PPN_DATE] [datetime] NULL,\n    [PPN_INFO_ID_UPD] [bigint] NULL,\n    [PPN_DATE_UPD] [datetime] NULL,\n    [SRC_APL_ID] [int] NULL,\n    [SRC_APL_DSC] [nvarchar](200) NULL,\n    [SRC_TBL_ID] [bigint] NULL\n)\nWITH\n(\n   DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Challenge  - CustomerLoad')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [wwi_poc].[Customer_test]\n( \n\t[CustomerId] [int]  NOT NULL,\n\t[FirstName] [nvarchar](1000)  NOT NULL,\n\t[MiddleInitial] [nvarchar](10)  NULL,\n\t[LastName] [nvarchar](1000)  NOT NULL,\n\t[FullName] [nvarchar](2010)  NOT NULL,\n\t[Gender] [nvarchar](100)  NULL,\n\t[Age] [int]  NULL,\n\t[BirthDate] [date]  NULL,\n\t[Address_PostalCode] [nvarchar](200)  NULL,\n\t[Address_Street] [nvarchar](2000)  NULL,\n\t[Address_City] [nvarchar](2000)  NULL,\n\t[Address_Country] [nvarchar](2000)  NULL,\n\t[Mobile] [nvarchar](500)  NULL,\n\t[Email] [nvarchar](500)  NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Challenge - Customer Data Explore')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    top 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/data-generators/generator-customer.csv',\n        FORMAT = 'CSV',\n        FIRSTROW = 2,\n        PARSER_VERSION='2.0'\n    ) AS [result]\n\nSELECT MIN(c1), MAX(c1) FROM \n OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/data-generators/generator-customer.csv',\n        FORMAT = 'CSV',\n        FIRSTROW = 2,\n        PARSER_VERSION='2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Challenge - Intro')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- tables in wwi_poc schema\nSELECT count(*) from [wwi_poc].[Sale]\n\n\n-- 4 tables in the schema \nSELECT t1.name AS [Schema], t2.name AS [Table]\nFROM sys.schemas t1\nINNER JOIN sys.tables t2\nON t2.schema_id = t1.schema_id\nwhere t1.name = 'wwi_poc'\nORDER BY t1.name,t2.name\n\n-- explore sales data\nSELECT TOP 10 * from [wwi_poc].[Sale]\n\nSELECT min(TransactionDateId), max(TransactionDateId) from [wwi_poc].[Sale]\n\nCREATE TABLE  [wwi_poc].[Sale_bck]\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nAS SELECT * FROM [wwi_poc].[Sale]\n\n-- create stored procedure for loading the CSV Sale data\nCREATE PROC bulk_load_Sale_csv\nAS\nBEGIN\nCOPY INTO wwi_poc.Sale\n(TransactionId 1, CustomerId 2, ProductId 3, Quantity 4, Price 5, TotalAmount 6, TransactionDateId 7, ProfitAmount 8, Hour 9, Minute 10, StoreId 11)\nFROM 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-poc/*.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,ERRORFILE = 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/'\n\t,IDENTITY_INSERT = 'OFF'\n)\nEND\n\n-- create stored procedure for parquet files bulkload\nCREATE PROC bulk_load_Sale_parquet\nAS\nBEGIN\nCOPY INTO wwi_poc.Sale_test2\n(TransactionId 1, CustomerId 2, ProductId 3, Quantity 4, Price 5, TotalAmount 6, TransactionDateId 7, ProfitAmount 8, Hour 9, Minute 10, StoreId 11)\nFROM \t'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2017/Quarter=Q2/Month=6/*/*.parquet', \n\t\t'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2017/Quarter=Q3/*/*.parquet', \n\t\t'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2017/Quarter=Q4/*/*.parquet', \n\t\t'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2018/*/*.parquet',\n\t\t'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2018/*/*.parquet'\nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n\t,COMPRESSION = 'snappy'\n\t,IDENTITY_INSERT = 'OFF'\n)\nEND\n\n\n-- create a small sale table for testing teh stored procedures\nCREATE TABLE [wwi_poc].[Sale_test]\n( \n\t[TransactionId] [uniqueidentifier]  NOT NULL,\n\t[CustomerId] [int]  NOT NULL,\n\t[ProductId] [smallint]  NOT NULL,\n\t[Quantity] [tinyint]  NOT NULL,\n\t[Price] [decimal](9,2)  NOT NULL,\n\t[TotalAmount] [decimal](9,2)  NOT NULL,\n\t[TransactionDateId] [int]  NOT NULL,\n\t[ProfitAmount] [decimal](9,2)  NOT NULL,\n\t[Hour] [tinyint]  NOT NULL,\n\t[Minute] [tinyint]  NOT NULL,\n\t[StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nGO\n\nDROP TABLE  [wwi_poc].[Sale_test2]\n-- create a small sale table for testing the stored procedures\nCREATE TABLE [wwi_poc].[Sale_test2]\n( \n\t[TransactionId] [uniqueidentifier]  NOT NULL,\n\t[CustomerId] [int]  NOT NULL,\n\t[ProductId] [smallint]  NOT NULL,\n\t[Quantity] [tinyint]  NOT NULL,\n\t[Price] [decimal](9,2)  NOT NULL,\n\t[TotalAmount] [decimal](9,2)  NOT NULL,\n\t[TransactionDateId] [int]  NOT NULL,\n\t[ProfitAmount] [decimal](9,2)  NOT NULL,\n\t[Hour] [tinyint]  NOT NULL,\n\t[Minute] [tinyint]  NOT NULL,\n\t[StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nGO\n\n-- testing CSV stored procedure\nCOPY INTO wwi_poc.Sale_test\n(TransactionId 1, CustomerId 2, ProductId 3, Quantity 4, Price 5, TotalAmount 6, TransactionDateId 7, ProfitAmount 8, Hour 9, Minute 10, StoreId 11)\nFROM 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-poc/sale-20170501.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,ERRORFILE = 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/'\n    ,FIRSTROW = 2\n    ,ROWTERMINATOR='\\n'\n--\t,IDENTITY_INSERT = 'OFF'\n)\n\n-- testing Parquet stored procedure\nCOPY INTO wwi_poc.Sale_test2\n(TransactionId 1, CustomerId 2, ProductId 3, Quantity 4, Price 5, TotalAmount 6, TransactionDateId 7, ProfitAmount 8, Hour 9, Minute 10, StoreId 11)\nFROM \t'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2017/Quarter=Q2/Month=6/*/*.parquet' \nWITH\n(\n\tFILE_TYPE = 'PARQUET'\n\t,MAXERRORS = 0\n\t,COMPRESSION = 'snappy'\n\t,IDENTITY_INSERT = 'OFF'\n)\n\nTRUNCATE TABLE wwi_poc.Sale_test2\n\nSELECT count(*) FROM  wwi_poc.Sale_test(nolock)\n\nSELECT count(*) FROM  wwi_poc.Sale_test2(nolock)\n\nSELECT count(*) FROM  wwi_poc.Sale(nolock)\n\n--- at this point CSV data is loaded into table sales_test\n-- and parquet date is loaded into tavke sales_test2\nTRUNCATE TABLE wwi_poc.Sale\nGO\n-- lets consolidate all data in sale_heap\n-- start with CSV\nINSERT INTO [wwi_poc].[sale] \nSELECt * from [wwi_poc].[sale_test]\nGO\n-- And continue with parquet\nINSERT INTO [wwi_poc].[sale] \nSELECt * from [wwi_poc].[sale_test2]\nGO\n\n-- Finish with originally already loaded data \nINSERT INTO [wwi_poc].[sale] \nSELECt * from [wwi_poc].[sale_bck]\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlCompute"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Challenge Scratchpad')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT count(*) FROM  wwi_poc.Sale(nolock)\n\nSELECT top 10 * from [wwi_poc].[customer]\n\nSELECT MIN (CustomerID), MAX(CustomerID) from [wwi_poc].[customer]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataSkewQuery')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "with DataDistribution as (\nSELECT\ns.name as [Schema Name]\n,t.name as  [Table Name]\n,t.object_id as [ObjectID]\n,tp.[distribution_policy_desc] as  [Distribution Policy Name]\n,sum([row_count]) as  [Table Row Count]\n,max(row_count) as  [Max Distribution Row Count]\n,min(row_count) as  [Min Distribution Row Count]\n,avg(row_count) as  [Avg Distribution Row Count]\n,ncs.column_id as [ColumnID]\n,ncs.distribution_ordinal as [ColumnDist]\nfrom\n    sys.schemas s\nJOIN sys.tables t\n    ON s.[schema_id] = t.[schema_id]\nJOIN sys.pdw_table_distribution_properties tp\n    ON t.[object_id] = tp.[object_id]\nJOIN sys.pdw_table_mappings tm\n    ON t.[object_id] = tm.[object_id]\nJOIN sys.pdw_nodes_tables nt\n    ON tm.[physical_name] = nt.[name]\nJOIN sys.dm_pdw_nodes pn\n    ON  nt.[pdw_node_id] = pn.[pdw_node_id]\nJOIN sys.pdw_distributions di\n    ON  nt.[distribution_id] = di.[distribution_id]\nJOIN sys.dm_pdw_nodes_db_partition_stats nps\nON nt.[object_id] = nps.[object_id]\n    AND nt.[pdw_node_id] = nps.[pdw_node_id]\n    AND nt.[distribution_id] = nps.[distribution_id]\nJOIN sys.pdw_column_distribution_properties ncs\nON t.[object_id] = ncs.[object_id] \n-- AND  ncs.distribution_ordinal= 1 \nwhere tp.[distribution_policy_desc] ='HASH'\n-- AND t.name = @tbl\nGROUP BY\ns.name\n,t.name\n,t.object_id\n,ncs.column_id\n,ncs.distribution_ordinal\n,tp.[distribution_policy_desc]\n)\n\nSelect [Schema Name],\n                 d.[Table Name],\n                 d.[ObjectID],\n                 d.[Distribution Policy Name],\n                 d.[ColumnID],\n                 c.[name] as [ColumnName],\n                 d.[ColumnDist],\n                 d.[Table Row Count],\n                 d.[Max Distribution Row Count],\n                 d.[Min Distribution Row Count],\n                 d.[Avg Distribution Row Count],\n                 CASE WHEN [Table Row Count] = 0 then -1\n                 else abs(d.[Max Distribution Row Count] * 1.0 - d.[Min Distribution Row Count]*1.0) / d.[Max Distribution Row Count] * 100.0\n                 END  as [Table Skew Percent]\nFROM DataDistribution d\nJOIN sys.columns c\nON d.[ObjectId] = c.[object_id] \nAND d.[ColumnId] = c.[column_id]\nWHERE d.[ColumnDist] <> 0\n \n\n/* Select \n                 DISTINCT ([ColumnDist])\nFROM DataDistribution\n*/ \n\n/*\nSELECT TOP 100 \nFROM sys.pdw_column_distribution_properties\nwhere distribution_ordinal <> 0\n*/\n\nSELECT * FROM SYS.COLUMNS",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LAB 02 Serverless')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT TOP 100\n    JSON_VALUE(jsonContent, '$.userId') as userId\n    ,JSON_VALUE(jsonContent, '$.cartId') as cartId\n    ,JSON_QUERY(jsonContent, '$.preferredProducts') as preferredProducts\n    ,jsonContent\n  \n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/online-user-profiles-01/UserIdBucket=001/0000001.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n\n\nSELECT TOP 100  *\n \n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/online-user-profiles-01/UserIdBucket=001/0000001.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n    cross apply OPENJSON(jsonContent);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LAB 3 table fixes')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [wwi_perf].[Sale_Hash_Ordered]\n( \n\t[TransactionId] [uniqueidentifier]  NOT NULL,\n\t[CustomerId] [int]  NOT NULL,\n\t[ProductId] [smallint]  NOT NULL,\n\t[Quantity] [tinyint]  NOT NULL,\n\t[Price] [decimal](9,2)  NOT NULL,\n\t[TotalAmount] [decimal](9,2)  NOT NULL,\n\t[TransactionDateId] [int]  NOT NULL,\n\t[ProfitAmount] [decimal](9,2)  NOT NULL,\n\t[Hour] [tinyint]  NOT NULL,\n\t[Minute] [tinyint]  NOT NULL,\n\t[StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO\n\ndrop table [wwi_perf].[Sale_Hash_Ordered]\n\nCREATE TABLE [wwi_perf].[Sale_Hash]\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX \n)\nAS\nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Heap]\nOPTION  (LABEL  = 'CTAS : Sale_Hash', MAXDOP 1)\n\nCREATE TABLE [wwi_perf].[Sale_Hash_Ordered]\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX ORDER( [CustomerId] )\n)\nAS\nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Heap]\nOPTION  (LABEL  = 'CTAS : Sale_Hash', MAXDOP 1)\n-- MAXDOP = Max degree of parallelism\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 02 - Exercise 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [wwi].[CampaignAnalytics]\n(\n    [Region] [nvarchar](50)  NOT NULL,\n    [Country] [nvarchar](30)  NOT NULL,\n    [ProductCategory] [nvarchar](50)  NOT NULL,\n    [CampaignName] [nvarchar](500)  NOT NULL,\n    [Revenue] [decimal](10,2)  NULL,\n    [RevenueTarget] [decimal](10,2)  NULL,\n    [City] [nvarchar](50)  NULL,\n    [State] [nvarchar](25)  NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [Region] ),\n    CLUSTERED COLUMNSTORE INDEX\n)\n\nCREATE TABLE [wwi].[Sale]\n(\n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX,\n    PARTITION\n    (\n        [TransactionDaten    )\n)\n\nCREATE TABLE [wwi].[UserProductReviews]\n(\n    [UserId] [int]  NOT NULL,\n    [ProductId] [int]  NOT NULL,\n    [ReviewText] [nvarchar](1000)  NOT NULL,\n    [ReviewDate] [datetime]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [ProductId] ),\n    CLUSTERED COLUMNSTORE INDEX\n)\n\nCREATE TABLE [wwi].[UserTopProductPurchases]\n(\n    [UserId] [int]  NOT NULL,\n    [ProductId] [int]  NOT NULL,\n    [ItemsPurchasedLast12Months] [int]  NULL,\n    [IsTopProduct] [bit]  NOT NULL,\n    [IsPreferredProduct] [bit]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [UserId] ),\n    CLUSTERED COLUMNSTORE INDEX\n)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 02 - Exercise 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"metadata": {
						"language": "sql"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 02 Serverless Json 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT TOP 100\n    jsonContent\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/online-user-profiles-01/0001.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n\n    SELECT count(*)\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/online-user-profiles-01/*/*.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "master",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 03 - Performance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT  \n    COUNT_BIG(*)\nFROM\n    [wwi_perf].[Sale_Heap]\n-- DWU500 runtime, 22 secs\n\n\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_perf].[Sale_Heap] S\n    GROUP BY\n        S.CustomerId\n) T\nOPTION (LABEL = 'Lab03: Heap')\n-- DWU500 runtime 27 secs\n-- Table is a heap table, with round robin ditribution \n\n-- lets look at execution details\n-- label comes in handy\nSELECT  *\nFROM    sys.dm_pdw_exec_requests\nWHERE   [label] = 'Lab03: Heap';\n\n-- looking at steps \nSELECT  *\nFROM    sys.dm_pdw_request_steps\nWHERE   request_id = 'QID488638';\n\n-- looking at more details\nSELECT  *\nFROM    sys.dm_pdw_sql_requests\nWHERE   request_id = 'QID488638'\nAND step_index = 2\nORDER BY total_elapsed_time DESC;\n\n-- looking at more details\nSELECT  Command\nFROM    sys.dm_pdw_sql_requests\nWHERE   request_id = 'QID488638'\nAND step_index = 2\nORDER BY total_elapsed_time DESC;\n\n-- looking at the amount of datamovement across distributions \nSELECT\n    *\nFROM\n    sys.dm_pdw_dms_workers\nWHERE\n    request_id = 'QID488638'\n    AND step_index = 2\nORDER BY\n    distribution_id\n\n\nEXPLAIN WITH_RECOMMENDATIONS\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_perf].[Sale_Heap] S\n    GROUP BY\n        S.CustomerId\n) T;\n\n\nEXPLAIN WITH_RECOMMENDATIONS\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_perf].[Sale_Index] S\n    GROUP BY\n        S.CustomerId\n) T\n\n\nSELECT\n    AVG(TotalProfit) as AvgMonthlyCustomerProfit\nFROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n        ,SUM(S.TotalAmount) as TotalAmount\n        ,AVG(S.TotalAmount) as AvgAmount\n        ,SUM(S.ProfitAmount) as TotalProfit\n        ,AVG(S.ProfitAmount) as AvgProfit\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            D.DateId = S.TransactionDateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n) T\n\nSELECT\n    AVG(TotalProfit) as AvgMonthlyCustomerProfit, AVG(TotalAmount) as AvgMonthlyCustomerAmount\nFROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n        ,SUM(S.TotalAmount) as TotalAmount\n        ,AVG(S.TotalAmount) as AvgAmount\n        ,SUM(S.ProfitAmount) as TotalProfit\n        ,AVG(S.ProfitAmount) as AvgProfit\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            D.DateId = S.TransactionDateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n) T\n\n\n---- Approx count distinct \nSELECT COUNT( DISTINCT CustomerId) from wwi_perf.Sale_Heap\n\nSELECT APPROX_COUNT_DISTINCT(CustomerId) from wwi_perf.Sale_Heap\n\n-- Materialized views \n----------------------\n\n-- Query 1 3 secs\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Quarter\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            S.TransactionDateId = D.DateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Quarter\n) T\n\n--Query2 2 secs\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n        ,SUM(S.ProfitAmount) as TotalProfit\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            S.TransactionDateId = D.DateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n) T\n\n--- creae materialized view to support above queries  --13 secods\nCREATE MATERIALIZED VIEW\n    wwi_perf.mvCustomerSales\nWITH\n(\n    DISTRIBUTION = HASH( CustomerId )\n)\nAS\nSELECT\n    S.CustomerId\n    ,D.Year\n    ,D.Quarter\n    ,D.Month\n    ,SUM(S.TotalAmount) as TotalAmount\n    ,SUM(S.ProfitAmount) as TotalProfit\nFROM\n    [wwi_perf].[Sale_Partition02] S\n    join [wwi].[Date] D on\n        S.TransactionDateId = D.DateId\nGROUP BY\n    S.CustomerId\n    ,D.Year\n    ,D.Quarter\n    ,D.Month\n\n\n-- Query 1 with materialized view 1 secs\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Quarter\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            S.TransactionDateId = D.DateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Quarter\n) T\n\n--Query2 with materialized view 1 secs\nEXPLAIN\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n        ,SUM(S.ProfitAmount) as TotalProfit\n    FROM\n        [wwi_perf].[Sale_Partition02] S\n        join [wwi].[Date] D on\n            S.TransactionDateId = D.DateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n) T\n\n--- check materialized view overhead \nDBCC PDW_SHOWMATERIALIZEDVIEWOVERHEAD ( 'wwi_perf.mvCustomerSales' )\n-- base view and materialized view are aligned\n\n-- do an update and check alignment again\nUPDATE\n    [wwi_perf].[Sale_Partition02]\nSET\n    TotalAmount = TotalAmount * 1.01\n    ,ProfitAmount = ProfitAmount * 1.01\nWHERE\n    CustomerId BETWEEN 100 and 200\n\n-- RE check materialized view overhead\nDBCC PDW_SHOWMATERIALIZEDVIEWOVERHEAD ( 'wwi_perf.mvCustomerSales' )\n-- materialized view stores a delta => total rows bigger than base table rows\n\n-- rebuild materialized view \nALTER MATERIALIZED VIEW [wwi_perf].[mvCustomerSales] REBUILD;\n\nDBCC PDW_SHOWMATERIALIZEDVIEWOVERHEAD ( 'wwi_perf.mvCustomerSales' )\n\n-- result set caching \nSELECT\n    name\n    ,is_result_set_caching_on\nFROM\n    sys.databases\n\n-- execute this in master database in SSMS\nALTER DATABASE [SQLPool01] SET RESULT_SET_CACHING ON;\n\n-- test query \nSELECT\n    D.Year\n    ,D.Quarter\n    ,D.Month\n    ,SUM(S.TotalAmount) as TotalAmount\n    ,SUM(S.ProfitAmount) as TotalProfit\nFROM\n    [wwi_perf].[Sale_Partition02] S\n    join [wwi].[Date] D on\n        S.TransactionDateId = D.DateId\nGROUP BY\n    D.Year\n    ,D.Quarter\n    ,D.Month\nOPTION (LABEL = 'Lab03: Result set caching')\n\n-- did the query hit the cache  ? \nSELECT\n    result_cache_hit\nFROM\n    sys.dm_pdw_exec_requests\nWHERE\n    request_id =\n    (\n        SELECT TOP 1\n            request_id\n        FROM\n            sys.dm_pdw_exec_requests\n        WHERE\n            [label] = 'Lab03: Result set caching'\n        ORDER BY\n            start_time desc\n    )\n    -- no it didnt hit the cache\n\n-- test query AGAIN\nSELECT\n    D.Year\n    ,D.Quarter\n    ,D.Month\n    ,SUM(S.TotalAmount) as TotalAmount\n    ,SUM(S.ProfitAmount) as TotalProfit\nFROM\n    [wwi_perf].[Sale_Partition02] S\n    join [wwi].[Date] D on\n        S.TransactionDateId = D.DateId\nGROUP BY\n    D.Year\n    ,D.Quarter\n    ,D.Month\nOPTION (LABEL = 'Lab03: Result set caching')\n\n--- did it hit the cache ?\n-- did the query hit the cache  ? \nSELECT\n    result_cache_hit\nFROM\n    sys.dm_pdw_exec_requests\nWHERE\n    request_id =\n    (\n        SELECT TOP 1\n            request_id\n        FROM\n            sys.dm_pdw_exec_requests\n        WHERE\n            [label] = 'Lab03: Result set caching'\n        ORDER BY\n            start_time desc\n    )\n-- YES IT DID \n\n-- checck if building the result set cache\nSELECT\n    step_index\n    ,operation_type\n    ,location_type\n    ,status\n    ,total_elapsed_time\n    ,command\nFROM\n    sys.dm_pdw_request_steps\nWHERE\n    request_id =\n    (\n        SELECT TOP 1\n            request_id\n        FROM\n            sys.dm_pdw_exec_requests\n        WHERE\n            [label] = 'Lab03: Result set caching'\n        ORDER BY\n            start_time desc\n    )\n\n\n-- statiscis on customerID exist ? \nDBCC SHOW_STATISTICS ('wwi_perf.Sale_Index', CustomerId) WITH HISTOGRAM\n\n-- create them\nCREATE STATISTICS Sale_Hash_CustomerId ON wwi_perf.Sale_Index (CustomerId)\n\n-- check again\nDBCC SHOW_STATISTICS ([wwi_perf.Sale_Index], 'Sale_Hash_CustomerId') WITH HISTOGRAM\n\n--- INDEXES \n\n-- retrieve single customer info from CI \nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Index]\nWHERE\n    CustomerId = 500000\n\n-- with CCI \nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Partition02]\nWHERE\n    CustomerId = 500000\n--- Lightning FAST\n-- thanks also to clustered index, physically ordered on the disk as expected\n\n-- multiple customers  CI\nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Index]\nWHERE\n    CustomerId between 400000 and 400100\n\n-- multiple customers CCI\nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Partition02]\nWHERE\n    CustomerId between 400000 and 400100\n\n\n-- non clustered index \n\n-- no index first - 5 secs - \nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Index]\nWHERE\n    CustomerId between 400000 and 400100\n    and StoreId between 2000 and 4000\n\n-- create an index on storeID - 110 secs creation duration - \nCREATE INDEX Store_Index on wwi_perf.Sale_Index (StoreId)\n\n-- repeat with index created - 2 secs\nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Index]\nWHERE\n    CustomerId between 400000 and 400100\n    and StoreId between 2000 and 4000\n\n\n\n\n---- ORDERED clustered column store indexes\n\n---  segments overlap in sale_hash  table\nselect\n    OBJ.name as table_name\n    ,COL.name as column_name\n    ,NT.distribution_id\n    ,NP.partition_id\n    ,NP.rows as partition_rows\n    ,NP.data_compression_desc\n    ,NCSS.segment_id\n    ,NCSS.version\n    ,NCSS.min_data_id\n    ,NCSS.max_data_id\n    ,NCSS.row_count\nfrom\n    sys.objects OBJ\n    JOIN sys.columns as COL ON\n        OBJ.object_id = COL.object_id\n    JOIN sys.pdw_table_mappings TM ON\n        OBJ.object_id = TM.object_id\n    JOIN sys.pdw_nodes_tables as NT on\n        TM.physical_name = NT.name\n    JOIN sys.pdw_nodes_partitions NP on\n        NT.object_id = NP.object_id\n        and NT.pdw_node_id = NP.pdw_node_id\n        and substring(TM.physical_name, 40, 10) = NP.distribution_id\n    JOIN sys.pdw_nodes_column_store_segments NCSS on\n        NP.partition_id = NCSS.partition_id\n        and NP.distribution_id = NCSS.distribution_id\n        and COL.column_id = NCSS.column_id\nwhere\n    OBJ.name = 'Sale_Hash'\n    and COL.name = 'CustomerId'\n    and TM.physical_name  not like '%HdTable%'\norder by\n    NT.distribution_id\n-- lots of overlaps \n\n---  segments overlap in sale_hash_ordered table\nselect\n    OBJ.name as table_name\n    ,COL.name as column_name\n    ,NT.distribution_id\n    ,NP.partition_id\n    ,NP.rows as partition_rows\n    ,NP.data_compression_desc\n    ,NCSS.segment_id\n    ,NCSS.version\n    ,NCSS.min_data_id\n    ,NCSS.max_data_id\n    ,NCSS.row_count\nfrom\n    sys.objects OBJ\n    JOIN sys.columns as COL ON\n        OBJ.object_id = COL.object_id\n    JOIN sys.pdw_table_mappings TM ON\n        OBJ.object_id = TM.object_id\n    JOIN sys.pdw_nodes_tables as NT on\n        TM.physical_name = NT.name\n    JOIN sys.pdw_nodes_partitions NP on\n        NT.object_id = NP.object_id\n        and NT.pdw_node_id = NP.pdw_node_id\n        and substring(TM.physical_name, 40, 10) = NP.distribution_id\n    JOIN sys.pdw_nodes_column_store_segments NCSS on\n        NP.partition_id = NCSS.partition_id\n        and NP.distribution_id = NCSS.distribution_id\n        and COL.column_id = NCSS.column_id\nwhere\n    OBJ.name = 'Sale_Hash_Ordered'\n    and COL.name = 'CustomerId'\n    and TM.physical_name  not like '%HdTable%'\norder by\n    NT.distribution_id\n-- lots of overlaps \n\n\ncreate view [wwi_perf].[vColumnStoreRowGroupStats]\nas\nwith cte\nas\n(\nselect   tb.[name]                    AS [logical_table_name]\n,        rg.[row_group_id]            AS [row_group_id]\n,        rg.[state]                   AS [state]\n,        rg.[state_desc]              AS [state_desc]\n,        rg.[total_rows]              AS [total_rows]\n,        rg.[trim_reason_desc]        AS trim_reason_desc\n,        mp.[physical_name]           AS physical_name\nFROM    sys.[schemas] sm\nJOIN    sys.[tables] tb               ON  sm.[schema_id]          = tb.[schema_id]\nJOIN    sys.[pdw_table_mappings] mp   ON  tb.[object_id]          = mp.[object_id]\nJOIN    sys.[pdw_nodes_tables] nt     ON  nt.[name]               = mp.[physical_name]\nJOIN    sys.[dm_pdw_nodes_db_column_store_row_group_physical_stats] rg      ON  rg.[object_id]     = nt.[object_id]\n                                                                            AND rg.[pdw_node_id]   = nt.[pdw_node_id]\n                                        AND rg.[distribution_id]    = nt.[distribution_id]\n)\nselect *\nfrom cte;\n\n-- impact of worng choices for data column types\n\n-- optimal column types\n\n\nCREATE TABLE [wwi_perf].[Sale_Hash_Projection]\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tHEAP\n)\nAS\nSELECT\n\t[CustomerId]\n\t,[ProductId]\n\t,[Quantity]\nFROM\n\t[wwi_perf].[Sale_Heap];\n\nCREATE TABLE [wwi_perf].[Sale_Hash_Projection2]\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nAS\nSELECT\n\t[CustomerId]\n\t,[ProductId]\n\t,[Quantity]\nFROM\n\t[wwi_perf].[Sale_Heap];\n\n\nCREATE TABLE [wwi_perf].[Sale_Hash_Projection_Big]\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tHEAP\n)\nAS\nSELECT\n\t[CustomerId]\n\t,CAST([ProductId] as bigint) as [ProductId]\n\t,CAST([Quantity] as bigint) as [Quantity]\nFROM\n\t[wwi_perf].[Sale_Heap];\n\nCREATE TABLE [wwi_perf].[Sale_Hash_Projection_Big2]\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nAS\nSELECT\n\t[CustomerId]\n\t,CAST([ProductId] as bigint) as [ProductId]\n\t,CAST([Quantity] as bigint) as [Quantity]\nFROM\n\t[wwi_perf].[Sale_Heap];\n\n\n\n-- checking table sizes\n\nSELECT\n    database_name\n,    schema_name\n,    table_name\n,    distribution_policy_name\n,      distribution_column\n,    index_type_desc\n,    COUNT(distinct partition_nmbr) as nbr_partitions\n,    SUM(row_count)                 as table_row_count\n,    SUM(reserved_space_GB)         as table_reserved_space_GB\n,    SUM(data_space_GB)             as table_data_space_GB\n,    SUM(index_space_GB)            as table_index_space_GB\n,    SUM(unused_space_GB)           as table_unused_space_GB\nFROM\n    [wwi_perf].[vTableSizes]\nWHERE\n    schema_name = 'wwi_perf'\n    and table_name in ('Sale_Hash_Projection', 'Sale_Hash_Projection2',\n        'Sale_Hash_Projection_Big', 'Sale_Hash_Projection_Big2')\nGROUP BY\n    database_name\n,    schema_name\n,    table_name\n,    distribution_policy_name\n,      distribution_column\n,    index_type_desc\nORDER BY\n    table_reserved_space_GB desc\n\n\n-- materialized views impact \n\nSELECT\n    T.TransactionItemsCountBucket\n    ,count(*) as CustomersCount\nFROM\n    (\n        SELECT\n            CustomerId,\n            (count(*) - 16) / 100 as TransactionItemsCountBucket\n        FROM\n            [wwi_perf].[Sale_Hash]\n        GROUP BY\n            CustomerId\n    ) T\nGROUP BY\n    T.TransactionItemsCountBucket\nORDER BY\n    T.TransactionItemsCountBucket\n\n--- improve distribution, lok at the min count(*) instead of hardcoded 16 \nSELECT\n    T.TransactionItemsCountBucket\n    ,count(*) as CustomersCount\nFROM\n    (\n        SELECT\n            CustomerId,\n            (\n                COUNT(*) -\n                (\n                    SELECT\n                        MIN(TransactionItemsCount)\n                    FROM\n                    (\n                        SELECT\n                            COUNT(*) as TransactionItemsCount\n                        FROM\n                            [wwi_perf].[Sale_Hash]\n                        GROUP BY\n                            CustomerId\n                    ) X\n                )\n            ) / 100 as TransactionItemsCountBucket\n        FROM\n            [wwi_perf].[Sale_Hash]\n        GROUP BY\n            CustomerId\n    ) T\nGROUP BY\n    T.TransactionItemsCountBucket\nORDER BY\n    T.TransactionItemsCountBucket\n\n\n-- explain with recommendations \nEXPLAIN WITH_RECOMMENDATIONS\nSELECT\n    T.TransactionItemsCountBucket\n    ,count(*) as CustomersCount\nFROM\n    (\n        SELECT\n            CustomerId,\n            (\n                COUNT(*) - \n                (\n                    SELECT \n                        MIN(TransactionItemsCount)\n                    FROM \n                    (\n                        SELECT \n                            COUNT(*) as TransactionItemsCount\n                        FROM \n                            [wwi_perf].[Sale_Hash] \n                        GROUP BY \n                            CustomerId \n                    ) X \n                )\n            ) / 100 as TransactionItemsCountBucket\n        FROM\n            [wwi_perf].[Sale_Hash]\n        GROUP BY\n            CustomerId\n    ) T\nGROUP BY\n    T.TransactionItemsCountBucket\nORDER BY\n    T.TransactionItemsCountBucket\n\n\n-- create recommended materialized view\nCREATE MATERIALIZED VIEW\n    mvTransactionItemsCounts\nWITH\n(\n    DISTRIBUTION = HASH([CustomerId])\n)\nAS\nSELECT\n    CustomerId\n    ,COUNT(*) AS ItemsCount\nFROM\n    [wwi_perf].[Sale_Hash]\nGROUP BY\n    CustomerId\n\n-- delete optimization \nCREATE TABLE [wwi_perf].[Sale_Hash_v2]\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n)\nAS\nSELECT\n    *\nFROM\n    [wwi_perf].[Sale_Hash]\nWHERE\n    CustomerId >= 900000\n--- with minimal logging this is 34 seconds\n\n-- suboptimal, delete with FULL logging\nDELETE\n    [wwi_perf].[Sale_Hash]\nWHERE\n    CustomerId < 900000\n\n-- avoid extensive logging",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 05 - Exercise 3 - Column Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    /*  Column-level security feature in Azure Synapse simplifies the design and coding of security in application.\n        It ensures column level security by restricting column access to protect sensitive data. */\n\n    /* Scenario: In this scenario we will be working with two users. The first one is the CEO, he has access to all\n        data. The second one is DataAnalystMiami, this user doesn't have access to the confidential Revenue column\n        in the Sales table. Follow this lab, one step at a time to see how Column-level security removes access to the\n        Revenue column to DataAnalystMiami */\n\n    --Step 1: Let us see how this feature in Azure Synapse works. Before that let us have a look at the Campaign table.\n    select  Top 100 * from wwi_Security.Sale\n    where City is not null and state is not null\n\n    /*  Consider a scenario where there are two users.\n        A CEO, who is an authorized  personnel with access to all the information in the database\n        and a Data Analyst, to whom only required information should be presented.*/\n\n    -- Step:2 Verify the existence of the 'CEO' and 'DataAnalystMiami' users in the Datawarehouse.\n    SELECT Name as [User1] FROM sys.sysusers WHERE name = N'CEO';\n    SELECT Name as [User2] FROM sys.sysusers WHERE name = N'DataAnalystMiami';\n\n\n    -- Step:3 Now let us enforce column level security for the DataAnalystMiami.\n    /*  The Sales table in the warehouse has information like ProductID, Analyst, Product, CampaignName, Quantity, Region, State, City, RevenueTarget and Revenue.\n        The Revenue generated from every campaign is classified and should be hidden from DataAnalystMiami.\n    */\n\n    REVOKE SELECT ON wwi_security.Sale FROM DataAnalystMiami;\n    GRANT SELECT ON wwi_security.Sale([ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget]) TO DataAnalystMiami;\n    -- This provides DataAnalystMiami access to all the columns of the Sale table but Revenue.\n\n    -- Step:4 Then, to check if the security has been enforced, we execute the following query with current User As 'DataAnalystMiami', this will result in an error\n    --  since DataAnalystMiami doesn't have select access to the Revenue column\n    EXECUTE AS USER ='DataAnalystMiami';\n    select TOP 100 * from wwi_security.Sale;\n    ---\n    -- The following query will succeed since we are not including the Revenue column in the query.\n    EXECUTE AS USER ='DataAnalystMiami';\n    select [ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget] from wwi_security.Sale;\n    \n    -- Step:5 Whereas, the CEO of the company should be authorized with all the information present in the warehouse.To do so, we execute the following query.\n    Revert;\n    GRANT SELECT ON wwi_security.Sale TO CEO;  --Full access to all columns.\n    GRANT SELECT ON wwi_security.Sale TO DataAnalystMiami;  --Full access to all columns.\n\n    -- Step:6 Let us check if our CEO user can see all the information that is present. Assign Current User As 'CEO' and the execute the query\n    EXECUTE AS USER ='CEO'\n    select * from wwi_security.Sale\n    Revert;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 05 - Exercise 3 - Dynamic Data Masking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    -------------------------------------------------------------------------Dynamic Data Masking (DDM)----------------------------------------------------------------------------------------------------------\n    /*  Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers\n        to designate how much of the sensitive data to reveal with minimal impact on the application layer.\n        Let see how */\n\n    /* Scenario: WWI has identified sensitive information in the CustomerInfo table. They would like us to \n        obfuscate the CreditCard and Email columns of the CustomerInfo table to DataAnalysts */\n\n    -- Step:1 Let us first get a view of CustomerInfo table.\n    SELECT TOP (100) * FROM wwi_security.CustomerInfo;\n\n    -- Step:2 Let's confirm that there are no Dynamic Data Masking (DDM) applied on columns.\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \n    FROM sys.masked_columns AS c  \n    JOIN sys.tables AS tbl\n        ON c.[object_id] = tbl.[object_id]  \n    WHERE is_masked = 1\n        AND tbl.name = 'CustomerInfo';\n    -- No results returned verify that no data masking has been done yet.\n\n    -- Step:3 Now lets mask 'CreditCard' and 'Email' Column of 'CustomerInfo' table.\n    ALTER TABLE wwi_security.CustomerInfo  \n    ALTER COLUMN [CreditCard] ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\n    GO\n    ALTER TABLE wwi_security.CustomerInfo\n    ALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\n    GO\n    -- The columns are sucessfully masked.\n\n    -- Step:4 Let's see Dynamic Data Masking (DDM) applied on the two columns.\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \n    FROM sys.masked_columns AS c  \n    JOIN sys.tables AS tbl\n        ON c.[object_id] = tbl.[object_id]  \n    WHERE is_masked = 1\n        AND tbl.name ='CustomerInfo';\n\n    -- Step:5 Now, let us grant SELECT permission to 'DataAnalystMiami' on the 'CustomerInfo' table.\n   GRANT SELECT ON wwi_security.CustomerInfo TO DataAnalystMiami;  \n\n    -- Step:6 Logged in as  'DataAnalystMiami' let us execute the select query and view the result.\n    EXECUTE AS USER = 'DataAnalystMiami';  \n    SELECT * FROM wwi_security.CustomerInfo;\n\n    -- Step:7 Let us remove the data masking using UNMASK permission\n    GRANT UNMASK TO DataAnalystMiami;\n    EXECUTE AS USER = 'DataAnalystMiami';  \n    SELECT *\n    FROM wwi_security.CustomerInfo;\n    revert;\n    REVOKE UNMASK TO DataAnalystMiami;  \n\n    ----step:8 Reverting all the changes back to as it was.\n    ALTER TABLE wwi_security.CustomerInfo\n    ALTER COLUMN CreditCard DROP MASKED;\n    GO\n    ALTER TABLE wwi_security.CustomerInfo\n    ALTER COLUMN Email DROP MASKED;\n    GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 05 - Exercise 3 - Row Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*\tRow level Security (RLS) in Azure Synapse enables us to use group membership to control access to rows in a table.\n\tAzure Synapse applies the access restriction every time the data access is attempted from any user. \n\tLet see how we can implement row level security in Azure Synapse.*/\n\n----------------------------------Row-Level Security (RLS), 1: Filter predicates------------------------------------------------------------------\n-- Step:1 The Sale table has two Analyst values: DataAnalystMiami and DataAnalystSanDiego. \n--     Each analyst has jurisdiction across a specific Region. DataAnalystMiami on the South East Region\n--      and DataAnalystSanDiego on the Far West region.\nSELECT DISTINCT Analyst, Region FROM wwi_security.Sale order by Analyst ;\n\n/* Scenario: WWI requires that an Analyst only see the data for their own data from their own region. The CEO should see ALL data.\n    In the Sale table, there is an Analyst column that we can use to filter data to a specific Analyst value. */\n\n/* We will define this filter using what is called a Security Predicate. This is an inline table-valued function that allows\n    us to evaluate additional logic, in this case determining if the Analyst executing the query is the same as the Analyst\n    specified in the Analyst column in the row. The function returns 1 (will return the row) when a row in the Analyst column is the same as the \n    user executing the query (@Analyst = USER_NAME()) or if the user executing the query is the CEO user (USER_NAME() = 'CEO')\n    whom has access to all data.\n*/\n\n-- Review any existing security predicates in the database\nSELECT * FROM sys.security_predicates\n\n--Step:2 Create a new Schema to hold the security predicate, then define the predicate function. It returns 1 (or True) when\n--  a row should be returned in the parent query.\nGO\n\nCREATE FUNCTION wwi_security.fn_securitypredicate(@Analyst AS sysname)  \n    RETURNS TABLE  \nWITH SCHEMABINDING  \nAS  \n    RETURN SELECT 1 AS fn_securitypredicate_result\n    WHERE @Analyst = USER_NAME() OR USER_NAME() = 'CEO'\nGO\n-- Now we define security policy that adds the filter predicate to the Sale table. This will filter rows based on their login name.\nCREATE SECURITY POLICY SalesFilter  \nADD FILTER PREDICATE wwi_security.fn_securitypredicate(Analyst)\nON wwi_security.Sale\nWITH (STATE = ON);\n\n------ Allow SELECT permissions to the Sale Table.------\nGRANT SELECT ON wwi_security.Sale TO CEO, DataAnalystMiami, DataAnalystSanDiego;\n\n-- Step:3 Let us now test the filtering predicate, by selecting data from the Sale table as 'DataAnalystMiami' user.\nEXECUTE AS USER = 'DataAnalystMiami' \nSELECT * FROM wwi_security.Sale;\nrevert;\n-- As we can see, the query has returned rows here Login name is DataAnalystMiami\n\n-- Step:4 Let us test the same for  'DataAnalystSanDiego' user.\nEXECUTE AS USER = 'DataAnalystSanDiego';\nSELECT * FROM wwi_security.Sale;\nrevert;\n-- RLS is working indeed.\n\n-- Step:5 The CEO should be able to see all rows in the table.\nEXECUTE AS USER = 'CEO';  \nSELECT * FROM wwi_security.Sale;\nrevert;\n-- And he can.\n\n--Step:6 To disable the security policy we just created above, we execute the following.\nALTER SECURITY POLICY SalesFilter  \nWITH (STATE = OFF);\n\nDROP SECURITY POLICY SalesFilter;\nDROP FUNCTION wwi_security.fn_securitypredicate;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 1  - Loading step')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [wwi_staging].[Sale_Heap]\n( \n\t[TransactionId] [uniqueidentifier]  NOT NULL,\n\t[CustomerId] [int]  NOT NULL,\n\t[ProductId] [smallint]  NOT NULL,\n\t[Quantity] [tinyint]  NOT NULL,\n\t[Price] [decimal](9,2)  NOT NULL,\n\t[TotalAmount] [decimal](9,2)  NOT NULL,\n\t[TransactionDateId] [int]  NOT NULL,\n\t[ProfitAmount] [decimal](9,2)  NOT NULL,\n\t[Hour] [tinyint]  NOT NULL,\n\t[Minute] [tinyint]  NOT NULL,\n\t[StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nGO\n\nCREATE TABLE [wwi_staging].[Sale]\n(\n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDate] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX,\n    PARTITION\n    (\n        [TransactionDaten    )\n)\n\n\n---- POLY BASE LOAD\n--------------------\n-- prerequsite for polybase Data source\nCREATE EXTERNAL DATA SOURCE ABSSimre\nWITH\n( TYPE = HADOOP,\n    LOCATION = 'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net'\n);\n\n-- prerequisite for polybase - file format \nCREATE EXTERNAL FILE FORMAT [ParquetFormatImre]\nWITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\nGO\n\n-- create a new schema for external tables\nCREATE SCHEMA [wwi_external];\nGO\n\n-- needs following \n-- location \n-- previously defined datasource\n-- previsouly defined file format\nCREATE EXTERNAL TABLE [wwi_external].Sales\n    (\n        [TransactionId] [nvarchar](36)  NOT NULL,\n        [CustomerId] [int]  NOT NULL,\n        [ProductId] [smallint]  NOT NULL,\n        [Quantity] [smallint]  NOT NULL,\n        [Price] [decimal](9,2)  NOT NULL,\n        [TotalAmount] [decimal](9,2)  NOT NULL,\n        [TransactionDate] [int]  NOT NULL,\n        [ProfitAmount] [decimal](9,2)  NOT NULL,\n        [Hour] [tinyint]  NOT NULL,\n        [Minute] [tinyint]  NOT NULL,\n        [StoreId] [smallint]  NOT NULL\n    )\nWITH\n    (\n        LOCATION = '/sale-small/Year=2019',  \n        DATA_SOURCE = ABSSImre,\n        FILE_FORMAT = [ParquetFormatImre]  \n    )  \nGO\n\n-- insert the external table just created \nINSERT INTO [wwi_staging].[Sale_Heap]\nSELECT *\nFROM [wwi_external].[Sales]\n\nSELECT COUNT(1) FROM wwi_staging.Sale_Heap(nolock)\n\n\n-- Trying cooy operation \n-- truncating table\nTRUNCATE TABLE wwi_staging.Sale_Heap;\nGO\n\n-- Replace <PrimaryStorage> with the workspace default storage account name.\nCOPY INTO wwi_staging.Sale_Heap\nFROM 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2019'\nWITH (\n    FILE_TYPE = 'PARQUET',\n    COMPRESSION = 'SNAPPY'\n)\nGO\n\nSELECT COUNT(1) FROM wwi_staging.Sale_Heap(nolock)\n\nCOPY INTO wwi_staging.Sale\nFROM 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small%2FYear%3D2019'\nWITH (\n    FILE_TYPE = 'PARQUET',\n    COMPRESSION = 'SNAPPY'\n)\nGO\n\nSELECT COUNT(1) FROM wwi_staging.Sale(nolock)\n\n-- truncating CCI table\nTRUNCATE TABLE wwi_staging.Sale;\nGO\n\n-- Loading it from Heap Table\nINSERT INTO [wwi_staging].[Sale]\nSELECT *\nFROM [wwi_staging].[Sale_Heap]\n\nCREATE TABLE [wwi_staging].DailySalesCounts2\n    (\n        [Date] [nvarchar](24) ,\n        [NorthAmerica] [int]  ,\n        [SouthAmerica] [int]  ,\n        [Europe] [int]  ,\n        [Africa] [int]  ,\n        [Asia] [int]  \n    )\nGO\n\nDROP TABLE [wwi_staging].DailySalesCounts2; \n\nTRUNCATE TABLE wwi_staging.DailySalesCounts;\n\nCOPY INTO wwi_staging.DailySalesCounts\nFROM 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/campaign-analytics/dailycounts4.txt'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIELDTERMINATOR='.',\n    ROWTERMINATOR=','\n)\nGO\n\nSELECT COUNT(*) FROM wwi_staging.DailySalesCounts; \n\nTRUNCATE TABLE wwi_staging.DailySalesCounts2;\n\n-- Replace <PrimaryStorage> with the workspace default storage account name.\nCOPY INTO wwi_staging.DailySalesCounts2\nFROM 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/campaign-analytics/dailycounts3.txt'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIELDTERMINATOR=';',\n    ROWTERMINATOR='0X0A',\n    ENCODING = 'UTF8',\n    FIELDQUOTE='\"'\n)\nGO\n\nSELECT * FROM [wwi_staging].DailySalesCounts2\nORDER BY [Date] DESC\n\nSELECT count(*) FROM [wwi_staging].DailySalesCounts\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 1  - explore sales data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    r.filepath(1) as [year], r.filepath(2) as [quarter], count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=*/Quarter=*/Month=*/Day=*/*snappy.parquet',\n        FORMAT='PARQUET'\n    )\n AS [r]\n where r.filepath(1)  IN (2012, 2013)\n group by r.filepath(1), r.filepath(2)\n\n SELECT\n    TOP 100 r.filepath(1) as [Year]\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=*/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet',\n        FORMAT='PARQUET'\n    )\n AS [r]\n\nSELECT\n    r.filepath(2) as [filepath], count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet',\n        FORMAT='PARQUET'\n    )\n AS [r]\n GROUP BY  r.filepath(2)\n\nSELECT\n        TransactionDate, ProductId,\n        CAST(SUM(ProfitAmount) AS decimal(18,2)) AS [(sum) Profit],\n        CAST(AVG(ProfitAmount) AS decimal(18,2)) AS [(avg) Profit],\n        SUM(Quantity) AS [(sum) Quantity]\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS [r] GROUP BY r.filepath(1), r.TransactionDate, r.ProductId;\n\n\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=2019/*/*/*/*',\n        FORMAT='PARQUET'\n    ) AS [r];\n\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/ZTSI_ACTR.LF.TMP_BILKODE_LKV_POLICA.csv',\n        FORMAT='CSV'\n        ,FIELDTERMINATOR = ';'    \n        ,ROWTERMINATOR = '0x0a' \n --       ,ESCAPE_CHAR = '\\\\'\n        ,FIRSTROW = 1     \n        ,FIELDQUOTE = '\"'\n --       ,DATA_COMPRESSION = 'org.apache.hadoop.io.compress.GzipCodec'\n        ,PARSER_VERSION = '2.0'\n        ,HEADER_ROW = FALSE\n\n    ) AS [r];\n\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/ZTSI_ACTR.LF.TMP_BILKODE_LKV_POLICA.csv.gz',\n        FORMAT='CSV'\n        ,FIELDTERMINATOR = ';'    \n        ,ROWTERMINATOR = '0x0a' \n        ,ESCAPECHAR = '\\\\'\n        ,FIRSTROW = 1     \n        ,DATA_COMPRESSION = 'GZIP'\n        ,PARSER_VERSION = '1.0'\n        ,HEADER_ROW = FALSE\n        ,DATAFILETYPE ='char'\n    )\n        WITH \n    (\n\"ROW_NO_POK\" BIGINT,\n\"ROW_NO\" BIGINT,\n\"ID_POLICA\" INTEGER,\n\"ID_RIZIK\" FLOAT,\n\"UREDI\" VARCHAR(1),\n\"STEV\" BIGINT,\n\"TIP_ENOTE\" NVARCHAR(32),\n\"UL_SKLADI_PLUS\" NVARCHAR(32),\n\"LKV_RENTA_OSN\" DECIMAL(18,2),\n\"LKV_RENTA_KAPIT\" DECIMAL(18,2),\n\"LKV_RENTA_BONIF\" DECIMAL(18,2),\n\"LKV_RENTA_PRES\" FLOAT,\n\"CENIK_RIZIKA\" NVARCHAR(40),\n\"DAT_ZAC_IZPL_REN\" DATETIME,\n\"LKV_PREDUJEM_SKUP\" FLOAT,\n\"TP_OBR_MERA_IZPL\" DECIMAL(6,4),\n\"TP_TAB_IZPL\" NVARCHAR(40),\n\"GAMA_IZPL\" DECIMAL(6,4),\n\"STAR_ZAV_1\" DECIMAL(5,2),\n\"STAR_POST_1\" INTEGER,\n\"SPOL_ZAV_1\" INTEGER,\n\"UPR_TRAJ_IZPL\" SMALLINT,\n\"UPR_TRAJ_ZAJ_IZPL\" INTEGER,\n\"CEP_ZAV_POGOJI\" NVARCHAR(80),\n\"UPR_OSN_VREDN\" DECIMAL(18,2),\n\"UPR_KAPIT_VREDN\" DECIMAL(18,2),\n\"UPR_BONIF_VREDN\" DECIMAL(18,2),\n\"TP_OBR_MERA\" DECIMAL(6,4),\n\"TP_TAB_RIZIKO1\" NVARCHAR(40),\n\"TP_TAB_RIZIKO2\" NVARCHAR(40),\n\"BE_UNISEX_FLAG\" VARCHAR(1),\n\"TP_TAB_REZ_RIZ1\" NVARCHAR(40),\n\"TP_TAB_REZ_RIZ2\" NVARCHAR(40),\n\"ZOS_POV_STAR\" DECIMAL(5,2),\n\"ZOS_POV_STAR_POST\" DECIMAL(5,2),\n\"NADUMR_ZAV_1\" DECIMAL(5,4),\n\"FLAT_PREM_ZAV_1\" DECIMAL(4,4),\n\"DOBA_FLAT_ZAV_1\" DECIMAL(5,2),\n\"TP_ZDRAVJA_1\" INTEGER,\n\"STAR_ZAV_2\" DECIMAL(5,2),\n\"STAR_POST_2\" INTEGER,\n\"SPOL_ZAV_2\" INTEGER,\n\"NADUMR_ZAV_2\" DECIMAL(5,4),\n\"FLAT_PREM_ZAV_2\" DECIMAL(4,4),\n\"DOBA_FLAT_ZAV_2\" DECIMAL(5,2),\n\"TP_ZDRAVJA_2\" INTEGER,\n\"ID_PERSON_1\" INTEGER,\n\"ID_PERSON_2\" INTEGER,\n\"ZAV_POGOJI\" NVARCHAR(140) \n    ) AS [r]; \n\n\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/ZTSI_ACTR.LF.TMP_BILKODE_LKV_POLICA.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '2.0',\n        FIELDTERMINATOR =';',\n        ROWTERMINATOR = '\\n',\n        ESCAPECHAR = '\\\\',\n        FIRSTROW = 1\n    ) \n    WITH \n    (\n\"ROW_NO_POK\" BIGINT,\n\"ROW_NO\" BIGINT,\n\"ID_POLICA\" INTEGER,\n\"ID_RIZIK\" FLOAT,\n\"UREDI\" VARCHAR(1),\n\"STEV\" BIGINT,\n\"TIP_ENOTE\" NVARCHAR(32),\n\"UL_SKLADI_PLUS\" NVARCHAR(32),\n\"LKV_RENTA_OSN\" DECIMAL(18,2),\n\"LKV_RENTA_KAPIT\" DECIMAL(18,2),\n\"LKV_RENTA_BONIF\" DECIMAL(18,2),\n\"LKV_RENTA_PRES\" FLOAT,\n\"CENIK_RIZIKA\" NVARCHAR(40),\n\"DAT_ZAC_IZPL_REN\" DATETIME,\n\"LKV_PREDUJEM_SKUP\" FLOAT,\n\"TP_OBR_MERA_IZPL\" DECIMAL(6,4),\n\"TP_TAB_IZPL\" NVARCHAR(40),\n\"GAMA_IZPL\" DECIMAL(6,4),\n\"STAR_ZAV_1\" DECIMAL(5,2),\n\"STAR_POST_1\" INTEGER,\n\"SPOL_ZAV_1\" INTEGER,\n\"UPR_TRAJ_IZPL\" SMALLINT,\n\"UPR_TRAJ_ZAJ_IZPL\" INTEGER,\n\"CEP_ZAV_POGOJI\" NVARCHAR(80),\n\"UPR_OSN_VREDN\" DECIMAL(18,2),\n\"UPR_KAPIT_VREDN\" DECIMAL(18,2),\n\"UPR_BONIF_VREDN\" DECIMAL(18,2),\n\"TP_OBR_MERA\" DECIMAL(6,4),\n\"TP_TAB_RIZIKO1\" NVARCHAR(40),\n\"TP_TAB_RIZIKO2\" NVARCHAR(40),\n\"BE_UNISEX_FLAG\" VARCHAR(1),\n\"TP_TAB_REZ_RIZ1\" NVARCHAR(40),\n\"TP_TAB_REZ_RIZ2\" NVARCHAR(40),\n\"ZOS_POV_STAR\" DECIMAL(5,2),\n\"ZOS_POV_STAR_POST\" DECIMAL(5,2),\n\"NADUMR_ZAV_1\" DECIMAL(5,4),\n\"FLAT_PREM_ZAV_1\" DECIMAL(4,4),\n\"DOBA_FLAT_ZAV_1\" DECIMAL(5,2),\n\"TP_ZDRAVJA_1\" INTEGER,\n\"STAR_ZAV_2\" DECIMAL(5,2),\n\"STAR_POST_2\" INTEGER,\n\"SPOL_ZAV_2\" INTEGER,\n\"NADUMR_ZAV_2\" DECIMAL(5,4),\n\"FLAT_PREM_ZAV_2\" DECIMAL(4,4),\n\"DOBA_FLAT_ZAV_2\" DECIMAL(5,2),\n\"TP_ZDRAVJA_2\" INTEGER,\n\"ID_PERSON_1\" INTEGER,\n\"ID_PERSON_2\" INTEGER,\n\"ZAV_POGOJI\" NVARCHAR(140) \n    ) AS [r];\n\n\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/ZTSI_ACTR.LF.TMP_BILKODE_LKV_POLICA.csv',\n        FORMAT = 'CSV', PARSER_VERSION = '1.0',\n        FIELDTERMINATOR =';',\n        ROWTERMINATOR = '\\n',\n        ESCAPECHAR = '\\\\',\n        FIRSTROW = 1\n    ) \n    WITH \n    (\n\"ROW_NO_POK\" BIGINT,\n\"ROW_NO\" BIGINT,\n\"ID_POLICA\" INTEGER,\n\"ID_RIZIK\" FLOAT,\n\"UREDI\" VARCHAR(1),\n\"STEV\" BIGINT,\n\"TIP_ENOTE\" NVARCHAR(32),\n\"UL_SKLADI_PLUS\" NVARCHAR(32),\n\"LKV_RENTA_OSN\" DECIMAL(18,2),\n\"LKV_RENTA_KAPIT\" DECIMAL(18,2),\n\"LKV_RENTA_BONIF\" DECIMAL(18,2),\n\"LKV_RENTA_PRES\" FLOAT,\n\"CENIK_RIZIKA\" NVARCHAR(40),\n\"DAT_ZAC_IZPL_REN\" DATETIME,\n\"LKV_PREDUJEM_SKUP\" FLOAT,\n\"TP_OBR_MERA_IZPL\" DECIMAL(6,4),\n\"TP_TAB_IZPL\" NVARCHAR(40),\n\"GAMA_IZPL\" DECIMAL(6,4),\n\"STAR_ZAV_1\" DECIMAL(5,2),\n\"STAR_POST_1\" INTEGER,\n\"SPOL_ZAV_1\" INTEGER,\n\"UPR_TRAJ_IZPL\" SMALLINT,\n\"UPR_TRAJ_ZAJ_IZPL\" INTEGER,\n\"CEP_ZAV_POGOJI\" NVARCHAR(80),\n\"UPR_OSN_VREDN\" DECIMAL(18,2),\n\"UPR_KAPIT_VREDN\" DECIMAL(18,2),\n\"UPR_BONIF_VREDN\" DECIMAL(18,2),\n\"TP_OBR_MERA\" DECIMAL(6,4),\n\"TP_TAB_RIZIKO1\" NVARCHAR(40),\n\"TP_TAB_RIZIKO2\" NVARCHAR(40),\n\"BE_UNISEX_FLAG\" VARCHAR(1),\n\"TP_TAB_REZ_RIZ1\" NVARCHAR(40),\n\"TP_TAB_REZ_RIZ2\" NVARCHAR(40),\n\"ZOS_POV_STAR\" DECIMAL(5,2),\n\"ZOS_POV_STAR_POST\" DECIMAL(5,2),\n\"NADUMR_ZAV_1\" DECIMAL(5,4),\n\"FLAT_PREM_ZAV_1\" DECIMAL(4,4),\n\"DOBA_FLAT_ZAV_1\" DECIMAL(5,2),\n\"TP_ZDRAVJA_1\" INTEGER,\n\"STAR_ZAV_2\" DECIMAL(5,2),\n\"STAR_POST_2\" INTEGER,\n\"SPOL_ZAV_2\" INTEGER,\n\"NADUMR_ZAV_2\" DECIMAL(5,4),\n\"FLAT_PREM_ZAV_2\" DECIMAL(4,4),\n\"DOBA_FLAT_ZAV_2\" DECIMAL(5,2),\n\"TP_ZDRAVJA_2\" INTEGER,\n\"ID_PERSON_1\" INTEGER,\n\"ID_PERSON_2\" INTEGER,\n\"ZAV_POGOJI\" NVARCHAR(140) \n    ) AS [r];\n\nCREATE EXTERNAL FILE FORMAT [csvFF] WITH (\n    FORMAT_TYPE = DELIMITEDTEXT,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.GzipCodec'\n);\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 1 - Exercise 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n-- create a workload group  for workload isolation\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE group_name = 'BigDataLoad')\nBEGIN\n    CREATE WORKLOAD GROUP BigDataLoad WITH  \n    (\n        MIN_PERCENTAGE_RESOURCE = 50 -- integer value\n        ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 25 --  (guaranteed a minimum of 4 concurrency)\n        ,CAP_PERCENTAGE_RESOURCE = 100\n    );\nEND\n\n-- create a classifier that puts asa.sal.import01 user associated with the workload group\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE [name] = 'HeavyLoader')\nBEGIN\n    CREATE WORKLOAD Classifier HeavyLoader WITH\n    (\n        Workload_Group ='BigDataLoad',\n        MemberName='asa.sql.import01',\n        IMPORTANCE = HIGH\n    );\nEND\n\nSELECT * FROM sys.workload_management_workload_classifiers\n\nDROP WORKLOAD CLASSIFIER HeavyLoader\nDROP  WORKLOAD GROUP BigDataLoad\n\nEXEC sp_addrolemember 'largerc', 'dbo'\n\nSELECT CURRENT_USER;  \nGO  \n-- dbo\n\nselect name as username,\n       create_date,\n       modify_date,\n       type_desc as type,\n       authentication_type_desc as authentication_type\nfrom sys.database_principals\nwhere type not in ('A', 'G', 'R', 'X')\n      and sid is not null\n      and name != 'guest'\norder by username;\n-- no asa.sql.admin\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab08 - Exercise 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "--First, let's confirm that there are no queries currently being run by users logged in workload01 or workload02\n\nSELECT s.login_name, r.[Status], r.Importance, submit_time, \nstart_time ,s.session_id FROM sys.dm_pdw_exec_sessions s \nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload01','asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended') \n--and submit_time>dateadd(minute,-2,getdate())\nORDER BY submit_time ,s.login_name\n\n-- After launchung the pipeline, check running sql stamenets \nSELECT s.login_name, r.[Status], r.Importance, submit_time, start_time ,s.session_id FROM sys.dm_pdw_exec_sessions s \nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload01','asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended') and submit_time>dateadd(minute,-2,getdate())\nORDER BY submit_time ,status\n-- there are plenty of running and suspended requests, for both users\n\n-- cancelled the pipeline, waiting for all queries to execute, done\n\n-- creates  separate workload classification for CEO queries\n-- SETs CEO queries to have a HIGH importance \n-- and to run in LargeRC resource clas\n-- Large RC is some system defined dynamic resource class\nIF EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE name = 'CEO')\nBEGIN\n    DROP WORKLOAD CLASSIFIER CEO;\nEND\nCREATE WORKLOAD CLASSIFIER CEO\n  WITH (WORKLOAD_GROUP = 'largerc'\n  ,MEMBERNAME = 'asa.sql.workload01',IMPORTANCE = High);\n-- Net result should be CEO queries should always skip the queue\n-- Never be suspended foe example ? \n\n-- checking the queries running now\nSELECT s.login_name, r.[Status], r.Importance, submit_time, start_time ,s.session_id FROM sys.dm_pdw_exec_sessions s \nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload01','asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended') and submit_time>dateadd(minute,-2,getdate())\nORDER BY status, submit_time  desc\n\n\nSELECT s.login_name, r.[Status], r.Importance, submit_time, start_time ,s.session_id FROM sys.dm_pdw_exec_sessions s \nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload01','asa.sql.workload02') and Importance\nis not NULL AND r.[status]  NOT IN ('Completed') and submit_time>dateadd(minute,-2,getdate())\nORDER BY status, submit_time  desc\n--- CEO queries do get priority\n\n\nSELECT * FROM sys.workload_management_workload_classifiers\n\nSELECT name\nFROM   sys.database_principals\nWHERE  name LIKE '%rc%' AND type_desc = 'DATABASE_ROLE';\n\n-- Create a new a non system workload group for CEOO\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_groups where name = 'CEODemo')\nBEGIN\n    Create WORKLOAD GROUP CEODemo WITH  \n    ( MIN_PERCENTAGE_RESOURCE = 50        -- integer value\n    ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 25 --   50/25 = 2 guaranteed concurrency\n    ,CAP_PERCENTAGE_RESOURCE = 100 -- 100/25 = 4 max 4 concurrency\n    )\nEND\n\n\n-- check that there are no active queries\nSELECT s.login_name, r.[Status], r.Importance, submit_time,\nstart_time ,s.session_id FROM sys.dm_pdw_exec_sessions s\nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload01','asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended')\nORDER BY submit_time, status\n\n-- check how many active queries are \n\nSELECt COUNT(*) FROM \n(\nSELECT s.login_name, r.[Status], r.Importance, submit_time,\nstart_time ,s.session_id FROM sys.dm_pdw_exec_sessions s\nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload01','asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended')\n-- ORDER BY submit_time, status\n) A\n-- no mora active queries\n\n\n--- assign 2nd user (asa.sql.workload02) to a new workload classification just created\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers where  name = 'CEODreamDemo')\nBEGIN\n    Create Workload Classifier CEODreamDemo with\n    ( Workload_Group ='CEODemo',MemberName='asa.sql.workload02',IMPORTANCE = BELOW_NORMAL);\nEND\n\n-- what happens with these new queries\nSELECT s.login_name, r.[Status], r.Importance, submit_time,\nstart_time ,s.session_id FROM sys.dm_pdw_exec_sessions s\nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended')\nORDER BY submit_time, status\n-- nothing else being on the system, all capacity up to CAP is taken\n-- therefore wwe have 4 queries running in parallel\n\n\n-- changing now this to minimum capacity of 26 and 3.25 = > bigger than 4 concurrent queire s\nIF  EXISTS (SELECT * FROM sys.workload_management_workload_classifiers where group_name = 'CEODemo')\nBEGIN\n    Drop Workload Classifier CEODreamDemo\n    DROP WORKLOAD GROUP CEODemo\n    --- Creates a workload group 'CEODemo'.\n        Create  WORKLOAD GROUP CEODemo WITH  \n    (MIN_PERCENTAGE_RESOURCE = 26 -- integer value\n        ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 3.25 -- factor of 26 (guaranteed more than 4 concurrencies)\n    ,CAP_PERCENTAGE_RESOURCE = 100\n    )\n    --- Creates a workload Classifier 'CEODreamDemo'.\n    Create Workload Classifier CEODreamDemo with\n    (Workload_Group ='CEODemo',MemberName='asa.sql.workload02',IMPORTANCE = BELOW_NORMAL);\nEND\n\n\n-- what happens with these new queries\nSELECT s.login_name, r.[Status], r.Importance, submit_time,\nstart_time ,s.session_id FROM sys.dm_pdw_exec_sessions s\nJOIN sys.dm_pdw_exec_requests r ON s.session_id = r.session_id\nWHERE s.login_name IN ('asa.sql.workload02') and Importance\nis not NULL AND r.[status] in ('Running','Suspended')\nORDER BY submit_time, status\n-- nothing else being on the system, all capacity up to CAP is taken\n-- LOTS of (maybe 30) being run in parallel\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Labb08 - Exercise 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n-- queries running or waiting to be run, not in current session \nSELECT *\nFROM sys.dm_pdw_exec_requests\nWHERE status not in ('Completed','Failed','Cancelled')\n  AND session_id <> session_id()\nORDER BY submit_time DESC;\n\n-- top 10 queries \nSELECT TOP 10 *\nFROM sys.dm_pdw_exec_requests\nORDER BY total_elapsed_time DESC;\n\n-- simplify retrieving queires of interests\n-- by labelling them \n-- fire a smaple query \nSELECT *\nFROM sys.tables\nOPTION (LABEL = 'My Query');\n\n-- then retrieve your labeled query \n-- Find a query with the Label 'My Query'\n-- Use brackets when querying the label column, as it it a key word\nSELECT  *\nFROM sys.dm_pdw_exec_requests\nWHERE [label] = 'My Query';\n\n\n-- find out more details about the query \nSELECT * FROM sys.dm_pdw_request_steps\nWHERE request_id = 'QID497629'\nORDER BY step_index;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Metastore_Serverless')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "MetaStore"
				},
				"content": {
					"query": "select * from imre_spark.dbo.imre_spark_test",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "imre",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Purview_scan_setup')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/* for serverless */\nCREATE LOGIN [imrepurviewga] FROM EXTERNAL PROVIDER;\nALTER SERVER ROLE sysadmin ADD MEMBER [imrepurviewga];\n\n\n\n/* for dedicated */ \nCREATE USER [imrepurviewga] FROM EXTERNAL PROVIDER;\nEXEC sp_addrolemember 'db_owner', 'imrepurviewga';",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT * FROM mark_test\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "imre",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [ProductId]\n,[ThreadCount]\n,[StyleId]\n,[SizeId]\n,[FabricHandId]\n,[DyeTypeId]\n,[CoatingId]\n,[WeaveTypeId]\n,[ConstructionTypeId]\n,[FiberId]\n,[FabricId]\n,[ApparelProductTypeId]\n FROM [Imre_lake_DB].[dbo].[ApparelProduct]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Imre_lake_DB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[name]\n,[birthdate]\n FROM [imre_spark].[dbo].[myparquettable]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "imre_spark",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Imre_lake_DB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [id]\n,[name]\n,[birthdate]\n FROM [Imre_lake_DB].[dbo].[myparquettable]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Imre_lake_DB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Serverless set up')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nuse master\nGo\nCREATE LOGIN testlogin with PASSWORD = 'Pass&wd1_1968';\nGo\n\nuse master\ngo\nALTER SERVER ROLE sysadmin ADD MEMBER testlogin;\ngo\n\nDROP LOGIN [iaclarke]\n\nuse master\ngo\nCREATE LOGIN [iaclarke@microsoft.com] FROM EXTERNAL PROVIDER;\nALTER SERVER ROLE sysadmin ADD MEMBER [iaclarke@microsoft.com];\ngo\n\nuse master\ngo\nCREATE USER [eruskal@microsoft.com] FROM EXTERNAL PROVIDER;\n\n\n\nCREATE USER [iaclarke@microsoft.com] FROM LOGIN [iaclarke@microsoft.com]\nGo\n\nuse master\ngo\nALTER SERVER ROLE sysadmin ADD MEMBER [eruskal@microsoft.com];\nGo\n\nSELECT * FROM sys.database_principals\n\ncreate user [asa.sql.workload01] for login [asa.sql.workload01]\ncreate user [asa.sql.workload02] for login [asa.sql.workload02]\nexecute sp_addrolemember 'db_datareader', 'asa.sql.workload01' \nexecute sp_addrolemember 'db_datareader', 'asa.sql.workload02'\n\n\ncreate user [asa.sql.import01] for login [asa.sql.import01]\ncreate user [asa.sql.import02] for login [asa.sql.import02]\nexecute sp_addrolemember 'db_owner', 'asa.sql.import01'  \nexecute sp_addrolemember 'db_owner', 'asa.sql.import02' \n\n\ncreate user [asa.sql.highperf] for login [asa.sql.highperf]\nexecute sp_addrolemember 'db_owner', 'asa.sql.highperf' \nexecute sp_addrolemember 'staticrc80', 'asa.sql.highperf",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "imre",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Serverless_playgorund_1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE EXTERNAL TABLE imre_test_grouped AS \nSELECT\n    r.filepath(1) as [year], r.filepath(2) as [quarter], count(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakeimre.dfs.core.windows.net/wwi-02/sale-small/Year=*/Quarter=*/Month=*/Day=*/*snappy.parquet',\n        FORMAT='PARQUET'\n    )\n AS [r]\n where r.filepath(1)  IN (2012, 2013)\n group by r.filepath(1), r.filepath(2)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "imre",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sys_views_samples')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select * from sys.database_credentials;\n\nselect * from sys.database_role_members;\n\nselect * from sys.database_permissions;\n\nselect * from sys.credentials;\n\nselect * from sys.database_principals;\n\nselect * from sys.database_scoped_credentials;\n\nCREATE USER imrepurview FROM EXTERNAL PROVIDER;\n\nEXEC sp_addrolemember'db_owner', 'imrepurview';\n\nSELECT top 100  * from sys.dm_pdw_exec_requests order by total_elapsed_time DESC;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Table_CCI_verification')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "EXECUTE AS USER = 'asa.sql.highperf'\nGO\nSELECT CURRENT_USER;  \nGO  \n\nEXEC sp_addrolemember 'largerc', 'asa.sql.highperf'\nGO\n\nDROP Table [wwi_perf].[Sale_Result]\nGO\n\nSELECT TOP 100 * from [wwi_perf].[vColumnStoreRowGroupStats]\nwhere logical_table_name = 'Sale_Partition02'\n\nselect count(*) FROM wwi_perf.Sale_Partition02;\n\nSELECT count(*) from [wwi_perf].[vColumnStoreRowGroupStats]\nwhere logical_table_name = 'Sale_Partition02'\n\nEXECUTE AS USER = 'asa.sql.highperf'\nGO\nCREATE TABLE [wwi_perf].[Sales_Hash22] \nWITH \n(\tDISTRIBUTION = HASH ( [CustomerId]),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nAS  SELECT * FROM wwi_perf.Sale_Partition02\nGO\n\nEXECUTE AS USER = 'asa.sql.highperf'\nGO\nCREATE TABLE [wwi_perf].[Sales_Hash23] \nWITH \n(\tDISTRIBUTION = HASH ( [CustomerId]),\n\tCLUSTERED COLUMNSTORE INDEX\n)\nAS  SELECT * FROM wwi_perf.Sale_Partition02\nOPTION (MAXDOP  1)\nGO\n\n\nSELECT count(*) from [wwi_perf].[vColumnStoreRowGroupStats]\nwhere logical_table_name = 'Sales_Hash22'\n\nSELECT * from [wwi_perf].[vColumnStoreRowGroupStats]\nwhere logical_table_name = 'Sales_Hash22'\nORDER BY TOTAL_ROWS DESC\n\nSELECT TRIM_REASON_DESC, SUM(TOTAL_ROWS) from [wwi_perf].[vColumnStoreRowGroupStats]\nwhere logical_table_name = 'Sales_Hash22'\nGROUP BY TRIM_REASON_DESC\n\nALTER INDEX ALL ON [wwi_perf].[Sales_Hash22] REBUILD;\n\nSELECT * from [wwi_perf].[vColumnStoreRowGroupStats]\nwhere logical_table_name = 'Sales_Hash23'\nORDER BY TOTAL_ROWS DESC\n\nSELECT TRIM_REASON_DESC, count(*) from [wwi_perf].[vColumnStoreRowGroupStats]\nwhere logical_table_name = 'Sales_Hash23'\nGROUP BY TRIM_REASON_DESC\n\n-- run 1000 or 2000 DWU\n-- create new user\n-- add to largerc\n-- run with MAXDOP 1 if can afford.\n-- alter indexes istead of running with MAXDOP\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sparkjob3')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "SparkPool002",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "scala",
				"scanFolder": false,
				"jobProperties": {
					"name": "Sparkjob3",
					"file": "abfss://filesystem@asadatalakeimre.dfs.core.windows.net/sparkexamples.jar",
					"className": "org.apache.spark.examples.JavaWordCount",
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "3",
						"spark.autotune.trackingId": "deadbc45-c1c9-45d5-a4eb-f6faec17df51"
					},
					"args": [
						"abfss://filesystem@asadatalakeimre.dfs.core.windows.net/shakespeare.txt",
						"abfss://filesystem@asadatalakeimre.dfs.core.windows.net/result/"
					],
					"jars": [],
					"pyFiles": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkjob2')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "SparkPool002",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "scala",
				"scanFolder": false,
				"jobProperties": {
					"name": "sparkjob2",
					"file": "abfss://tempdata@asadatalakeimre.dfs.core.windows.net/synapse/workspaces/asaworkspaceimre/batchjobs/Spark%20job%20definition%201/sparkexamples.jar",
					"className": "JavaPageRank",
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "8",
						"spark.autotune.trackingId": "729ce12f-01b1-4d98-beac-771653455ee0"
					},
					"args": [],
					"jars": [],
					"pyFiles": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity 05 - Model Training')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {}
				},
				"metadata": {
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 60
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Model training and registration\n",
							"This notebook show the process for training the model, converting the model to ONNX and uploading the ONNX model to Azure Storage."
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Explore the training data\n",
							"The following cells load the source CSV file into a Spark DataFrame and create a temporary view that can be used to query the data with Spark SQL.\n",
							"\n",
							"WWI has provided a small CSV file you can use for showing the process of training a simple model.\n",
							"\n",
							"They have already loaded for you in the data lake. \n",
							"It is located under the `wwi-02` container with the path `/sale-csv/wwi-factsale.csv`.\n",
							"You need to build the correct path to the file and the run the cells that follow to load and query the data.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.load('abfss://<REPLACE-WITH-YOUR-PATH>', format=\"csv\"\n",
							", header=True, sep=\"|\"\n",
							")"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, WWI would like you to show them how create a temporary view over the loaded dataframe.\n",
							"\n",
							"The view should be named `facts`.\n",
							"\n",
							"Complete the code in the cell and run it.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df.#<- can you complete this?"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"In the next cell, WWI would like you to explore the data with an initial query.\n",
							"\n",
							"You want to preview all of the sales having the `Customer Key` of `11`.\n",
							"\n",
							"You should order the results by `Stock Item Key`.\n"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"display(spark.sql(\"<INSERT YOUR SQL QUERY HERE>\"))"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Predict Quantity given Customer Key and Stock Item Key\n",
							"In the following cells we load a subset of the data that just contains the fields needed for training. \n",
							"\n",
							"WWI's data scientists have already provided some of the code for you. \n",
							"\n",
							"Read thru and run the following cells.\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import col\n",
							"df3 = spark.sql(\"SELECT double(`Customer Key`) as customerkey, double(`Stock Item Key`) as stockitemkey, double(`Quantity`) as quantity FROM facts\").where(col(\"quantity\").isNotNull())\n",
							"df3.cache()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, we package the data into the format expected by Spark ML's LinearRegression. It requires a DataFrame with two columns- `features` and a column with the labels to predict (`quantity` in this case).\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.feature import VectorAssembler\n",
							"\n",
							"vectorAssembler = VectorAssembler(inputCols = ['customerkey', 'stockitemkey'], outputCol = 'features')\n",
							"df4 = vectorAssembler.transform(df3)\n",
							"df5 = df4.select(['features', 'quantity'])\n",
							"df5.show(10)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now, we split our DataFrame into training and testing DataFrames.\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"A best practice is to split data into training and test sets.\n",
							"\n",
							"WWI would like you to complete the final line that produces the train and test dataframes. \n",
							"\n",
							"Once you have completed the cell, run it.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"trainingFraction = 0.7\n",
							"testingFraction = (1-trainingFraction)\n",
							"seed = 42\n",
							"\n",
							"# Split the dataframe into test and training dataframes\n",
							"df_train, df_test = # use df5 to create the two dataframes"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"In the following cell, you will train your LinearRegression model.\n",
							"\n",
							"The goal of this regressor is to predict the `quantity` field given all of the features. \n",
							"\n",
							"Complete the missing parameters and the last line to train the model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.regression import LinearRegression\n",
							"\n",
							"lin_reg = LinearRegression(featuresCol = '<REPLACE WITH YOUR ANSWER>', labelCol='<REPLACE WITH YOUR ANSWER>', maxIter = 10, regParam=0.3)\n",
							"lin_reg_model = # complete this line, using df_train to train the linear regression model "
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now that you have a trained model in hand, WWI wants to verify you can use it to make predictions against the test DataFrame.\n",
							"\n",
							"Complete the first line to use your trained model to make predictions against the `df_test` dataframe.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df_pred = #<-complete this to use your model to make predictions against df_test \n",
							"display(df_pred)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Convert model to ONNX\n",
							"In the cells that follow, WWI wants you to show how you convert the model to ONNX and show how an output of how ONNX represents the Spark ML model.\n",
							"\n",
							"They have already provided you the code, you just need to run the cells.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from onnxmltools import convert_sparkml\n",
							"from onnxmltools.convert.common.data_types import FloatTensorType\n",
							"\n",
							"initial_types = [ \n",
							"    (\"features\", FloatTensorType([1, lin_reg_model.numFeatures])),\n",
							"    # (repeat for the required inputs)\n",
							"]"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"model_onnx = convert_sparkml(lin_reg_model, 'sparkml GeneralizedLinearRegression', initial_types)\n",
							"model_onnx"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Upload the model to Azure Storage\n",
							"\n",
							"In order for an ONNX model to be used by the T-SQL predict statement, it must be uploaded to Azure Storage.\n",
							"\n",
							"WWI wants you to show them how they would serialize the model to disk and then upload the model file to Azure Storage.\n",
							"\n",
							"Run the following cell to save  the ONNX model to the storage of the Spark driver node temporarily. "
						]
					},
					{
						"cell_type": "code",
						"source": [
							"with open(\"model.onnx\", \"wb\") as f:\n",
							"    f.write(model_onnx.SerializeToString())"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, you need to show WWI how to use the Azure Storage Python SDK to upload the ONNX model to Azure Storage.\n",
							"\n",
							"Complete the connection string with the correct values for your non-hierarchical Storage Account.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlockBlobService\n",
							" \n",
							"block_blob_service = BlockBlobService(\n",
							" account_name='asadatalakeimre', account_key='uM35ZwSzYURhnx5DGe4oTttGZTdEqmRrDQYjDgXchfwWUndpWtA8rlScmm/Li8V6+ZS9f1bKCrvO27uE3j0qjg==') \n",
							" \n",
							"block_blob_service.create_blob_from_text('wwi-02', '/ml/onnx/model.onnx', model_onnx.SerializeToString())"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Challenge -Spark conv csv')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"import pyspark;\r\n",
							"\r\n",
							"rddvar = sc.textFile('abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20170502.csv');\r\n",
							"df=spark.read.format(\"csv\").option(\"inferSchema\", \"true\").option(\"header\", \"true\").load('abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20170501.csv', format='csv');\r\n",
							"df.printSchema();\r\n",
							"schematoUse=df.schema;\r\n",
							"df2=spark.read.format(\"csv\").option(\"schema\", df.schema).option(\"header\", \"true\").load('abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20170502.csv', format='csv');\r\n",
							"#df2.write.format(\"csv\").option(\"header\", \"true\").save()\r\n",
							"rddwords = rddvar.flatMap(lambda line: line.split(\",\"));\r\n",
							"rddnum =rddwords.count();\r\n",
							"rddmap=rddwords.map(lambda x: (x,1));\r\n",
							"\r\n",
							"\r\n",
							"# rddwords.foreach(f)\r\n",
							"\r\n",
							"print (\"rddnum :\", rddnum);\r\n",
							"print (rddmap.first());\r\n",
							"df2.show(10)\r\n",
							"df2.count()\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.types import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"\r\n",
							"profitByDateProduct = (df.groupBy(\"TransactionDate\",\"ProductId\")\r\n",
							"    .agg(\r\n",
							"        sum(\"ProfitAmount\").alias(\"(sum)ProfitAmount\"),\r\n",
							"        round(avg(\"Quantity\"), 4).alias(\"(avg)Quantity\"),\r\n",
							"        sum(\"Quantity\").alias(\"(sum)Quantity\"))\r\n",
							"    .orderBy(\"TransactionDate\"))\r\n",
							"profitByDateProduct.show(100)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df = (spark.read \\\r\n",
							"        .option(\"inferSchema\", \"true\") \\\r\n",
							"        .json(\"abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/online-user-profiles-02/*.json\", multiLine=True)\r\n",
							"    )\r\n",
							"\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# create a view called user_profiles\r\n",
							"df.createOrReplaceTempView(\"user_profiles\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * FROM user_profiles LIMIT 10"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.functions import udf, explode\r\n",
							"\r\n",
							"flat=df.select('visitorId',explode('topProductPurchases').alias('topProductPurchases_flat'))\r\n",
							"flat.show(100)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"topPurchases = (flat.select('visitorId','topProductPurchases_flat.productId','topProductPurchases_flat.itemsPurchasedLast12Months')\r\n",
							"    .orderBy('visitorId'))\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Let's order by the number of items purchased in the last 12 months\r\n",
							"sortedTopPurchases = topPurchases.orderBy(\"itemsPurchasedLast12Months\")\r\n",
							"\r\n",
							"sortedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"sortedTopPurchases = (topPurchases\r\n",
							"    .orderBy( col(\"itemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"sortedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(count(\"*\").alias(\"total\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"groupedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\",\"itemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(sum(\"itemsPurchasedLast12Months\").alias(\"totalItemsPurchased\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"groupedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 22
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Example_external_table')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e055eef9-08b0-458c-a260-a8b03231ca5c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"c1434100-c5bf-4ed2-95c9-3293eaf0ec99": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "3208",
												"3": 4,
												"4": "33.860000000000000000",
												"5": "135.440000000000000000",
												"6": "20161231",
												"7": "43.200000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "1820",
												"3": 4,
												"4": "28.650000000000000000",
												"5": "114.600000000000000000",
												"6": "20161231",
												"7": "35.680000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "3372",
												"3": 2,
												"4": "23.040000000000000000",
												"5": "46.080000000000000000",
												"6": "20161231",
												"7": "13.060000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "1373",
												"3": 3,
												"4": "34.650000000000000000",
												"5": "103.950000000000000000",
												"6": "20161231",
												"7": "31.020000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "2760",
												"3": 1,
												"4": "36.130000000000000000",
												"5": "36.130000000000000000",
												"6": "20161231",
												"7": "7.250000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "2253",
												"3": 4,
												"4": "26.800000000000000000",
												"5": "107.200000000000000000",
												"6": "20161231",
												"7": "28.000000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "3498",
												"3": 4,
												"4": "25.080000000000000000",
												"5": "100.320000000000000000",
												"6": "20161231",
												"7": "28.680000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "2358",
												"3": 3,
												"4": "23.290000000000000000",
												"5": "69.870000000000000000",
												"6": "20161231",
												"7": "24.930000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "198",
												"3": 4,
												"4": "30.820000000000000000",
												"5": "123.280000000000000000",
												"6": "20161231",
												"7": "41.800000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											},
											{
												"0": "bebd0650-b54f-43c4-bf18-f96fcc16fcf5",
												"1": "3",
												"2": "190",
												"3": 1,
												"4": "24.650000000000000000",
												"5": "24.650000000000000000",
												"6": "20161231",
												"7": "6.700000000000000000",
												"8": 6,
												"9": 35,
												"10": "7374"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"# df = spark.read.sqlanalytics(\"SQLPool01.wwi.UserTopProductPurchases\") \r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))\r\n",
							"# df.write.mode(\"overwrite\").saveAsTable(\"default.t1\")\r\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"DROP TABLE hive_ints;\r\n",
							"CREATE EXTERNAL TABLE hive_ints(key int) STORED AS PARQUET LOCATION 'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/ABN/Year=2016/Quarter=Q4/Month=12/Day=20161231/';\r\n",
							""
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT count(*) from hive_ints"
						],
						"outputs": [],
						"execution_count": 21
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hyperspace')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Lab01_Synapse_Spark"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from hyperspace import *  \r\n",
							"from com.microsoft.hyperspace import *\r\n",
							"from com.microsoft.hyperspace.index import *\r\n",
							"\r\n",
							"# Disable BroadcastHashJoin, so Spark will use standard SortMergeJoin. Currently, Hyperspace indexes utilize SortMergeJoin to speed up query.\r\n",
							"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\r\n",
							"\r\n",
							"# Replace the value below with the name of your primary ADLS Gen2 account for your Synapse workspace\r\n",
							"datalake = 'asadatalakeimre'\r\n",
							"\r\n",
							"dfSales = spark.read.parquet(\"abfss://wwi-02@\" + datalake + \".dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/*/*.parquet\")\r\n",
							"dfSales.show(10)\r\n",
							"\r\n",
							"dfCustomers = spark.read.load(\"abfss://wwi-02@\" + datalake + \".dfs.core.windows.net/data-generators/generator-customer.csv\", format=\"csv\", header=True)\r\n",
							"dfCustomers.show(10)\r\n",
							"\r\n",
							"# Create an instance of Hyperspace\r\n",
							"hyperspace = Hyperspace(spark)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"#create indexes: each one contains a name, a set of indexed columns and a set of included columns\r\n",
							"indexConfigSales = IndexConfig(\"indexSALES\", [\"CustomerId\"], [\"TotalAmount\"])\r\n",
							"indexConfigCustomers = IndexConfig(\"indexCUSTOMERS\", [\"CustomerId\"], [\"FullName\"])\r\n",
							"\r\n",
							"hyperspace.createIndex(dfSales, indexConfigSales)\t\t\t# only create index once\r\n",
							"hyperspace.createIndex(dfCustomers, indexConfigCustomers)\t# only create index once\r\n",
							"hyperspace.indexes().show()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df1 = dfSales.filter(\"\"\"CustomerId = 200\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"df1.show()\r\n",
							"df1.explain(True)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Enable Hyperspace - Hyperspace optimization rules become visible to the Spark optimizer and exploit existing Hyperspace indexes to optimize user queries\r\n",
							"Hyperspace.enable(spark)\r\n",
							"df1 = dfSales.filter(\"\"\"CustomerId = 200\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"df1.show()\r\n",
							"df1.explain(True)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df1 = dfSales.filter(\"\"\"CustomerId = 200\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"\r\n",
							"spark.conf.set(\"spark.hyperspace.explain.displayMode\", \"html\")\r\n",
							"hyperspace.explain(df1, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"eqJoin = dfSales.join(dfCustomers, dfSales.CustomerId == dfCustomers.CustomerId).select(dfSales.TotalAmount, dfCustomers.FullName)\r\n",
							"\r\n",
							"hyperspace.explain(eqJoin, True, displayHTML)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Disable Hyperspace - Hyperspace rules no longer apply during query optimization. Disabling Hyperspace has no impact on created indexes because they remain intact\r\n",
							"Hyperspace.disable(spark)\r\n",
							"\r\n",
							"hyperspace.deleteIndex(\"indexSALES\")\r\n",
							"hyperspace.vacuumIndex(\"indexSALES\")\r\n",
							"hyperspace.deleteIndex(\"indexCUSTOMERS\")\r\n",
							"hyperspace.vacuumIndex(\"indexCUSTOMERS\")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"\r\n",
							"Hyperspace.enable(spark)\r\n",
							"hyperspace.Indexes().show()"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"#\r\n",
							"# Microsoft Spark Utilities\r\n",
							"#\r\n",
							"# https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python\r\n",
							"#\r\n",
							"\r\n",
							"# Azure storage access info\r\n",
							"blob_account_name = datalake\r\n",
							"blob_container_name = 'wwi-02'\r\n",
							"blob_relative_path = '/'\r\n",
							"linkedServiceName = datalake\r\n",
							"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linkedServiceName)\r\n",
							"\r\n",
							"# Allow SPARK to access from Blob remotely\r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)\r\n",
							"\r\n",
							"mssparkutils.fs.mkdirs('/SomeNewFolder')\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"print ('-------------------------')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"mssparkutils.env.getUserName()"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LAB 02 - Exercise 4')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"val df = spark.read.sqlanalytics(\"SQLPool01.wwi.UserTopProductPurchases\") \n",
							"// df.write.mode(\"overwrite\").saveAsTable(\"default.t1\")\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.head(10)\r\n",
							"\r\n",
							"// create a temporary view usable - this gets registered in the metastore\r\n",
							"df.createTempView(\"df2\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"# Calling the DataFrame df created in Scala to Python\r\n",
							"\r\n",
							"#create view based on temp table registred in metastore in earlier scala step\r\n",
							"df3 = sqlContext.table(\"df2\")\r\n",
							"# *********************\r\n",
							"\r\n",
							"topPurchases = df3.select(\r\n",
							"    \"UserId\", \"ProductId\",\r\n",
							"    \"ItemsPurchasedLast12Months\", \"IsTopProduct\",\r\n",
							"    \"IsPreferredProduct\")\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"topPreferredProducts = (topPurchases\r\n",
							"    .filter( col(\"IsTopProduct\") == True)\r\n",
							"    .filter( col(\"IsPreferredProduct\") == True)\r\n",
							"    .orderBy( col(\"ItemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"topPreferredProducts.show(100)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- top 5 products for each user \r\n",
							"CREATE OR REPLACE TEMPORARY VIEW top_5_products\r\n",
							"AS\r\n",
							"    select UserId, ProductId, ItemsPurchasedLast12Months, seqnum\r\n",
							"    from (select *,\r\n",
							"                row_number() over (partition by UserId order by ItemsPurchasedLast12Months desc) as seqnum\r\n",
							"        from df2 order by UserId, ItemsPurchasedLast12Months, ProductID \r\n",
							"        ) a\r\n",
							"    where seqnum <= 5 and IsTopProduct == true and IsPreferredProduct = true\r\n",
							"    order by a.UserId\r\n",
							"\r\n",
							"    "
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"top5Products = sqlContext.table(\"top_5_products\")\r\n",
							"\r\n",
							"top5Products.show(100)"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"-- Test\r\n",
							"CREATE OR REPLACE TEMPORARY VIEW test\r\n",
							"AS\r\n",
							"    select userID, productId, count(*) as A\r\n",
							"           from df2  \r\n",
							"    where userId = 80000\r\n",
							"    group by UserId, ProductId\r\n",
							"    order by a desc\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"top5Products = sqlContext.table(\"test\")\r\n",
							"\r\n",
							"top5Products.show(100)"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"print('before filter: ', topPreferredProducts.count(), ', after filter: ', top5Products.count())"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"top5ProductsOverall = (top5Products.select(\"ProductId\",\"ItemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"ProductId\")\r\n",
							"    .agg( sum(\"ItemsPurchasedLast12Months\").alias(\"Total\") )\r\n",
							"    .orderBy( col(\"Total\").desc() )\r\n",
							"    .limit(5))\r\n",
							"\r\n",
							"top5ProductsOverall.show()"
						],
						"outputs": [],
						"execution_count": 32
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 06 - Machine Learning')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {}
				},
				"metadata": {
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 60
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Train a classifier to determine product seasonality\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"First, check if XGBoost is properly installed in the Spark environment (shoud have version 1.0.2)\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import pip\n",
							"pip.get_installed_distributions()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Import all necessary libraries.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer\n",
							"from sklearn.decomposition import PCA\n",
							"from sklearn.model_selection import train_test_split\n",
							"from sklearn.metrics import accuracy_score\n",
							"\n",
							"from xgboost import XGBClassifier\n",
							"\n",
							"from onnxmltools.convert import convert_xgboost\n",
							"from onnxmltools.convert.common.data_types import FloatTensorType\n",
							"\n",
							"import numpy as np\n",
							"import pandas as pd\n",
							"import matplotlib.pyplot as plt"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploratory data analysis (basic stats)\n",
							"\n",
							"Create Spark temporary views for sales and products.\n",
							"\n",
							"**IMPORTANT!** Make sure the name of the SQL pool (`SQLPool01` below) matches the name of your SQL pool.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"Seasonality"
									],
									"values": [
										"ProductId"
									],
									"yLabel": "ProductId",
									"xLabel": "Seasonality",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": {
									"ProductId": {
										"1": 2345398,
										"2": 810051,
										"3": 732812
									}
								},
								"isSummary": false,
								"previewData": {
									"rows": [
										{
											"ProductId": 3901,
											"Seasonality": 1,
											"Price": 14.08,
											"Profit": 3.57
										},
										{
											"ProductId": 3902,
											"Seasonality": 1,
											"Price": 31.3,
											"Profit": 7.85
										},
										{
											"ProductId": 3903,
											"Seasonality": 1,
											"Price": 29.39,
											"Profit": 7.83
										},
										{
											"ProductId": 3904,
											"Seasonality": 1,
											"Price": 20.64,
											"Profit": 5.92
										},
										{
											"ProductId": 3905,
											"Seasonality": 1,
											"Price": 31.22,
											"Profit": 11.66
										},
										{
											"ProductId": 3906,
											"Seasonality": 1,
											"Price": 23.69,
											"Profit": 6.5
										},
										{
											"ProductId": 3907,
											"Seasonality": 3,
											"Price": 29.05,
											"Profit": 10.1
										},
										{
											"ProductId": 3908,
											"Seasonality": 3,
											"Price": 18.5,
											"Profit": 4.75
										},
										{
											"ProductId": 3909,
											"Seasonality": 1,
											"Price": 26.09,
											"Profit": 7.7
										},
										{
											"ProductId": 3910,
											"Seasonality": 1,
											"Price": 25.87,
											"Profit": 6.74
										},
										{
											"ProductId": 3911,
											"Seasonality": 1,
											"Price": 34.56,
											"Profit": 8.97
										},
										{
											"ProductId": 3912,
											"Seasonality": 3,
											"Price": 21.28,
											"Profit": 4.94
										},
										{
											"ProductId": 3913,
											"Seasonality": 1,
											"Price": 22.16,
											"Profit": 5.72
										},
										{
											"ProductId": 3914,
											"Seasonality": 1,
											"Price": 33.19,
											"Profit": 10.3
										},
										{
											"ProductId": 3915,
											"Seasonality": 1,
											"Price": 36.84,
											"Profit": 10.62
										},
										{
											"ProductId": 3916,
											"Seasonality": 1,
											"Price": 33.23,
											"Profit": 11.25
										},
										{
											"ProductId": 3917,
											"Seasonality": 3,
											"Price": 31.41,
											"Profit": 10.65
										},
										{
											"ProductId": 3918,
											"Seasonality": 3,
											"Price": 24.82,
											"Profit": 6.92
										},
										{
											"ProductId": 3919,
											"Seasonality": 2,
											"Price": 28.91,
											"Profit": 9.54
										},
										{
											"ProductId": 3920,
											"Seasonality": 1,
											"Price": 26.62,
											"Profit": 6.8
										},
										{
											"ProductId": 3921,
											"Seasonality": 1,
											"Price": 20.87,
											"Profit": 7.15
										},
										{
											"ProductId": 3922,
											"Seasonality": 1,
											"Price": 32.73,
											"Profit": 9.29
										},
										{
											"ProductId": 3923,
											"Seasonality": 1,
											"Price": 29.1,
											"Profit": 8.39
										},
										{
											"ProductId": 3924,
											"Seasonality": 1,
											"Price": 19.41,
											"Profit": 6.42
										},
										{
											"ProductId": 3925,
											"Seasonality": 1,
											"Price": 26.35,
											"Profit": 7.71
										},
										{
											"ProductId": 3926,
											"Seasonality": 1,
											"Price": 29.3,
											"Profit": 8.89
										},
										{
											"ProductId": 3927,
											"Seasonality": 1,
											"Price": 34.03,
											"Profit": 10.58
										},
										{
											"ProductId": 3928,
											"Seasonality": 3,
											"Price": 34.3,
											"Profit": 10.1
										},
										{
											"ProductId": 3929,
											"Seasonality": 3,
											"Price": 40,
											"Profit": 14.16
										},
										{
											"ProductId": 3930,
											"Seasonality": 2,
											"Price": 29.02,
											"Profit": 9.99
										},
										{
											"ProductId": 3931,
											"Seasonality": 1,
											"Price": 29.56,
											"Profit": 7.88
										},
										{
											"ProductId": 3932,
											"Seasonality": 1,
											"Price": 28.78,
											"Profit": 7.66
										},
										{
											"ProductId": 3933,
											"Seasonality": 3,
											"Price": 14.68,
											"Profit": 4.46
										},
										{
											"ProductId": 3934,
											"Seasonality": 1,
											"Price": 32.7,
											"Profit": 8.61
										},
										{
											"ProductId": 3935,
											"Seasonality": 1,
											"Price": 28.85,
											"Profit": 12.05
										},
										{
											"ProductId": 3936,
											"Seasonality": 2,
											"Price": 32.01,
											"Profit": 10.46
										},
										{
											"ProductId": 3937,
											"Seasonality": 1,
											"Price": 25.79,
											"Profit": 7.11
										},
										{
											"ProductId": 3938,
											"Seasonality": 3,
											"Price": 26.02,
											"Profit": 6.61
										},
										{
											"ProductId": 3939,
											"Seasonality": 1,
											"Price": 24.57,
											"Profit": 8.04
										},
										{
											"ProductId": 3940,
											"Seasonality": 1,
											"Price": 29.62,
											"Profit": 10.11
										},
										{
											"ProductId": 3941,
											"Seasonality": 2,
											"Price": 27.81,
											"Profit": 10.17
										},
										{
											"ProductId": 3942,
											"Seasonality": 2,
											"Price": 23.74,
											"Profit": 6.94
										},
										{
											"ProductId": 3943,
											"Seasonality": 3,
											"Price": 33.97,
											"Profit": 8.97
										},
										{
											"ProductId": 3944,
											"Seasonality": 3,
											"Price": 31.76,
											"Profit": 9.78
										},
										{
											"ProductId": 3945,
											"Seasonality": 3,
											"Price": 22.96,
											"Profit": 6.1
										},
										{
											"ProductId": 3946,
											"Seasonality": 3,
											"Price": 25.54,
											"Profit": 9.31
										},
										{
											"ProductId": 3947,
											"Seasonality": 1,
											"Price": 30.53,
											"Profit": 9.57
										},
										{
											"ProductId": 3948,
											"Seasonality": 2,
											"Price": 34.92,
											"Profit": 11.5
										},
										{
											"ProductId": 3949,
											"Seasonality": 3,
											"Price": 28.19,
											"Profit": 8.73
										},
										{
											"ProductId": 3950,
											"Seasonality": 1,
											"Price": 32.23,
											"Profit": 7.49
										},
										{
											"ProductId": 3951,
											"Seasonality": 1,
											"Price": 38.73,
											"Profit": 10.36
										},
										{
											"ProductId": 3952,
											"Seasonality": 2,
											"Price": 33.66,
											"Profit": 10.52
										},
										{
											"ProductId": 3953,
											"Seasonality": 1,
											"Price": 28.8,
											"Profit": 8.92
										},
										{
											"ProductId": 3954,
											"Seasonality": 2,
											"Price": 27.88,
											"Profit": 8.4
										},
										{
											"ProductId": 3955,
											"Seasonality": 1,
											"Price": 27.41,
											"Profit": 7.8
										},
										{
											"ProductId": 3956,
											"Seasonality": 1,
											"Price": 26.24,
											"Profit": 8.06
										},
										{
											"ProductId": 3957,
											"Seasonality": 3,
											"Price": 28.33,
											"Profit": 8.28
										},
										{
											"ProductId": 3958,
											"Seasonality": 2,
											"Price": 30.08,
											"Profit": 10.18
										},
										{
											"ProductId": 3959,
											"Seasonality": 1,
											"Price": 25.86,
											"Profit": 8.87
										},
										{
											"ProductId": 3960,
											"Seasonality": 1,
											"Price": 22.99,
											"Profit": 6.31
										},
										{
											"ProductId": 3961,
											"Seasonality": 1,
											"Price": 35.88,
											"Profit": 8.87
										},
										{
											"ProductId": 3962,
											"Seasonality": 2,
											"Price": 20.99,
											"Profit": 6.29
										},
										{
											"ProductId": 3963,
											"Seasonality": 2,
											"Price": 35.53,
											"Profit": 11.97
										},
										{
											"ProductId": 3964,
											"Seasonality": 2,
											"Price": 19.2,
											"Profit": 5.85
										},
										{
											"ProductId": 3965,
											"Seasonality": 2,
											"Price": 31.25,
											"Profit": 9.69
										},
										{
											"ProductId": 3966,
											"Seasonality": 1,
											"Price": 15.17,
											"Profit": 4.75
										},
										{
											"ProductId": 3967,
											"Seasonality": 1,
											"Price": 22.88,
											"Profit": 6.74
										},
										{
											"ProductId": 3968,
											"Seasonality": 2,
											"Price": 27.24,
											"Profit": 8.03
										},
										{
											"ProductId": 3969,
											"Seasonality": 1,
											"Price": 27.36,
											"Profit": 9.11
										},
										{
											"ProductId": 3970,
											"Seasonality": 1,
											"Price": 26.98,
											"Profit": 8.31
										},
										{
											"ProductId": 3971,
											"Seasonality": 1,
											"Price": 31.01,
											"Profit": 11.44
										},
										{
											"ProductId": 3972,
											"Seasonality": 1,
											"Price": 38.22,
											"Profit": 12.1
										},
										{
											"ProductId": 3973,
											"Seasonality": 3,
											"Price": 29.62,
											"Profit": 8.48
										},
										{
											"ProductId": 3974,
											"Seasonality": 1,
											"Price": 32.58,
											"Profit": 10.64
										},
										{
											"ProductId": 3975,
											"Seasonality": 1,
											"Price": 20.42,
											"Profit": 6.95
										},
										{
											"ProductId": 3976,
											"Seasonality": 1,
											"Price": 22.44,
											"Profit": 5.29
										},
										{
											"ProductId": 3977,
											"Seasonality": 3,
											"Price": 31.78,
											"Profit": 8.91
										},
										{
											"ProductId": 3978,
											"Seasonality": 2,
											"Price": 31.51,
											"Profit": 10.99
										},
										{
											"ProductId": 3979,
											"Seasonality": 1,
											"Price": 18.27,
											"Profit": 4.93
										},
										{
											"ProductId": 3980,
											"Seasonality": 1,
											"Price": 34.85,
											"Profit": 13
										},
										{
											"ProductId": 3981,
											"Seasonality": 1,
											"Price": 26.52,
											"Profit": 8.51
										},
										{
											"ProductId": 3982,
											"Seasonality": 1,
											"Price": 21.57,
											"Profit": 6.92
										},
										{
											"ProductId": 3983,
											"Seasonality": 3,
											"Price": 36.37,
											"Profit": 8.92
										},
										{
											"ProductId": 3984,
											"Seasonality": 1,
											"Price": 22.06,
											"Profit": 5.97
										},
										{
											"ProductId": 3985,
											"Seasonality": 1,
											"Price": 25.45,
											"Profit": 6.98
										},
										{
											"ProductId": 3986,
											"Seasonality": 3,
											"Price": 34.64,
											"Profit": 10.53
										},
										{
											"ProductId": 3987,
											"Seasonality": 1,
											"Price": 31.79,
											"Profit": 11.26
										},
										{
											"ProductId": 3988,
											"Seasonality": 1,
											"Price": 21.11,
											"Profit": 6.46
										},
										{
											"ProductId": 3989,
											"Seasonality": 2,
											"Price": 25.26,
											"Profit": 10.47
										},
										{
											"ProductId": 3990,
											"Seasonality": 1,
											"Price": 25.45,
											"Profit": 8.85
										},
										{
											"ProductId": 3991,
											"Seasonality": 2,
											"Price": 23.66,
											"Profit": 8.7
										},
										{
											"ProductId": 3992,
											"Seasonality": 2,
											"Price": 19.87,
											"Profit": 7.18
										},
										{
											"ProductId": 3993,
											"Seasonality": 1,
											"Price": 6.65,
											"Profit": 1.92
										},
										{
											"ProductId": 3994,
											"Seasonality": 1,
											"Price": 22.47,
											"Profit": 6.1
										},
										{
											"ProductId": 3995,
											"Seasonality": 1,
											"Price": 24.84,
											"Profit": 7.51
										},
										{
											"ProductId": 3996,
											"Seasonality": 1,
											"Price": 23.53,
											"Profit": 7.49
										},
										{
											"ProductId": 3997,
											"Seasonality": 1,
											"Price": 40.43,
											"Profit": 13
										},
										{
											"ProductId": 3998,
											"Seasonality": 1,
											"Price": 23.07,
											"Profit": 6.82
										},
										{
											"ProductId": 3999,
											"Seasonality": 2,
											"Price": 23.78,
											"Profit": 6.95
										},
										{
											"ProductId": 4000,
											"Seasonality": 1,
											"Price": 38.94,
											"Profit": 12.87
										},
										{
											"ProductId": 4001,
											"Seasonality": 1,
											"Price": 24.24,
											"Profit": 7.09
										},
										{
											"ProductId": 4002,
											"Seasonality": 1,
											"Price": 20.38,
											"Profit": 6.78
										},
										{
											"ProductId": 4003,
											"Seasonality": 1,
											"Price": 20.45,
											"Profit": 6.54
										},
										{
											"ProductId": 4004,
											"Seasonality": 1,
											"Price": 29.77,
											"Profit": 8.17
										},
										{
											"ProductId": 4005,
											"Seasonality": 3,
											"Price": 25.88,
											"Profit": 8.55
										},
										{
											"ProductId": 4006,
											"Seasonality": 3,
											"Price": 31.34,
											"Profit": 8.3
										},
										{
											"ProductId": 4007,
											"Seasonality": 1,
											"Price": 31.25,
											"Profit": 9.53
										},
										{
											"ProductId": 4008,
											"Seasonality": 1,
											"Price": 26.73,
											"Profit": 8.19
										},
										{
											"ProductId": 4009,
											"Seasonality": 1,
											"Price": 27.57,
											"Profit": 8.38
										},
										{
											"ProductId": 4010,
											"Seasonality": 2,
											"Price": 30.43,
											"Profit": 10.12
										},
										{
											"ProductId": 4011,
											"Seasonality": 3,
											"Price": 36.74,
											"Profit": 12.84
										},
										{
											"ProductId": 4012,
											"Seasonality": 3,
											"Price": 35.92,
											"Profit": 13.01
										},
										{
											"ProductId": 4013,
											"Seasonality": 1,
											"Price": 38.22,
											"Profit": 12.41
										},
										{
											"ProductId": 4014,
											"Seasonality": 2,
											"Price": 29.99,
											"Profit": 6.8
										},
										{
											"ProductId": 4015,
											"Seasonality": 2,
											"Price": 31.72,
											"Profit": 9.86
										},
										{
											"ProductId": 4016,
											"Seasonality": 2,
											"Price": 33.06,
											"Profit": 11.12
										},
										{
											"ProductId": 4017,
											"Seasonality": 1,
											"Price": 31.62,
											"Profit": 10.01
										},
										{
											"ProductId": 4018,
											"Seasonality": 2,
											"Price": 24.94,
											"Profit": 7.03
										},
										{
											"ProductId": 4019,
											"Seasonality": 2,
											"Price": 27.3,
											"Profit": 6.09
										},
										{
											"ProductId": 4020,
											"Seasonality": 1,
											"Price": 19.03,
											"Profit": 6.58
										},
										{
											"ProductId": 4021,
											"Seasonality": 3,
											"Price": 31.12,
											"Profit": 9.37
										},
										{
											"ProductId": 4022,
											"Seasonality": 2,
											"Price": 21.59,
											"Profit": 6.23
										},
										{
											"ProductId": 4023,
											"Seasonality": 1,
											"Price": 36.93,
											"Profit": 7.69
										},
										{
											"ProductId": 4024,
											"Seasonality": 1,
											"Price": 25.97,
											"Profit": 6.98
										},
										{
											"ProductId": 4025,
											"Seasonality": 3,
											"Price": 24.55,
											"Profit": 7.69
										},
										{
											"ProductId": 4026,
											"Seasonality": 3,
											"Price": 30.54,
											"Profit": 11.15
										},
										{
											"ProductId": 4027,
											"Seasonality": 1,
											"Price": 23.3,
											"Profit": 8.01
										},
										{
											"ProductId": 4028,
											"Seasonality": 1,
											"Price": 25.13,
											"Profit": 7.02
										},
										{
											"ProductId": 4029,
											"Seasonality": 1,
											"Price": 31.57,
											"Profit": 9.27
										},
										{
											"ProductId": 4030,
											"Seasonality": 1,
											"Price": 33.55,
											"Profit": 11.43
										},
										{
											"ProductId": 4031,
											"Seasonality": 1,
											"Price": 25.26,
											"Profit": 8.74
										},
										{
											"ProductId": 4032,
											"Seasonality": 3,
											"Price": 24.45,
											"Profit": 6.77
										},
										{
											"ProductId": 4033,
											"Seasonality": 1,
											"Price": 37.14,
											"Profit": 12.28
										},
										{
											"ProductId": 4034,
											"Seasonality": 1,
											"Price": 28.31,
											"Profit": 9.21
										},
										{
											"ProductId": 4035,
											"Seasonality": 1,
											"Price": 33.14,
											"Profit": 8.95
										},
										{
											"ProductId": 4036,
											"Seasonality": 1,
											"Price": 21.53,
											"Profit": 6.8
										},
										{
											"ProductId": 4037,
											"Seasonality": 1,
											"Price": 27.63,
											"Profit": 7.88
										},
										{
											"ProductId": 4038,
											"Seasonality": 2,
											"Price": 26.07,
											"Profit": 7.77
										},
										{
											"ProductId": 4039,
											"Seasonality": 2,
											"Price": 28.3,
											"Profit": 8.5
										},
										{
											"ProductId": 4040,
											"Seasonality": 2,
											"Price": 28.68,
											"Profit": 9.43
										},
										{
											"ProductId": 4041,
											"Seasonality": 3,
											"Price": 28.12,
											"Profit": 8.72
										},
										{
											"ProductId": 4042,
											"Seasonality": 1,
											"Price": 29.38,
											"Profit": 11.07
										},
										{
											"ProductId": 4043,
											"Seasonality": 2,
											"Price": 30.16,
											"Profit": 9.67
										},
										{
											"ProductId": 4044,
											"Seasonality": 1,
											"Price": 12.56,
											"Profit": 3.13
										},
										{
											"ProductId": 4045,
											"Seasonality": 1,
											"Price": 30.86,
											"Profit": 9.3
										},
										{
											"ProductId": 4046,
											"Seasonality": 1,
											"Price": 28.64,
											"Profit": 9.88
										},
										{
											"ProductId": 4047,
											"Seasonality": 1,
											"Price": 25.08,
											"Profit": 6.77
										},
										{
											"ProductId": 4048,
											"Seasonality": 1,
											"Price": 35.11,
											"Profit": 12.22
										},
										{
											"ProductId": 4049,
											"Seasonality": 3,
											"Price": 33.53,
											"Profit": 11.11
										},
										{
											"ProductId": 4050,
											"Seasonality": 1,
											"Price": 22.34,
											"Profit": 6.04
										},
										{
											"ProductId": 4051,
											"Seasonality": 2,
											"Price": 21.06,
											"Profit": 6.48
										},
										{
											"ProductId": 4052,
											"Seasonality": 1,
											"Price": 23.59,
											"Profit": 6.68
										},
										{
											"ProductId": 4053,
											"Seasonality": 1,
											"Price": 30.97,
											"Profit": 9
										},
										{
											"ProductId": 4054,
											"Seasonality": 1,
											"Price": 31.13,
											"Profit": 11.33
										},
										{
											"ProductId": 4055,
											"Seasonality": 1,
											"Price": 22.84,
											"Profit": 7.11
										},
										{
											"ProductId": 4056,
											"Seasonality": 2,
											"Price": 14.72,
											"Profit": 4.87
										},
										{
											"ProductId": 4057,
											"Seasonality": 2,
											"Price": 30.35,
											"Profit": 10.07
										},
										{
											"ProductId": 4058,
											"Seasonality": 2,
											"Price": 25.34,
											"Profit": 7.96
										},
										{
											"ProductId": 4059,
											"Seasonality": 1,
											"Price": 20.42,
											"Profit": 6.4
										},
										{
											"ProductId": 4060,
											"Seasonality": 1,
											"Price": 28.94,
											"Profit": 6.95
										},
										{
											"ProductId": 4061,
											"Seasonality": 1,
											"Price": 28.59,
											"Profit": 8.68
										},
										{
											"ProductId": 4062,
											"Seasonality": 2,
											"Price": 37.98,
											"Profit": 9.94
										},
										{
											"ProductId": 4063,
											"Seasonality": 1,
											"Price": 20.56,
											"Profit": 7
										},
										{
											"ProductId": 4064,
											"Seasonality": 3,
											"Price": 21.99,
											"Profit": 3.8
										},
										{
											"ProductId": 4065,
											"Seasonality": 3,
											"Price": 29.57,
											"Profit": 11.38
										},
										{
											"ProductId": 4066,
											"Seasonality": 2,
											"Price": 19.84,
											"Profit": 4.54
										},
										{
											"ProductId": 4067,
											"Seasonality": 2,
											"Price": 23.66,
											"Profit": 6.86
										},
										{
											"ProductId": 4068,
											"Seasonality": 1,
											"Price": 30.97,
											"Profit": 8.9
										},
										{
											"ProductId": 4069,
											"Seasonality": 3,
											"Price": 29.16,
											"Profit": 7.18
										},
										{
											"ProductId": 4070,
											"Seasonality": 1,
											"Price": 35.76,
											"Profit": 9.16
										},
										{
											"ProductId": 4071,
											"Seasonality": 1,
											"Price": 33.3,
											"Profit": 8.98
										},
										{
											"ProductId": 4072,
											"Seasonality": 1,
											"Price": 27.38,
											"Profit": 9.08
										},
										{
											"ProductId": 4073,
											"Seasonality": 3,
											"Price": 22.3,
											"Profit": 7.57
										},
										{
											"ProductId": 4074,
											"Seasonality": 1,
											"Price": 29.39,
											"Profit": 7.32
										},
										{
											"ProductId": 4075,
											"Seasonality": 1,
											"Price": 15.83,
											"Profit": 4.78
										},
										{
											"ProductId": 4076,
											"Seasonality": 1,
											"Price": 23.02,
											"Profit": 6.43
										},
										{
											"ProductId": 4077,
											"Seasonality": 3,
											"Price": 23.87,
											"Profit": 9.24
										},
										{
											"ProductId": 4078,
											"Seasonality": 1,
											"Price": 25.5,
											"Profit": 8.49
										},
										{
											"ProductId": 4079,
											"Seasonality": 1,
											"Price": 19.04,
											"Profit": 5.94
										},
										{
											"ProductId": 4080,
											"Seasonality": 1,
											"Price": 25.46,
											"Profit": 8.76
										},
										{
											"ProductId": 4081,
											"Seasonality": 1,
											"Price": 19.52,
											"Profit": 5.59
										},
										{
											"ProductId": 4082,
											"Seasonality": 3,
											"Price": 22.39,
											"Profit": 7.1
										},
										{
											"ProductId": 4083,
											"Seasonality": 1,
											"Price": 27.64,
											"Profit": 7.9
										},
										{
											"ProductId": 4084,
											"Seasonality": 3,
											"Price": 36.87,
											"Profit": 11.43
										},
										{
											"ProductId": 4085,
											"Seasonality": 1,
											"Price": 32.75,
											"Profit": 9.92
										},
										{
											"ProductId": 4086,
											"Seasonality": 1,
											"Price": 15.36,
											"Profit": 4.61
										},
										{
											"ProductId": 4087,
											"Seasonality": 2,
											"Price": 24.24,
											"Profit": 6.75
										},
										{
											"ProductId": 4088,
											"Seasonality": 1,
											"Price": 26.96,
											"Profit": 8.67
										},
										{
											"ProductId": 4089,
											"Seasonality": 1,
											"Price": 29.04,
											"Profit": 7.89
										},
										{
											"ProductId": 4090,
											"Seasonality": 1,
											"Price": 26.43,
											"Profit": 6.87
										},
										{
											"ProductId": 4091,
											"Seasonality": 2,
											"Price": 24.96,
											"Profit": 6.61
										},
										{
											"ProductId": 4092,
											"Seasonality": 2,
											"Price": 33.37,
											"Profit": 9.04
										},
										{
											"ProductId": 4093,
											"Seasonality": 1,
											"Price": 26.7,
											"Profit": 8.78
										},
										{
											"ProductId": 4094,
											"Seasonality": 2,
											"Price": 19.49,
											"Profit": 5.13
										},
										{
											"ProductId": 4095,
											"Seasonality": 1,
											"Price": 36.62,
											"Profit": 10.91
										},
										{
											"ProductId": 4096,
											"Seasonality": 2,
											"Price": 25.55,
											"Profit": 8.63
										},
										{
											"ProductId": 4097,
											"Seasonality": 3,
											"Price": 23.33,
											"Profit": 5.65
										},
										{
											"ProductId": 4098,
											"Seasonality": 1,
											"Price": 22.73,
											"Profit": 7.11
										},
										{
											"ProductId": 4099,
											"Seasonality": 1,
											"Price": 31.25,
											"Profit": 8.14
										},
										{
											"ProductId": 4100,
											"Seasonality": 3,
											"Price": 29.86,
											"Profit": 9.02
										},
										{
											"ProductId": 4101,
											"Seasonality": 1,
											"Price": 25.83,
											"Profit": 9.75
										},
										{
											"ProductId": 4102,
											"Seasonality": 2,
											"Price": 18.9,
											"Profit": 6.1
										},
										{
											"ProductId": 4103,
											"Seasonality": 2,
											"Price": 27.02,
											"Profit": 7.43
										},
										{
											"ProductId": 4104,
											"Seasonality": 1,
											"Price": 34.07,
											"Profit": 10.67
										},
										{
											"ProductId": 4105,
											"Seasonality": 2,
											"Price": 28.77,
											"Profit": 7.89
										},
										{
											"ProductId": 4106,
											"Seasonality": 1,
											"Price": 30.14,
											"Profit": 9.56
										},
										{
											"ProductId": 4107,
											"Seasonality": 1,
											"Price": 26,
											"Profit": 6.45
										},
										{
											"ProductId": 4108,
											"Seasonality": 3,
											"Price": 34.83,
											"Profit": 10.46
										},
										{
											"ProductId": 4109,
											"Seasonality": 1,
											"Price": 29.74,
											"Profit": 7.55
										},
										{
											"ProductId": 4110,
											"Seasonality": 1,
											"Price": 23.81,
											"Profit": 6.46
										},
										{
											"ProductId": 4111,
											"Seasonality": 2,
											"Price": 32.06,
											"Profit": 9.27
										},
										{
											"ProductId": 4112,
											"Seasonality": 2,
											"Price": 29.44,
											"Profit": 8.87
										},
										{
											"ProductId": 4113,
											"Seasonality": 1,
											"Price": 23.29,
											"Profit": 6.19
										},
										{
											"ProductId": 4114,
											"Seasonality": 2,
											"Price": 25.17,
											"Profit": 8.9
										},
										{
											"ProductId": 4115,
											"Seasonality": 1,
											"Price": 25.75,
											"Profit": 7.9
										},
										{
											"ProductId": 4116,
											"Seasonality": 3,
											"Price": 25.74,
											"Profit": 8.86
										},
										{
											"ProductId": 4117,
											"Seasonality": 1,
											"Price": 26.15,
											"Profit": 8.84
										},
										{
											"ProductId": 4118,
											"Seasonality": 1,
											"Price": 24.17,
											"Profit": 6.71
										},
										{
											"ProductId": 4119,
											"Seasonality": 1,
											"Price": 28.72,
											"Profit": 9.12
										},
										{
											"ProductId": 4120,
											"Seasonality": 1,
											"Price": 17.63,
											"Profit": 5.58
										},
										{
											"ProductId": 4121,
											"Seasonality": 2,
											"Price": 30.14,
											"Profit": 7.68
										},
										{
											"ProductId": 4122,
											"Seasonality": 1,
											"Price": 32.31,
											"Profit": 10.28
										},
										{
											"ProductId": 4123,
											"Seasonality": 2,
											"Price": 29.77,
											"Profit": 7.15
										},
										{
											"ProductId": 4124,
											"Seasonality": 1,
											"Price": 27.49,
											"Profit": 7.47
										},
										{
											"ProductId": 4125,
											"Seasonality": 2,
											"Price": 34.12,
											"Profit": 11.65
										},
										{
											"ProductId": 4126,
											"Seasonality": 2,
											"Price": 29.1,
											"Profit": 9.35
										},
										{
											"ProductId": 4127,
											"Seasonality": 3,
											"Price": 26.59,
											"Profit": 9.5
										},
										{
											"ProductId": 4128,
											"Seasonality": 1,
											"Price": 28.28,
											"Profit": 9.14
										},
										{
											"ProductId": 4129,
											"Seasonality": 1,
											"Price": 28.02,
											"Profit": 7.3
										},
										{
											"ProductId": 4130,
											"Seasonality": 2,
											"Price": 23.8,
											"Profit": 7.02
										},
										{
											"ProductId": 4131,
											"Seasonality": 3,
											"Price": 27.51,
											"Profit": 8.46
										},
										{
											"ProductId": 4132,
											"Seasonality": 1,
											"Price": 39.3,
											"Profit": 9.44
										},
										{
											"ProductId": 4133,
											"Seasonality": 3,
											"Price": 36.94,
											"Profit": 13.29
										},
										{
											"ProductId": 4134,
											"Seasonality": 1,
											"Price": 27.6,
											"Profit": 9.24
										},
										{
											"ProductId": 4135,
											"Seasonality": 2,
											"Price": 32.05,
											"Profit": 8.59
										},
										{
											"ProductId": 4136,
											"Seasonality": 1,
											"Price": 23.73,
											"Profit": 7.12
										},
										{
											"ProductId": 4137,
											"Seasonality": 2,
											"Price": 27.47,
											"Profit": 8.6
										},
										{
											"ProductId": 4138,
											"Seasonality": 1,
											"Price": 19.56,
											"Profit": 5.88
										},
										{
											"ProductId": 4139,
											"Seasonality": 1,
											"Price": 28.24,
											"Profit": 8.57
										},
										{
											"ProductId": 4140,
											"Seasonality": 1,
											"Price": 30.78,
											"Profit": 9.18
										},
										{
											"ProductId": 4141,
											"Seasonality": 3,
											"Price": 19.84,
											"Profit": 6.5
										},
										{
											"ProductId": 4142,
											"Seasonality": 1,
											"Price": 30.84,
											"Profit": 10.26
										},
										{
											"ProductId": 4143,
											"Seasonality": 1,
											"Price": 22.22,
											"Profit": 5.32
										},
										{
											"ProductId": 4144,
											"Seasonality": 1,
											"Price": 15.19,
											"Profit": 3.97
										},
										{
											"ProductId": 4145,
											"Seasonality": 3,
											"Price": 24.41,
											"Profit": 7.55
										},
										{
											"ProductId": 4146,
											"Seasonality": 1,
											"Price": 25.44,
											"Profit": 8.89
										},
										{
											"ProductId": 4147,
											"Seasonality": 2,
											"Price": 25.5,
											"Profit": 8.82
										},
										{
											"ProductId": 4148,
											"Seasonality": 2,
											"Price": 28.41,
											"Profit": 7.5
										},
										{
											"ProductId": 4149,
											"Seasonality": 2,
											"Price": 20.33,
											"Profit": 6.61
										},
										{
											"ProductId": 4150,
											"Seasonality": 1,
											"Price": 18.21,
											"Profit": 4.84
										},
										{
											"ProductId": 4151,
											"Seasonality": 3,
											"Price": 31.11,
											"Profit": 11.18
										},
										{
											"ProductId": 4152,
											"Seasonality": 3,
											"Price": 22.22,
											"Profit": 6.64
										},
										{
											"ProductId": 4153,
											"Seasonality": 2,
											"Price": 24.92,
											"Profit": 8.4
										},
										{
											"ProductId": 4154,
											"Seasonality": 1,
											"Price": 25.15,
											"Profit": 6.66
										},
										{
											"ProductId": 4155,
											"Seasonality": 1,
											"Price": 23.9,
											"Profit": 6.92
										},
										{
											"ProductId": 4156,
											"Seasonality": 1,
											"Price": 23.54,
											"Profit": 8.32
										},
										{
											"ProductId": 4157,
											"Seasonality": 1,
											"Price": 29.14,
											"Profit": 10.53
										},
										{
											"ProductId": 4158,
											"Seasonality": 2,
											"Price": 30.96,
											"Profit": 10.17
										},
										{
											"ProductId": 4159,
											"Seasonality": 3,
											"Price": 28.09,
											"Profit": 10.35
										},
										{
											"ProductId": 4160,
											"Seasonality": 1,
											"Price": 31.34,
											"Profit": 7.77
										},
										{
											"ProductId": 4161,
											"Seasonality": 3,
											"Price": 27.46,
											"Profit": 8.1
										},
										{
											"ProductId": 4162,
											"Seasonality": 3,
											"Price": 19.13,
											"Profit": 6.33
										},
										{
											"ProductId": 4163,
											"Seasonality": 1,
											"Price": 31.5,
											"Profit": 8.36
										},
										{
											"ProductId": 4164,
											"Seasonality": 3,
											"Price": 28.79,
											"Profit": 8.07
										},
										{
											"ProductId": 4165,
											"Seasonality": 2,
											"Price": 27.58,
											"Profit": 7.13
										},
										{
											"ProductId": 4166,
											"Seasonality": 3,
											"Price": 32.64,
											"Profit": 9.36
										},
										{
											"ProductId": 4167,
											"Seasonality": 1,
											"Price": 29.67,
											"Profit": 7.77
										},
										{
											"ProductId": 4168,
											"Seasonality": 2,
											"Price": 22.66,
											"Profit": 6.18
										},
										{
											"ProductId": 4169,
											"Seasonality": 3,
											"Price": 23.98,
											"Profit": 6.01
										},
										{
											"ProductId": 4170,
											"Seasonality": 2,
											"Price": 42.08,
											"Profit": 13.58
										},
										{
											"ProductId": 4171,
											"Seasonality": 1,
											"Price": 17.87,
											"Profit": 6.03
										},
										{
											"ProductId": 4172,
											"Seasonality": 1,
											"Price": 35.74,
											"Profit": 11.41
										},
										{
											"ProductId": 4173,
											"Seasonality": 1,
											"Price": 17.33,
											"Profit": 5.95
										},
										{
											"ProductId": 4174,
											"Seasonality": 2,
											"Price": 34.24,
											"Profit": 11.86
										},
										{
											"ProductId": 4175,
											"Seasonality": 1,
											"Price": 30.3,
											"Profit": 7.82
										},
										{
											"ProductId": 4176,
											"Seasonality": 1,
											"Price": 23.69,
											"Profit": 7.15
										},
										{
											"ProductId": 4177,
											"Seasonality": 1,
											"Price": 29.71,
											"Profit": 8.13
										},
										{
											"ProductId": 4178,
											"Seasonality": 1,
											"Price": 30.59,
											"Profit": 9.01
										},
										{
											"ProductId": 4179,
											"Seasonality": 2,
											"Price": 29.62,
											"Profit": 9.22
										},
										{
											"ProductId": 4180,
											"Seasonality": 1,
											"Price": 22.62,
											"Profit": 6.99
										},
										{
											"ProductId": 4181,
											"Seasonality": 1,
											"Price": 30.54,
											"Profit": 10.5
										},
										{
											"ProductId": 4182,
											"Seasonality": 1,
											"Price": 27.8,
											"Profit": 7.44
										},
										{
											"ProductId": 4183,
											"Seasonality": 1,
											"Price": 18.01,
											"Profit": 5.32
										},
										{
											"ProductId": 4184,
											"Seasonality": 1,
											"Price": 33.25,
											"Profit": 8.27
										},
										{
											"ProductId": 4185,
											"Seasonality": 2,
											"Price": 24.76,
											"Profit": 7.68
										},
										{
											"ProductId": 4186,
											"Seasonality": 2,
											"Price": 29.24,
											"Profit": 9.01
										},
										{
											"ProductId": 4187,
											"Seasonality": 1,
											"Price": 20.77,
											"Profit": 5.99
										},
										{
											"ProductId": 4188,
											"Seasonality": 1,
											"Price": 22.91,
											"Profit": 6.75
										},
										{
											"ProductId": 4189,
											"Seasonality": 1,
											"Price": 23.97,
											"Profit": 7.3
										},
										{
											"ProductId": 4190,
											"Seasonality": 1,
											"Price": 27.61,
											"Profit": 5.73
										},
										{
											"ProductId": 4191,
											"Seasonality": 1,
											"Price": 24.19,
											"Profit": 8
										},
										{
											"ProductId": 4192,
											"Seasonality": 3,
											"Price": 21.39,
											"Profit": 6.47
										},
										{
											"ProductId": 4193,
											"Seasonality": 1,
											"Price": 26.62,
											"Profit": 8.28
										},
										{
											"ProductId": 4194,
											"Seasonality": 1,
											"Price": 20.74,
											"Profit": 6.42
										},
										{
											"ProductId": 4195,
											"Seasonality": 3,
											"Price": 34.02,
											"Profit": 10.27
										},
										{
											"ProductId": 4196,
											"Seasonality": 1,
											"Price": 30.54,
											"Profit": 8.9
										},
										{
											"ProductId": 4197,
											"Seasonality": 1,
											"Price": 34.66,
											"Profit": 9.75
										},
										{
											"ProductId": 4198,
											"Seasonality": 1,
											"Price": 27.48,
											"Profit": 7.61
										},
										{
											"ProductId": 4199,
											"Seasonality": 2,
											"Price": 22.06,
											"Profit": 7.99
										},
										{
											"ProductId": 4200,
											"Seasonality": 1,
											"Price": 27.89,
											"Profit": 6.64
										},
										{
											"ProductId": 4201,
											"Seasonality": 1,
											"Price": 23.19,
											"Profit": 6.75
										},
										{
											"ProductId": 4202,
											"Seasonality": 1,
											"Price": 29.98,
											"Profit": 8.06
										},
										{
											"ProductId": 4203,
											"Seasonality": 1,
											"Price": 19.71,
											"Profit": 6.67
										},
										{
											"ProductId": 4204,
											"Seasonality": 2,
											"Price": 22.74,
											"Profit": 5.99
										},
										{
											"ProductId": 4205,
											"Seasonality": 1,
											"Price": 19.99,
											"Profit": 5.97
										},
										{
											"ProductId": 4206,
											"Seasonality": 1,
											"Price": 23.52,
											"Profit": 8.81
										},
										{
											"ProductId": 4207,
											"Seasonality": 1,
											"Price": 25.99,
											"Profit": 8.35
										},
										{
											"ProductId": 4208,
											"Seasonality": 2,
											"Price": 30.51,
											"Profit": 11.62
										},
										{
											"ProductId": 4209,
											"Seasonality": 2,
											"Price": 32.49,
											"Profit": 9.36
										},
										{
											"ProductId": 4210,
											"Seasonality": 2,
											"Price": 25.78,
											"Profit": 8.07
										},
										{
											"ProductId": 4211,
											"Seasonality": 1,
											"Price": 21.74,
											"Profit": 6.82
										},
										{
											"ProductId": 4212,
											"Seasonality": 1,
											"Price": 34.28,
											"Profit": 6.8
										},
										{
											"ProductId": 4213,
											"Seasonality": 3,
											"Price": 37.87,
											"Profit": 9.95
										},
										{
											"ProductId": 4214,
											"Seasonality": 1,
											"Price": 25.29,
											"Profit": 7.43
										},
										{
											"ProductId": 4215,
											"Seasonality": 1,
											"Price": 18.48,
											"Profit": 5.81
										},
										{
											"ProductId": 4216,
											"Seasonality": 1,
											"Price": 29.24,
											"Profit": 8.14
										},
										{
											"ProductId": 4217,
											"Seasonality": 1,
											"Price": 36.35,
											"Profit": 12.24
										},
										{
											"ProductId": 4218,
											"Seasonality": 3,
											"Price": 31.89,
											"Profit": 8.9
										},
										{
											"ProductId": 4219,
											"Seasonality": 2,
											"Price": 34.1,
											"Profit": 7.63
										},
										{
											"ProductId": 4220,
											"Seasonality": 1,
											"Price": 25.42,
											"Profit": 7.3
										},
										{
											"ProductId": 4221,
											"Seasonality": 1,
											"Price": 24.77,
											"Profit": 8.7
										},
										{
											"ProductId": 4222,
											"Seasonality": 2,
											"Price": 31.17,
											"Profit": 10.53
										},
										{
											"ProductId": 4223,
											"Seasonality": 2,
											"Price": 23.84,
											"Profit": 7.64
										},
										{
											"ProductId": 4224,
											"Seasonality": 1,
											"Price": 19.68,
											"Profit": 5.79
										},
										{
											"ProductId": 4225,
											"Seasonality": 1,
											"Price": 34.56,
											"Profit": 9.8
										},
										{
											"ProductId": 4226,
											"Seasonality": 1,
											"Price": 24.78,
											"Profit": 8.41
										},
										{
											"ProductId": 4227,
											"Seasonality": 2,
											"Price": 23.1,
											"Profit": 7.25
										},
										{
											"ProductId": 4228,
											"Seasonality": 1,
											"Price": 40.22,
											"Profit": 10.75
										},
										{
											"ProductId": 4229,
											"Seasonality": 1,
											"Price": 32.2,
											"Profit": 10.13
										},
										{
											"ProductId": 4230,
											"Seasonality": 2,
											"Price": 35.05,
											"Profit": 8.69
										},
										{
											"ProductId": 4231,
											"Seasonality": 2,
											"Price": 21.47,
											"Profit": 6.74
										},
										{
											"ProductId": 4232,
											"Seasonality": 3,
											"Price": 24.43,
											"Profit": 7.1
										},
										{
											"ProductId": 4233,
											"Seasonality": 1,
											"Price": 18.62,
											"Profit": 6.07
										},
										{
											"ProductId": 4234,
											"Seasonality": 3,
											"Price": 28.34,
											"Profit": 9.88
										},
										{
											"ProductId": 4235,
											"Seasonality": 2,
											"Price": 27.77,
											"Profit": 7.56
										},
										{
											"ProductId": 4236,
											"Seasonality": 3,
											"Price": 28.27,
											"Profit": 7.9
										},
										{
											"ProductId": 4237,
											"Seasonality": 1,
											"Price": 32.54,
											"Profit": 10.34
										},
										{
											"ProductId": 4238,
											"Seasonality": 1,
											"Price": 28.08,
											"Profit": 7.37
										},
										{
											"ProductId": 4239,
											"Seasonality": 2,
											"Price": 20.62,
											"Profit": 5.93
										},
										{
											"ProductId": 4240,
											"Seasonality": 2,
											"Price": 32.66,
											"Profit": 9.4
										},
										{
											"ProductId": 4241,
											"Seasonality": 2,
											"Price": 24.95,
											"Profit": 6.56
										},
										{
											"ProductId": 4242,
											"Seasonality": 1,
											"Price": 24.1,
											"Profit": 8.47
										},
										{
											"ProductId": 4243,
											"Seasonality": 1,
											"Price": 35.52,
											"Profit": 9.97
										},
										{
											"ProductId": 4244,
											"Seasonality": 2,
											"Price": 26.41,
											"Profit": 8.55
										},
										{
											"ProductId": 4245,
											"Seasonality": 1,
											"Price": 30.77,
											"Profit": 8.1
										},
										{
											"ProductId": 4246,
											"Seasonality": 1,
											"Price": 26.58,
											"Profit": 8.14
										},
										{
											"ProductId": 4247,
											"Seasonality": 1,
											"Price": 18.51,
											"Profit": 5.42
										},
										{
											"ProductId": 4248,
											"Seasonality": 1,
											"Price": 29.56,
											"Profit": 8.24
										},
										{
											"ProductId": 4249,
											"Seasonality": 1,
											"Price": 34.87,
											"Profit": 11.35
										},
										{
											"ProductId": 4250,
											"Seasonality": 3,
											"Price": 28.43,
											"Profit": 8.58
										},
										{
											"ProductId": 4251,
											"Seasonality": 1,
											"Price": 22.1,
											"Profit": 7.39
										},
										{
											"ProductId": 4252,
											"Seasonality": 3,
											"Price": 26.23,
											"Profit": 7.81
										},
										{
											"ProductId": 4253,
											"Seasonality": 1,
											"Price": 21.85,
											"Profit": 7.37
										},
										{
											"ProductId": 4254,
											"Seasonality": 1,
											"Price": 27.41,
											"Profit": 9.85
										},
										{
											"ProductId": 4255,
											"Seasonality": 1,
											"Price": 32.14,
											"Profit": 9.99
										},
										{
											"ProductId": 4256,
											"Seasonality": 1,
											"Price": 26.47,
											"Profit": 7.54
										},
										{
											"ProductId": 4257,
											"Seasonality": 3,
											"Price": 22.95,
											"Profit": 6.65
										},
										{
											"ProductId": 4258,
											"Seasonality": 1,
											"Price": 28.61,
											"Profit": 9.36
										},
										{
											"ProductId": 4259,
											"Seasonality": 1,
											"Price": 28.36,
											"Profit": 11.76
										},
										{
											"ProductId": 4260,
											"Seasonality": 1,
											"Price": 38.65,
											"Profit": 12.69
										},
										{
											"ProductId": 4261,
											"Seasonality": 1,
											"Price": 30.19,
											"Profit": 7.92
										},
										{
											"ProductId": 4262,
											"Seasonality": 1,
											"Price": 21.49,
											"Profit": 6.65
										},
										{
											"ProductId": 4263,
											"Seasonality": 3,
											"Price": 32.47,
											"Profit": 10.31
										},
										{
											"ProductId": 4264,
											"Seasonality": 2,
											"Price": 23.74,
											"Profit": 6.33
										},
										{
											"ProductId": 4265,
											"Seasonality": 1,
											"Price": 29.92,
											"Profit": 8.4
										},
										{
											"ProductId": 4266,
											"Seasonality": 1,
											"Price": 21.78,
											"Profit": 5.91
										},
										{
											"ProductId": 4267,
											"Seasonality": 1,
											"Price": 24.85,
											"Profit": 5.66
										},
										{
											"ProductId": 4268,
											"Seasonality": 2,
											"Price": 22.32,
											"Profit": 6.94
										},
										{
											"ProductId": 4269,
											"Seasonality": 1,
											"Price": 26.44,
											"Profit": 8.3
										},
										{
											"ProductId": 4270,
											"Seasonality": 2,
											"Price": 28.77,
											"Profit": 9.9
										},
										{
											"ProductId": 4271,
											"Seasonality": 2,
											"Price": 26.89,
											"Profit": 7.38
										},
										{
											"ProductId": 4272,
											"Seasonality": 3,
											"Price": 22.8,
											"Profit": 6.59
										},
										{
											"ProductId": 4273,
											"Seasonality": 1,
											"Price": 26.21,
											"Profit": 7.56
										},
										{
											"ProductId": 4274,
											"Seasonality": 1,
											"Price": 23.61,
											"Profit": 6.59
										},
										{
											"ProductId": 4275,
											"Seasonality": 1,
											"Price": 31.51,
											"Profit": 10.39
										},
										{
											"ProductId": 4276,
											"Seasonality": 3,
											"Price": 28.97,
											"Profit": 9.19
										},
										{
											"ProductId": 4277,
											"Seasonality": 2,
											"Price": 24.55,
											"Profit": 7.25
										},
										{
											"ProductId": 4278,
											"Seasonality": 3,
											"Price": 15.58,
											"Profit": 4.37
										},
										{
											"ProductId": 4279,
											"Seasonality": 1,
											"Price": 24.32,
											"Profit": 7.03
										},
										{
											"ProductId": 4280,
											"Seasonality": 1,
											"Price": 19.07,
											"Profit": 6.52
										},
										{
											"ProductId": 4281,
											"Seasonality": 1,
											"Price": 25.65,
											"Profit": 8.63
										},
										{
											"ProductId": 4282,
											"Seasonality": 1,
											"Price": 35.58,
											"Profit": 13.25
										},
										{
											"ProductId": 4283,
											"Seasonality": 2,
											"Price": 30.41,
											"Profit": 9.79
										},
										{
											"ProductId": 4284,
											"Seasonality": 3,
											"Price": 31.22,
											"Profit": 8.66
										},
										{
											"ProductId": 4285,
											"Seasonality": 1,
											"Price": 30.53,
											"Profit": 8.46
										},
										{
											"ProductId": 4286,
											"Seasonality": 1,
											"Price": 26.66,
											"Profit": 7.09
										},
										{
											"ProductId": 4287,
											"Seasonality": 1,
											"Price": 23.07,
											"Profit": 8.2
										},
										{
											"ProductId": 4288,
											"Seasonality": 1,
											"Price": 32.71,
											"Profit": 9.21
										},
										{
											"ProductId": 4289,
											"Seasonality": 1,
											"Price": 27.89,
											"Profit": 8.31
										},
										{
											"ProductId": 4290,
											"Seasonality": 2,
											"Price": 29.74,
											"Profit": 9.64
										},
										{
											"ProductId": 4291,
											"Seasonality": 2,
											"Price": 31.13,
											"Profit": 10.05
										},
										{
											"ProductId": 4292,
											"Seasonality": 2,
											"Price": 28.91,
											"Profit": 8.05
										},
										{
											"ProductId": 4293,
											"Seasonality": 2,
											"Price": 22.38,
											"Profit": 7.14
										},
										{
											"ProductId": 4294,
											"Seasonality": 1,
											"Price": 31.44,
											"Profit": 8.05
										},
										{
											"ProductId": 4295,
											"Seasonality": 2,
											"Price": 26.51,
											"Profit": 6.21
										},
										{
											"ProductId": 4296,
											"Seasonality": 1,
											"Price": 24.28,
											"Profit": 7.94
										},
										{
											"ProductId": 4297,
											"Seasonality": 1,
											"Price": 30.56,
											"Profit": 8.55
										},
										{
											"ProductId": 4298,
											"Seasonality": 1,
											"Price": 25.25,
											"Profit": 6.73
										},
										{
											"ProductId": 4299,
											"Seasonality": 2,
											"Price": 29.8,
											"Profit": 7.8
										},
										{
											"ProductId": 4300,
											"Seasonality": 2,
											"Price": 31.85,
											"Profit": 8.46
										},
										{
											"ProductId": 4301,
											"Seasonality": 1,
											"Price": 22.05,
											"Profit": 7.32
										},
										{
											"ProductId": 4302,
											"Seasonality": 3,
											"Price": 23.43,
											"Profit": 6.36
										},
										{
											"ProductId": 4303,
											"Seasonality": 2,
											"Price": 36.19,
											"Profit": 12.99
										},
										{
											"ProductId": 4304,
											"Seasonality": 1,
											"Price": 28.78,
											"Profit": 9.42
										},
										{
											"ProductId": 4305,
											"Seasonality": 1,
											"Price": 23.57,
											"Profit": 7.34
										},
										{
											"ProductId": 4306,
											"Seasonality": 1,
											"Price": 32.92,
											"Profit": 8.42
										},
										{
											"ProductId": 4307,
											"Seasonality": 3,
											"Price": 37.27,
											"Profit": 12.38
										},
										{
											"ProductId": 4308,
											"Seasonality": 3,
											"Price": 29.33,
											"Profit": 7.54
										},
										{
											"ProductId": 4309,
											"Seasonality": 2,
											"Price": 22.12,
											"Profit": 6.47
										},
										{
											"ProductId": 4310,
											"Seasonality": 3,
											"Price": 18.14,
											"Profit": 5.6
										},
										{
											"ProductId": 4311,
											"Seasonality": 1,
											"Price": 32.52,
											"Profit": 8.5
										},
										{
											"ProductId": 4312,
											"Seasonality": 3,
											"Price": 36.76,
											"Profit": 12.13
										},
										{
											"ProductId": 4313,
											"Seasonality": 1,
											"Price": 27.75,
											"Profit": 9.24
										},
										{
											"ProductId": 4314,
											"Seasonality": 2,
											"Price": 13.7,
											"Profit": 4.05
										},
										{
											"ProductId": 4315,
											"Seasonality": 3,
											"Price": 23.67,
											"Profit": 6.66
										},
										{
											"ProductId": 4316,
											"Seasonality": 3,
											"Price": 24.55,
											"Profit": 7.24
										},
										{
											"ProductId": 4317,
											"Seasonality": 1,
											"Price": 25.08,
											"Profit": 6.93
										},
										{
											"ProductId": 4318,
											"Seasonality": 1,
											"Price": 36.46,
											"Profit": 9.82
										},
										{
											"ProductId": 4319,
											"Seasonality": 1,
											"Price": 36.01,
											"Profit": 9.09
										},
										{
											"ProductId": 4320,
											"Seasonality": 1,
											"Price": 19.67,
											"Profit": 5.49
										},
										{
											"ProductId": 4321,
											"Seasonality": 1,
											"Price": 28.04,
											"Profit": 6.47
										},
										{
											"ProductId": 4322,
											"Seasonality": 1,
											"Price": 28.5,
											"Profit": 9.33
										},
										{
											"ProductId": 4323,
											"Seasonality": 1,
											"Price": 27.53,
											"Profit": 9.26
										},
										{
											"ProductId": 4324,
											"Seasonality": 1,
											"Price": 22.79,
											"Profit": 8.65
										},
										{
											"ProductId": 4325,
											"Seasonality": 1,
											"Price": 29.66,
											"Profit": 5.85
										},
										{
											"ProductId": 4326,
											"Seasonality": 2,
											"Price": 23.03,
											"Profit": 6.82
										},
										{
											"ProductId": 4327,
											"Seasonality": 1,
											"Price": 30.17,
											"Profit": 10.07
										},
										{
											"ProductId": 4328,
											"Seasonality": 1,
											"Price": 28.56,
											"Profit": 7.44
										},
										{
											"ProductId": 4329,
											"Seasonality": 2,
											"Price": 18.36,
											"Profit": 4.81
										},
										{
											"ProductId": 4330,
											"Seasonality": 3,
											"Price": 22.32,
											"Profit": 5.69
										},
										{
											"ProductId": 4331,
											"Seasonality": 1,
											"Price": 28.81,
											"Profit": 7.68
										},
										{
											"ProductId": 4332,
											"Seasonality": 2,
											"Price": 27.54,
											"Profit": 9.2
										},
										{
											"ProductId": 4333,
											"Seasonality": 1,
											"Price": 35.3,
											"Profit": 10.21
										},
										{
											"ProductId": 4334,
											"Seasonality": 1,
											"Price": 19.77,
											"Profit": 6.4
										},
										{
											"ProductId": 4335,
											"Seasonality": 1,
											"Price": 20.27,
											"Profit": 5.82
										},
										{
											"ProductId": 4336,
											"Seasonality": 1,
											"Price": 33.93,
											"Profit": 10.13
										},
										{
											"ProductId": 4337,
											"Seasonality": 3,
											"Price": 34.4,
											"Profit": 8.48
										},
										{
											"ProductId": 4338,
											"Seasonality": 1,
											"Price": 26.42,
											"Profit": 6.76
										},
										{
											"ProductId": 4339,
											"Seasonality": 1,
											"Price": 12.62,
											"Profit": 4.13
										},
										{
											"ProductId": 4340,
											"Seasonality": 1,
											"Price": 22.68,
											"Profit": 6.9
										},
										{
											"ProductId": 4341,
											"Seasonality": 1,
											"Price": 36.37,
											"Profit": 9.58
										},
										{
											"ProductId": 4342,
											"Seasonality": 3,
											"Price": 21.39,
											"Profit": 5.18
										},
										{
											"ProductId": 4343,
											"Seasonality": 2,
											"Price": 35.81,
											"Profit": 9.25
										},
										{
											"ProductId": 4344,
											"Seasonality": 1,
											"Price": 20.55,
											"Profit": 5.68
										},
										{
											"ProductId": 4345,
											"Seasonality": 1,
											"Price": 35.87,
											"Profit": 8.62
										},
										{
											"ProductId": 4346,
											"Seasonality": 1,
											"Price": 28.27,
											"Profit": 7.37
										},
										{
											"ProductId": 4347,
											"Seasonality": 1,
											"Price": 35.28,
											"Profit": 10.69
										},
										{
											"ProductId": 4348,
											"Seasonality": 1,
											"Price": 26.63,
											"Profit": 8.03
										},
										{
											"ProductId": 4349,
											"Seasonality": 1,
											"Price": 27.72,
											"Profit": 8.62
										},
										{
											"ProductId": 4350,
											"Seasonality": 1,
											"Price": 29.81,
											"Profit": 8.02
										},
										{
											"ProductId": 4351,
											"Seasonality": 1,
											"Price": 25.86,
											"Profit": 9.58
										},
										{
											"ProductId": 4352,
											"Seasonality": 2,
											"Price": 31.73,
											"Profit": 9.57
										},
										{
											"ProductId": 4353,
											"Seasonality": 2,
											"Price": 36.3,
											"Profit": 9.32
										},
										{
											"ProductId": 4354,
											"Seasonality": 1,
											"Price": 34.07,
											"Profit": 11.33
										},
										{
											"ProductId": 4355,
											"Seasonality": 2,
											"Price": 38.22,
											"Profit": 11.66
										},
										{
											"ProductId": 4356,
											"Seasonality": 1,
											"Price": 25.16,
											"Profit": 8.06
										},
										{
											"ProductId": 4357,
											"Seasonality": 1,
											"Price": 23.13,
											"Profit": 7.34
										},
										{
											"ProductId": 4358,
											"Seasonality": 2,
											"Price": 33.52,
											"Profit": 10.56
										},
										{
											"ProductId": 4359,
											"Seasonality": 1,
											"Price": 25.23,
											"Profit": 6.67
										},
										{
											"ProductId": 4360,
											"Seasonality": 3,
											"Price": 19.21,
											"Profit": 5.35
										},
										{
											"ProductId": 4361,
											"Seasonality": 3,
											"Price": 19.87,
											"Profit": 5.55
										},
										{
											"ProductId": 4362,
											"Seasonality": 2,
											"Price": 18.64,
											"Profit": 5.47
										},
										{
											"ProductId": 4363,
											"Seasonality": 1,
											"Price": 32.99,
											"Profit": 9.51
										},
										{
											"ProductId": 4364,
											"Seasonality": 1,
											"Price": 16.15,
											"Profit": 5.36
										},
										{
											"ProductId": 4365,
											"Seasonality": 2,
											"Price": 29.09,
											"Profit": 8.09
										},
										{
											"ProductId": 4366,
											"Seasonality": 1,
											"Price": 22.21,
											"Profit": 6.1
										},
										{
											"ProductId": 4367,
											"Seasonality": 1,
											"Price": 33.86,
											"Profit": 11.96
										},
										{
											"ProductId": 4368,
											"Seasonality": 1,
											"Price": 35.04,
											"Profit": 9.13
										},
										{
											"ProductId": 4369,
											"Seasonality": 1,
											"Price": 18.51,
											"Profit": 5.73
										},
										{
											"ProductId": 4370,
											"Seasonality": 1,
											"Price": 32.85,
											"Profit": 8.81
										},
										{
											"ProductId": 4371,
											"Seasonality": 1,
											"Price": 22.57,
											"Profit": 5.59
										},
										{
											"ProductId": 4372,
											"Seasonality": 2,
											"Price": 18.67,
											"Profit": 4.98
										},
										{
											"ProductId": 4373,
											"Seasonality": 1,
											"Price": 17.68,
											"Profit": 5.04
										},
										{
											"ProductId": 4374,
											"Seasonality": 3,
											"Price": 21.77,
											"Profit": 5.79
										},
										{
											"ProductId": 4375,
											"Seasonality": 3,
											"Price": 24.9,
											"Profit": 7.38
										},
										{
											"ProductId": 4376,
											"Seasonality": 2,
											"Price": 25.06,
											"Profit": 6.38
										},
										{
											"ProductId": 4377,
											"Seasonality": 1,
											"Price": 27.15,
											"Profit": 9.44
										},
										{
											"ProductId": 4378,
											"Seasonality": 3,
											"Price": 25.91,
											"Profit": 6.68
										},
										{
											"ProductId": 4379,
											"Seasonality": 2,
											"Price": 29.78,
											"Profit": 7.42
										},
										{
											"ProductId": 4380,
											"Seasonality": 1,
											"Price": 32.2,
											"Profit": 8.61
										},
										{
											"ProductId": 4381,
											"Seasonality": 2,
											"Price": 22.71,
											"Profit": 8.18
										},
										{
											"ProductId": 4382,
											"Seasonality": 1,
											"Price": 29.74,
											"Profit": 9.62
										},
										{
											"ProductId": 4383,
											"Seasonality": 1,
											"Price": 24.02,
											"Profit": 6.26
										},
										{
											"ProductId": 4384,
											"Seasonality": 3,
											"Price": 26.99,
											"Profit": 9.58
										},
										{
											"ProductId": 4385,
											"Seasonality": 2,
											"Price": 28.31,
											"Profit": 7.73
										},
										{
											"ProductId": 4386,
											"Seasonality": 1,
											"Price": 34.49,
											"Profit": 12.01
										},
										{
											"ProductId": 4387,
											"Seasonality": 1,
											"Price": 30.33,
											"Profit": 10.3
										},
										{
											"ProductId": 4388,
											"Seasonality": 3,
											"Price": 27.1,
											"Profit": 8.18
										},
										{
											"ProductId": 4389,
											"Seasonality": 3,
											"Price": 33.76,
											"Profit": 11.63
										},
										{
											"ProductId": 4390,
											"Seasonality": 1,
											"Price": 26.11,
											"Profit": 8.22
										},
										{
											"ProductId": 4391,
											"Seasonality": 1,
											"Price": 33.09,
											"Profit": 9.58
										},
										{
											"ProductId": 4392,
											"Seasonality": 1,
											"Price": 22.98,
											"Profit": 5.91
										},
										{
											"ProductId": 4393,
											"Seasonality": 3,
											"Price": 26.2,
											"Profit": 7.42
										},
										{
											"ProductId": 4394,
											"Seasonality": 1,
											"Price": 24.81,
											"Profit": 8.62
										},
										{
											"ProductId": 4395,
											"Seasonality": 2,
											"Price": 23.67,
											"Profit": 6.84
										},
										{
											"ProductId": 4396,
											"Seasonality": 1,
											"Price": 26.66,
											"Profit": 8.11
										},
										{
											"ProductId": 4397,
											"Seasonality": 2,
											"Price": 29.16,
											"Profit": 9.62
										},
										{
											"ProductId": 4398,
											"Seasonality": 1,
											"Price": 30.88,
											"Profit": 11.09
										},
										{
											"ProductId": 4399,
											"Seasonality": 1,
											"Price": 32.68,
											"Profit": 8.78
										},
										{
											"ProductId": 4400,
											"Seasonality": 1,
											"Price": 28.47,
											"Profit": 7.52
										},
										{
											"ProductId": 4401,
											"Seasonality": 1,
											"Price": 19.54,
											"Profit": 5.72
										},
										{
											"ProductId": 4402,
											"Seasonality": 2,
											"Price": 19.16,
											"Profit": 6.49
										},
										{
											"ProductId": 4403,
											"Seasonality": 1,
											"Price": 21,
											"Profit": 6.35
										},
										{
											"ProductId": 4404,
											"Seasonality": 1,
											"Price": 30.63,
											"Profit": 8.83
										},
										{
											"ProductId": 4405,
											"Seasonality": 1,
											"Price": 40.21,
											"Profit": 12.47
										},
										{
											"ProductId": 4406,
											"Seasonality": 2,
											"Price": 37.14,
											"Profit": 12.49
										},
										{
											"ProductId": 4407,
											"Seasonality": 1,
											"Price": 32.16,
											"Profit": 8.99
										},
										{
											"ProductId": 4408,
											"Seasonality": 1,
											"Price": 33.45,
											"Profit": 12.27
										},
										{
											"ProductId": 4409,
											"Seasonality": 1,
											"Price": 20.52,
											"Profit": 6.22
										},
										{
											"ProductId": 4410,
											"Seasonality": 1,
											"Price": 25.87,
											"Profit": 7.5
										},
										{
											"ProductId": 4411,
											"Seasonality": 1,
											"Price": 29.1,
											"Profit": 9.06
										},
										{
											"ProductId": 4412,
											"Seasonality": 3,
											"Price": 32.4,
											"Profit": 9.63
										},
										{
											"ProductId": 4413,
											"Seasonality": 1,
											"Price": 28.92,
											"Profit": 9.49
										},
										{
											"ProductId": 4414,
											"Seasonality": 1,
											"Price": 22.5,
											"Profit": 8.35
										},
										{
											"ProductId": 4415,
											"Seasonality": 1,
											"Price": 36.41,
											"Profit": 12.17
										},
										{
											"ProductId": 4416,
											"Seasonality": 1,
											"Price": 27.79,
											"Profit": 9.08
										},
										{
											"ProductId": 4417,
											"Seasonality": 1,
											"Price": 18.14,
											"Profit": 4.22
										},
										{
											"ProductId": 4418,
											"Seasonality": 3,
											"Price": 15.94,
											"Profit": 4.85
										},
										{
											"ProductId": 4419,
											"Seasonality": 1,
											"Price": 25.54,
											"Profit": 9.33
										},
										{
											"ProductId": 4420,
											"Seasonality": 2,
											"Price": 30.57,
											"Profit": 9.4
										},
										{
											"ProductId": 4421,
											"Seasonality": 1,
											"Price": 31.04,
											"Profit": 10.11
										},
										{
											"ProductId": 4422,
											"Seasonality": 2,
											"Price": 26.85,
											"Profit": 8.02
										},
										{
											"ProductId": 4423,
											"Seasonality": 1,
											"Price": 36.27,
											"Profit": 10.59
										},
										{
											"ProductId": 4424,
											"Seasonality": 2,
											"Price": 31.2,
											"Profit": 8.79
										},
										{
											"ProductId": 4425,
											"Seasonality": 1,
											"Price": 35.5,
											"Profit": 10.6
										},
										{
											"ProductId": 4426,
											"Seasonality": 2,
											"Price": 28.67,
											"Profit": 8.43
										},
										{
											"ProductId": 4427,
											"Seasonality": 3,
											"Price": 25.69,
											"Profit": 7.44
										},
										{
											"ProductId": 4428,
											"Seasonality": 1,
											"Price": 26.31,
											"Profit": 7.43
										},
										{
											"ProductId": 4429,
											"Seasonality": 2,
											"Price": 36.15,
											"Profit": 10.96
										},
										{
											"ProductId": 4430,
											"Seasonality": 3,
											"Price": 26.8,
											"Profit": 7.71
										},
										{
											"ProductId": 4431,
											"Seasonality": 1,
											"Price": 24.47,
											"Profit": 10.27
										},
										{
											"ProductId": 4432,
											"Seasonality": 1,
											"Price": 28.35,
											"Profit": 8.33
										},
										{
											"ProductId": 4433,
											"Seasonality": 1,
											"Price": 18.16,
											"Profit": 5
										},
										{
											"ProductId": 4434,
											"Seasonality": 3,
											"Price": 24.22,
											"Profit": 7.03
										},
										{
											"ProductId": 4435,
											"Seasonality": 2,
											"Price": 29.08,
											"Profit": 9.14
										},
										{
											"ProductId": 4436,
											"Seasonality": 2,
											"Price": 24.85,
											"Profit": 7.37
										},
										{
											"ProductId": 4437,
											"Seasonality": 1,
											"Price": 20.83,
											"Profit": 6.43
										},
										{
											"ProductId": 4438,
											"Seasonality": 3,
											"Price": 23.15,
											"Profit": 6.55
										},
										{
											"ProductId": 4439,
											"Seasonality": 1,
											"Price": 23.2,
											"Profit": 7.59
										},
										{
											"ProductId": 4440,
											"Seasonality": 3,
											"Price": 19.66,
											"Profit": 6.03
										},
										{
											"ProductId": 4441,
											"Seasonality": 1,
											"Price": 17.55,
											"Profit": 5.77
										},
										{
											"ProductId": 4442,
											"Seasonality": 1,
											"Price": 21.54,
											"Profit": 7.11
										},
										{
											"ProductId": 4443,
											"Seasonality": 1,
											"Price": 27.28,
											"Profit": 7.88
										},
										{
											"ProductId": 4444,
											"Seasonality": 1,
											"Price": 30.86,
											"Profit": 8.71
										},
										{
											"ProductId": 4445,
											"Seasonality": 1,
											"Price": 30.32,
											"Profit": 10.14
										},
										{
											"ProductId": 4446,
											"Seasonality": 1,
											"Price": 21.13,
											"Profit": 4.75
										},
										{
											"ProductId": 4447,
											"Seasonality": 3,
											"Price": 14.94,
											"Profit": 3.64
										},
										{
											"ProductId": 4448,
											"Seasonality": 2,
											"Price": 16.76,
											"Profit": 5.68
										},
										{
											"ProductId": 4449,
											"Seasonality": 1,
											"Price": 28.06,
											"Profit": 8.78
										},
										{
											"ProductId": 4450,
											"Seasonality": 3,
											"Price": 30.91,
											"Profit": 9.82
										},
										{
											"ProductId": 4451,
											"Seasonality": 1,
											"Price": 23.33,
											"Profit": 6.89
										},
										{
											"ProductId": 4452,
											"Seasonality": 1,
											"Price": 25.57,
											"Profit": 6.99
										},
										{
											"ProductId": 4453,
											"Seasonality": 1,
											"Price": 29.82,
											"Profit": 11.29
										},
										{
											"ProductId": 4454,
											"Seasonality": 1,
											"Price": 23.28,
											"Profit": 5.64
										},
										{
											"ProductId": 4455,
											"Seasonality": 1,
											"Price": 29.99,
											"Profit": 9.55
										},
										{
											"ProductId": 4456,
											"Seasonality": 1,
											"Price": 28.22,
											"Profit": 6.71
										},
										{
											"ProductId": 4457,
											"Seasonality": 1,
											"Price": 21.11,
											"Profit": 6.19
										},
										{
											"ProductId": 4458,
											"Seasonality": 3,
											"Price": 34.27,
											"Profit": 11.62
										},
										{
											"ProductId": 4459,
											"Seasonality": 1,
											"Price": 25.4,
											"Profit": 6.43
										},
										{
											"ProductId": 4460,
											"Seasonality": 3,
											"Price": 24.99,
											"Profit": 6.22
										},
										{
											"ProductId": 4461,
											"Seasonality": 3,
											"Price": 29.22,
											"Profit": 8.56
										},
										{
											"ProductId": 4462,
											"Seasonality": 1,
											"Price": 31.03,
											"Profit": 9.91
										},
										{
											"ProductId": 4463,
											"Seasonality": 2,
											"Price": 27.95,
											"Profit": 9.16
										},
										{
											"ProductId": 4464,
											"Seasonality": 1,
											"Price": 38.96,
											"Profit": 10.57
										},
										{
											"ProductId": 4465,
											"Seasonality": 2,
											"Price": 25.01,
											"Profit": 8
										},
										{
											"ProductId": 4466,
											"Seasonality": 1,
											"Price": 26.43,
											"Profit": 7.86
										},
										{
											"ProductId": 4467,
											"Seasonality": 3,
											"Price": 33.38,
											"Profit": 9.13
										},
										{
											"ProductId": 4468,
											"Seasonality": 2,
											"Price": 23.55,
											"Profit": 7.31
										},
										{
											"ProductId": 4469,
											"Seasonality": 3,
											"Price": 27.79,
											"Profit": 7.92
										},
										{
											"ProductId": 4470,
											"Seasonality": 1,
											"Price": 36.68,
											"Profit": 12.28
										},
										{
											"ProductId": 4471,
											"Seasonality": 1,
											"Price": 25.56,
											"Profit": 9.07
										},
										{
											"ProductId": 4472,
											"Seasonality": 3,
											"Price": 25.26,
											"Profit": 7.23
										},
										{
											"ProductId": 4473,
											"Seasonality": 2,
											"Price": 34.67,
											"Profit": 10.32
										},
										{
											"ProductId": 4474,
											"Seasonality": 1,
											"Price": 36.55,
											"Profit": 10.68
										},
										{
											"ProductId": 4475,
											"Seasonality": 1,
											"Price": 21.66,
											"Profit": 6.12
										},
										{
											"ProductId": 4476,
											"Seasonality": 1,
											"Price": 29.38,
											"Profit": 10.73
										},
										{
											"ProductId": 4477,
											"Seasonality": 3,
											"Price": 42.34,
											"Profit": 14.46
										},
										{
											"ProductId": 4478,
											"Seasonality": 3,
											"Price": 24.63,
											"Profit": 6.85
										},
										{
											"ProductId": 4479,
											"Seasonality": 1,
											"Price": 30.42,
											"Profit": 10.2
										},
										{
											"ProductId": 4480,
											"Seasonality": 2,
											"Price": 27.09,
											"Profit": 6.58
										},
										{
											"ProductId": 4481,
											"Seasonality": 1,
											"Price": 33.76,
											"Profit": 8.59
										},
										{
											"ProductId": 4482,
											"Seasonality": 1,
											"Price": 31.62,
											"Profit": 10.37
										},
										{
											"ProductId": 4483,
											"Seasonality": 1,
											"Price": 30.86,
											"Profit": 9.4
										},
										{
											"ProductId": 4484,
											"Seasonality": 3,
											"Price": 23.6,
											"Profit": 6.77
										},
										{
											"ProductId": 4485,
											"Seasonality": 3,
											"Price": 23.18,
											"Profit": 5.01
										},
										{
											"ProductId": 4486,
											"Seasonality": 3,
											"Price": 27.51,
											"Profit": 7.84
										},
										{
											"ProductId": 4487,
											"Seasonality": 1,
											"Price": 36.54,
											"Profit": 10.2
										},
										{
											"ProductId": 4488,
											"Seasonality": 3,
											"Price": 24.24,
											"Profit": 7.25
										},
										{
											"ProductId": 4489,
											"Seasonality": 1,
											"Price": 22.26,
											"Profit": 5.38
										},
										{
											"ProductId": 4490,
											"Seasonality": 1,
											"Price": 32.1,
											"Profit": 8.35
										},
										{
											"ProductId": 4491,
											"Seasonality": 1,
											"Price": 26.52,
											"Profit": 8.59
										},
										{
											"ProductId": 4492,
											"Seasonality": 1,
											"Price": 17.51,
											"Profit": 5.75
										},
										{
											"ProductId": 4493,
											"Seasonality": 1,
											"Price": 28.81,
											"Profit": 9.11
										},
										{
											"ProductId": 4494,
											"Seasonality": 3,
											"Price": 24.39,
											"Profit": 6.67
										},
										{
											"ProductId": 4495,
											"Seasonality": 3,
											"Price": 26.8,
											"Profit": 6.87
										},
										{
											"ProductId": 4496,
											"Seasonality": 1,
											"Price": 23.94,
											"Profit": 5.91
										},
										{
											"ProductId": 4497,
											"Seasonality": 1,
											"Price": 36.24,
											"Profit": 10.54
										},
										{
											"ProductId": 4498,
											"Seasonality": 1,
											"Price": 29.95,
											"Profit": 10.06
										},
										{
											"ProductId": 4499,
											"Seasonality": 1,
											"Price": 29.28,
											"Profit": 8.86
										},
										{
											"ProductId": 4500,
											"Seasonality": 1,
											"Price": 33.11,
											"Profit": 8.71
										},
										{
											"ProductId": 4501,
											"Seasonality": 3,
											"Price": 35.03,
											"Profit": 10.58
										},
										{
											"ProductId": 4502,
											"Seasonality": 3,
											"Price": 32.02,
											"Profit": 10.67
										},
										{
											"ProductId": 4503,
											"Seasonality": 2,
											"Price": 30.02,
											"Profit": 11.01
										},
										{
											"ProductId": 4504,
											"Seasonality": 1,
											"Price": 26.63,
											"Profit": 8.37
										},
										{
											"ProductId": 4505,
											"Seasonality": 3,
											"Price": 28.89,
											"Profit": 7.22
										},
										{
											"ProductId": 4506,
											"Seasonality": 3,
											"Price": 18.95,
											"Profit": 5.81
										},
										{
											"ProductId": 4507,
											"Seasonality": 2,
											"Price": 21.28,
											"Profit": 7.02
										},
										{
											"ProductId": 4508,
											"Seasonality": 3,
											"Price": 20.27,
											"Profit": 6.49
										},
										{
											"ProductId": 4509,
											"Seasonality": 1,
											"Price": 27.83,
											"Profit": 8.67
										},
										{
											"ProductId": 4510,
											"Seasonality": 3,
											"Price": 26.54,
											"Profit": 7.32
										},
										{
											"ProductId": 4511,
											"Seasonality": 3,
											"Price": 32.75,
											"Profit": 9.99
										},
										{
											"ProductId": 4512,
											"Seasonality": 1,
											"Price": 28.71,
											"Profit": 9.48
										},
										{
											"ProductId": 4513,
											"Seasonality": 1,
											"Price": 30.21,
											"Profit": 8.28
										},
										{
											"ProductId": 4514,
											"Seasonality": 1,
											"Price": 24.36,
											"Profit": 7.49
										},
										{
											"ProductId": 4515,
											"Seasonality": 1,
											"Price": 25.17,
											"Profit": 7.85
										},
										{
											"ProductId": 4516,
											"Seasonality": 1,
											"Price": 20.02,
											"Profit": 6.74
										},
										{
											"ProductId": 4517,
											"Seasonality": 1,
											"Price": 34.06,
											"Profit": 10.88
										},
										{
											"ProductId": 4518,
											"Seasonality": 1,
											"Price": 23.51,
											"Profit": 4.95
										},
										{
											"ProductId": 4519,
											"Seasonality": 1,
											"Price": 20.07,
											"Profit": 7.45
										},
										{
											"ProductId": 4520,
											"Seasonality": 1,
											"Price": 29.67,
											"Profit": 9.52
										},
										{
											"ProductId": 4521,
											"Seasonality": 3,
											"Price": 20.55,
											"Profit": 5.88
										},
										{
											"ProductId": 4522,
											"Seasonality": 1,
											"Price": 41.95,
											"Profit": 11.45
										},
										{
											"ProductId": 4523,
											"Seasonality": 2,
											"Price": 25.37,
											"Profit": 7.91
										},
										{
											"ProductId": 4524,
											"Seasonality": 1,
											"Price": 21.33,
											"Profit": 5.8
										},
										{
											"ProductId": 4525,
											"Seasonality": 1,
											"Price": 15.69,
											"Profit": 4.57
										},
										{
											"ProductId": 4526,
											"Seasonality": 1,
											"Price": 27.93,
											"Profit": 8.92
										},
										{
											"ProductId": 4527,
											"Seasonality": 3,
											"Price": 23.49,
											"Profit": 8.24
										},
										{
											"ProductId": 4528,
											"Seasonality": 1,
											"Price": 36.18,
											"Profit": 10.9
										},
										{
											"ProductId": 4529,
											"Seasonality": 1,
											"Price": 34.24,
											"Profit": 11.71
										},
										{
											"ProductId": 4530,
											"Seasonality": 1,
											"Price": 21.09,
											"Profit": 5.81
										},
										{
											"ProductId": 4531,
											"Seasonality": 1,
											"Price": 24.74,
											"Profit": 6.39
										},
										{
											"ProductId": 4532,
											"Seasonality": 1,
											"Price": 27.18,
											"Profit": 9.67
										},
										{
											"ProductId": 4533,
											"Seasonality": 1,
											"Price": 31.91,
											"Profit": 8.93
										},
										{
											"ProductId": 4534,
											"Seasonality": 2,
											"Price": 19.8,
											"Profit": 6.69
										},
										{
											"ProductId": 4535,
											"Seasonality": 1,
											"Price": 24.72,
											"Profit": 5.68
										},
										{
											"ProductId": 4536,
											"Seasonality": 3,
											"Price": 32.77,
											"Profit": 9.8
										},
										{
											"ProductId": 4537,
											"Seasonality": 1,
											"Price": 24.97,
											"Profit": 8.99
										},
										{
											"ProductId": 4538,
											"Seasonality": 2,
											"Price": 23,
											"Profit": 7.91
										},
										{
											"ProductId": 4539,
											"Seasonality": 1,
											"Price": 29.46,
											"Profit": 7.86
										},
										{
											"ProductId": 4540,
											"Seasonality": 2,
											"Price": 30.28,
											"Profit": 10.35
										},
										{
											"ProductId": 4541,
											"Seasonality": 3,
											"Price": 21.02,
											"Profit": 5.91
										},
										{
											"ProductId": 4542,
											"Seasonality": 2,
											"Price": 20.36,
											"Profit": 6.28
										},
										{
											"ProductId": 4543,
											"Seasonality": 1,
											"Price": 32.41,
											"Profit": 9.29
										},
										{
											"ProductId": 4544,
											"Seasonality": 1,
											"Price": 24.52,
											"Profit": 5.85
										},
										{
											"ProductId": 4545,
											"Seasonality": 2,
											"Price": 25.24,
											"Profit": 9.08
										},
										{
											"ProductId": 4546,
											"Seasonality": 1,
											"Price": 25.88,
											"Profit": 7.68
										},
										{
											"ProductId": 4547,
											"Seasonality": 1,
											"Price": 26.95,
											"Profit": 7.95
										},
										{
											"ProductId": 4548,
											"Seasonality": 3,
											"Price": 34.33,
											"Profit": 13.04
										},
										{
											"ProductId": 4549,
											"Seasonality": 3,
											"Price": 17.75,
											"Profit": 5.16
										},
										{
											"ProductId": 4550,
											"Seasonality": 3,
											"Price": 31.82,
											"Profit": 10.56
										},
										{
											"ProductId": 4551,
											"Seasonality": 2,
											"Price": 31.02,
											"Profit": 8.74
										},
										{
											"ProductId": 4552,
											"Seasonality": 3,
											"Price": 29.48,
											"Profit": 7.87
										},
										{
											"ProductId": 4553,
											"Seasonality": 1,
											"Price": 23.89,
											"Profit": 7.73
										},
										{
											"ProductId": 4554,
											"Seasonality": 1,
											"Price": 21.83,
											"Profit": 6.85
										},
										{
											"ProductId": 4555,
											"Seasonality": 3,
											"Price": 27.59,
											"Profit": 7.98
										},
										{
											"ProductId": 4556,
											"Seasonality": 1,
											"Price": 31.1,
											"Profit": 8.04
										},
										{
											"ProductId": 4557,
											"Seasonality": 2,
											"Price": 25.65,
											"Profit": 7.09
										},
										{
											"ProductId": 4558,
											"Seasonality": 1,
											"Price": 31.17,
											"Profit": 8.66
										},
										{
											"ProductId": 4559,
											"Seasonality": 1,
											"Price": 28.49,
											"Profit": 7.15
										},
										{
											"ProductId": 4560,
											"Seasonality": 1,
											"Price": 29.6,
											"Profit": 8.06
										},
										{
											"ProductId": 4561,
											"Seasonality": 1,
											"Price": 32.78,
											"Profit": 10.18
										},
										{
											"ProductId": 4562,
											"Seasonality": 1,
											"Price": 14.17,
											"Profit": 4.51
										},
										{
											"ProductId": 4563,
											"Seasonality": 2,
											"Price": 18.55,
											"Profit": 5.95
										},
										{
											"ProductId": 4564,
											"Seasonality": 1,
											"Price": 27.98,
											"Profit": 6.78
										},
										{
											"ProductId": 4565,
											"Seasonality": 1,
											"Price": 31.92,
											"Profit": 9.15
										},
										{
											"ProductId": 4566,
											"Seasonality": 1,
											"Price": 22.09,
											"Profit": 5.97
										},
										{
											"ProductId": 4567,
											"Seasonality": 1,
											"Price": 22.15,
											"Profit": 6.32
										},
										{
											"ProductId": 4568,
											"Seasonality": 3,
											"Price": 25.93,
											"Profit": 10.03
										},
										{
											"ProductId": 4569,
											"Seasonality": 1,
											"Price": 29.59,
											"Profit": 10.75
										},
										{
											"ProductId": 4570,
											"Seasonality": 1,
											"Price": 24.29,
											"Profit": 6.44
										},
										{
											"ProductId": 4571,
											"Seasonality": 1,
											"Price": 32.35,
											"Profit": 9.11
										},
										{
											"ProductId": 4572,
											"Seasonality": 1,
											"Price": 26.05,
											"Profit": 8.82
										},
										{
											"ProductId": 4573,
											"Seasonality": 1,
											"Price": 24.34,
											"Profit": 7.9
										},
										{
											"ProductId": 4574,
											"Seasonality": 2,
											"Price": 30.83,
											"Profit": 9.21
										},
										{
											"ProductId": 4575,
											"Seasonality": 1,
											"Price": 28.14,
											"Profit": 7.96
										},
										{
											"ProductId": 4576,
											"Seasonality": 2,
											"Price": 29.88,
											"Profit": 7.78
										},
										{
											"ProductId": 4577,
											"Seasonality": 2,
											"Price": 25.03,
											"Profit": 7.91
										},
										{
											"ProductId": 4578,
											"Seasonality": 1,
											"Price": 35.02,
											"Profit": 8.61
										},
										{
											"ProductId": 4579,
											"Seasonality": 2,
											"Price": 30.97,
											"Profit": 9.5
										},
										{
											"ProductId": 4580,
											"Seasonality": 1,
											"Price": 27.26,
											"Profit": 8.84
										},
										{
											"ProductId": 4581,
											"Seasonality": 1,
											"Price": 20.84,
											"Profit": 5.92
										},
										{
											"ProductId": 4582,
											"Seasonality": 2,
											"Price": 29.76,
											"Profit": 8.39
										},
										{
											"ProductId": 4583,
											"Seasonality": 1,
											"Price": 27.78,
											"Profit": 8.47
										},
										{
											"ProductId": 4584,
											"Seasonality": 1,
											"Price": 22.3,
											"Profit": 7.65
										},
										{
											"ProductId": 4585,
											"Seasonality": 1,
											"Price": 28.81,
											"Profit": 8.5
										},
										{
											"ProductId": 4586,
											"Seasonality": 1,
											"Price": 23.5,
											"Profit": 6.31
										},
										{
											"ProductId": 4587,
											"Seasonality": 1,
											"Price": 39.42,
											"Profit": 11.96
										},
										{
											"ProductId": 4588,
											"Seasonality": 2,
											"Price": 18.61,
											"Profit": 6.36
										},
										{
											"ProductId": 4589,
											"Seasonality": 1,
											"Price": 28.91,
											"Profit": 9.69
										},
										{
											"ProductId": 4590,
											"Seasonality": 2,
											"Price": 32.21,
											"Profit": 9.78
										},
										{
											"ProductId": 4591,
											"Seasonality": 1,
											"Price": 33.04,
											"Profit": 11.25
										},
										{
											"ProductId": 4592,
											"Seasonality": 1,
											"Price": 31.9,
											"Profit": 7.31
										},
										{
											"ProductId": 4593,
											"Seasonality": 3,
											"Price": 23.27,
											"Profit": 4.73
										},
										{
											"ProductId": 4594,
											"Seasonality": 1,
											"Price": 23.4,
											"Profit": 5.86
										},
										{
											"ProductId": 4595,
											"Seasonality": 1,
											"Price": 28.61,
											"Profit": 9.79
										},
										{
											"ProductId": 4596,
											"Seasonality": 1,
											"Price": 29.65,
											"Profit": 8.37
										},
										{
											"ProductId": 4597,
											"Seasonality": 2,
											"Price": 31.11,
											"Profit": 11.16
										},
										{
											"ProductId": 4598,
											"Seasonality": 1,
											"Price": 30.23,
											"Profit": 10.17
										},
										{
											"ProductId": 4599,
											"Seasonality": 2,
											"Price": 31.89,
											"Profit": 6.74
										},
										{
											"ProductId": 4600,
											"Seasonality": 1,
											"Price": 22.83,
											"Profit": 6.36
										},
										{
											"ProductId": 4601,
											"Seasonality": 1,
											"Price": 25.33,
											"Profit": 5.87
										},
										{
											"ProductId": 4602,
											"Seasonality": 1,
											"Price": 23.17,
											"Profit": 8.02
										},
										{
											"ProductId": 4603,
											"Seasonality": 1,
											"Price": 30.23,
											"Profit": 8.77
										},
										{
											"ProductId": 4604,
											"Seasonality": 3,
											"Price": 23.66,
											"Profit": 6.81
										},
										{
											"ProductId": 4605,
											"Seasonality": 1,
											"Price": 20.33,
											"Profit": 5.69
										},
										{
											"ProductId": 4606,
											"Seasonality": 1,
											"Price": 20.43,
											"Profit": 4.98
										},
										{
											"ProductId": 4607,
											"Seasonality": 1,
											"Price": 27.33,
											"Profit": 9.4
										},
										{
											"ProductId": 4608,
											"Seasonality": 1,
											"Price": 32.37,
											"Profit": 6.91
										},
										{
											"ProductId": 4609,
											"Seasonality": 3,
											"Price": 20.21,
											"Profit": 6.29
										},
										{
											"ProductId": 4610,
											"Seasonality": 1,
											"Price": 30.91,
											"Profit": 8.49
										},
										{
											"ProductId": 4611,
											"Seasonality": 2,
											"Price": 28.07,
											"Profit": 8.45
										},
										{
											"ProductId": 4612,
											"Seasonality": 1,
											"Price": 24.92,
											"Profit": 5.76
										},
										{
											"ProductId": 4613,
											"Seasonality": 3,
											"Price": 26.8,
											"Profit": 8.28
										},
										{
											"ProductId": 4614,
											"Seasonality": 3,
											"Price": 30.97,
											"Profit": 9.83
										},
										{
											"ProductId": 4615,
											"Seasonality": 1,
											"Price": 42.96,
											"Profit": 10.73
										},
										{
											"ProductId": 4616,
											"Seasonality": 3,
											"Price": 32.82,
											"Profit": 11.94
										},
										{
											"ProductId": 4617,
											"Seasonality": 3,
											"Price": 27.43,
											"Profit": 6.91
										},
										{
											"ProductId": 4618,
											"Seasonality": 3,
											"Price": 28.35,
											"Profit": 8.88
										},
										{
											"ProductId": 4619,
											"Seasonality": 1,
											"Price": 40.97,
											"Profit": 13.93
										},
										{
											"ProductId": 4620,
											"Seasonality": 2,
											"Price": 27.38,
											"Profit": 8.16
										},
										{
											"ProductId": 4621,
											"Seasonality": 1,
											"Price": 32.93,
											"Profit": 10.79
										},
										{
											"ProductId": 4622,
											"Seasonality": 1,
											"Price": 24.33,
											"Profit": 7.42
										},
										{
											"ProductId": 4623,
											"Seasonality": 1,
											"Price": 30.49,
											"Profit": 7.64
										},
										{
											"ProductId": 4624,
											"Seasonality": 1,
											"Price": 23.27,
											"Profit": 8.04
										},
										{
											"ProductId": 4625,
											"Seasonality": 1,
											"Price": 38.12,
											"Profit": 14.3
										},
										{
											"ProductId": 4626,
											"Seasonality": 3,
											"Price": 21.22,
											"Profit": 6.15
										},
										{
											"ProductId": 4627,
											"Seasonality": 1,
											"Price": 31.53,
											"Profit": 9.44
										},
										{
											"ProductId": 4628,
											"Seasonality": 1,
											"Price": 25.1,
											"Profit": 8.01
										},
										{
											"ProductId": 4629,
											"Seasonality": 1,
											"Price": 35.98,
											"Profit": 11.07
										},
										{
											"ProductId": 4630,
											"Seasonality": 1,
											"Price": 27.7,
											"Profit": 8.09
										},
										{
											"ProductId": 4631,
											"Seasonality": 2,
											"Price": 24.66,
											"Profit": 8.31
										},
										{
											"ProductId": 4632,
											"Seasonality": 2,
											"Price": 33.36,
											"Profit": 12.64
										},
										{
											"ProductId": 4633,
											"Seasonality": 1,
											"Price": 26.21,
											"Profit": 7.29
										},
										{
											"ProductId": 4634,
											"Seasonality": 3,
											"Price": 18.92,
											"Profit": 5.4
										},
										{
											"ProductId": 4635,
											"Seasonality": 3,
											"Price": 30.47,
											"Profit": 10.33
										},
										{
											"ProductId": 4636,
											"Seasonality": 1,
											"Price": 28.9,
											"Profit": 7.28
										},
										{
											"ProductId": 4637,
											"Seasonality": 1,
											"Price": 25.72,
											"Profit": 8.62
										},
										{
											"ProductId": 4638,
											"Seasonality": 1,
											"Price": 14.85,
											"Profit": 3.8
										},
										{
											"ProductId": 4639,
											"Seasonality": 3,
											"Price": 18.57,
											"Profit": 4.17
										},
										{
											"ProductId": 4640,
											"Seasonality": 2,
											"Price": 32.75,
											"Profit": 9.58
										},
										{
											"ProductId": 4641,
											"Seasonality": 1,
											"Price": 33.46,
											"Profit": 11.44
										},
										{
											"ProductId": 4642,
											"Seasonality": 3,
											"Price": 35.57,
											"Profit": 10.56
										},
										{
											"ProductId": 4643,
											"Seasonality": 1,
											"Price": 27.69,
											"Profit": 8.41
										},
										{
											"ProductId": 4644,
											"Seasonality": 1,
											"Price": 32.94,
											"Profit": 9.77
										},
										{
											"ProductId": 4645,
											"Seasonality": 1,
											"Price": 23.69,
											"Profit": 7.31
										},
										{
											"ProductId": 4646,
											"Seasonality": 1,
											"Price": 24.05,
											"Profit": 7.54
										},
										{
											"ProductId": 4647,
											"Seasonality": 1,
											"Price": 33.51,
											"Profit": 9.63
										},
										{
											"ProductId": 4648,
											"Seasonality": 3,
											"Price": 23.6,
											"Profit": 8.25
										},
										{
											"ProductId": 4649,
											"Seasonality": 1,
											"Price": 27.84,
											"Profit": 8.58
										},
										{
											"ProductId": 4650,
											"Seasonality": 3,
											"Price": 18.31,
											"Profit": 6.1
										},
										{
											"ProductId": 4651,
											"Seasonality": 1,
											"Price": 32.8,
											"Profit": 12.33
										},
										{
											"ProductId": 4652,
											"Seasonality": 1,
											"Price": 18.58,
											"Profit": 5.15
										},
										{
											"ProductId": 4653,
											"Seasonality": 2,
											"Price": 25.97,
											"Profit": 8.41
										},
										{
											"ProductId": 4654,
											"Seasonality": 3,
											"Price": 35.09,
											"Profit": 10.62
										},
										{
											"ProductId": 4655,
											"Seasonality": 1,
											"Price": 33.07,
											"Profit": 9.82
										},
										{
											"ProductId": 4656,
											"Seasonality": 1,
											"Price": 31.84,
											"Profit": 10.42
										},
										{
											"ProductId": 4657,
											"Seasonality": 2,
											"Price": 36.96,
											"Profit": 14.12
										},
										{
											"ProductId": 4658,
											"Seasonality": 2,
											"Price": 31.8,
											"Profit": 11.07
										},
										{
											"ProductId": 4659,
											"Seasonality": 3,
											"Price": 26.47,
											"Profit": 8.33
										},
										{
											"ProductId": 4660,
											"Seasonality": 1,
											"Price": 15.89,
											"Profit": 4.88
										},
										{
											"ProductId": 4661,
											"Seasonality": 1,
											"Price": 29.53,
											"Profit": 7.4
										},
										{
											"ProductId": 4662,
											"Seasonality": 3,
											"Price": 36.4,
											"Profit": 9.83
										},
										{
											"ProductId": 4663,
											"Seasonality": 1,
											"Price": 25.49,
											"Profit": 7.9
										},
										{
											"ProductId": 4664,
											"Seasonality": 1,
											"Price": 27.3,
											"Profit": 7.72
										},
										{
											"ProductId": 4665,
											"Seasonality": 3,
											"Price": 31.63,
											"Profit": 9.96
										},
										{
											"ProductId": 4666,
											"Seasonality": 2,
											"Price": 14.57,
											"Profit": 4.1
										},
										{
											"ProductId": 4667,
											"Seasonality": 2,
											"Price": 28.13,
											"Profit": 9.3
										},
										{
											"ProductId": 4668,
											"Seasonality": 2,
											"Price": 37.27,
											"Profit": 11.45
										},
										{
											"ProductId": 4669,
											"Seasonality": 1,
											"Price": 20.41,
											"Profit": 5.2
										},
										{
											"ProductId": 4670,
											"Seasonality": 2,
											"Price": 30.93,
											"Profit": 9.05
										},
										{
											"ProductId": 4671,
											"Seasonality": 1,
											"Price": 30.29,
											"Profit": 9.57
										},
										{
											"ProductId": 4672,
											"Seasonality": 1,
											"Price": 9.46,
											"Profit": 3.09
										},
										{
											"ProductId": 4673,
											"Seasonality": 2,
											"Price": 22.96,
											"Profit": 8.17
										},
										{
											"ProductId": 4674,
											"Seasonality": 3,
											"Price": 12.32,
											"Profit": 3.74
										},
										{
											"ProductId": 4675,
											"Seasonality": 1,
											"Price": 34.52,
											"Profit": 11.38
										},
										{
											"ProductId": 4676,
											"Seasonality": 1,
											"Price": 36.15,
											"Profit": 12.15
										},
										{
											"ProductId": 4677,
											"Seasonality": 1,
											"Price": 20.98,
											"Profit": 5.94
										},
										{
											"ProductId": 4678,
											"Seasonality": 2,
											"Price": 32.23,
											"Profit": 9.59
										},
										{
											"ProductId": 4679,
											"Seasonality": 1,
											"Price": 35.88,
											"Profit": 10.83
										},
										{
											"ProductId": 4680,
											"Seasonality": 1,
											"Price": 36.77,
											"Profit": 10.33
										},
										{
											"ProductId": 2341,
											"Seasonality": 2,
											"Price": 28.88,
											"Profit": 6.95
										},
										{
											"ProductId": 2342,
											"Seasonality": 1,
											"Price": 28.23,
											"Profit": 9.09
										},
										{
											"ProductId": 2343,
											"Seasonality": 1,
											"Price": 23.19,
											"Profit": 6.86
										},
										{
											"ProductId": 2344,
											"Seasonality": 3,
											"Price": 29.49,
											"Profit": 8.53
										},
										{
											"ProductId": 2345,
											"Seasonality": 1,
											"Price": 24.21,
											"Profit": 7.62
										},
										{
											"ProductId": 2346,
											"Seasonality": 1,
											"Price": 27.81,
											"Profit": 9.12
										},
										{
											"ProductId": 2347,
											"Seasonality": 3,
											"Price": 24.07,
											"Profit": 8.52
										},
										{
											"ProductId": 2348,
											"Seasonality": 1,
											"Price": 26.91,
											"Profit": 7.64
										},
										{
											"ProductId": 2349,
											"Seasonality": 2,
											"Price": 30.9,
											"Profit": 8.81
										},
										{
											"ProductId": 2350,
											"Seasonality": 3,
											"Price": 27.55,
											"Profit": 7.78
										},
										{
											"ProductId": 2351,
											"Seasonality": 1,
											"Price": 26.29,
											"Profit": 9.56
										},
										{
											"ProductId": 2352,
											"Seasonality": 1,
											"Price": 30.49,
											"Profit": 9.24
										},
										{
											"ProductId": 2353,
											"Seasonality": 1,
											"Price": 33.4,
											"Profit": 11.94
										},
										{
											"ProductId": 2354,
											"Seasonality": 3,
											"Price": 22.53,
											"Profit": 6.89
										},
										{
											"ProductId": 2355,
											"Seasonality": 1,
											"Price": 24.42,
											"Profit": 6.3
										},
										{
											"ProductId": 2356,
											"Seasonality": 1,
											"Price": 24.59,
											"Profit": 7.03
										},
										{
											"ProductId": 2357,
											"Seasonality": 1,
											"Price": 27,
											"Profit": 6.82
										},
										{
											"ProductId": 2358,
											"Seasonality": 1,
											"Price": 23.29,
											"Profit": 8.31
										},
										{
											"ProductId": 2359,
											"Seasonality": 2,
											"Price": 35.44,
											"Profit": 9.76
										},
										{
											"ProductId": 2360,
											"Seasonality": 2,
											"Price": 30.26,
											"Profit": 10.15
										},
										{
											"ProductId": 2361,
											"Seasonality": 1,
											"Price": 29.62,
											"Profit": 7.56
										},
										{
											"ProductId": 2362,
											"Seasonality": 1,
											"Price": 35.52,
											"Profit": 10.34
										},
										{
											"ProductId": 2363,
											"Seasonality": 3,
											"Price": 26.67,
											"Profit": 8.26
										},
										{
											"ProductId": 2364,
											"Seasonality": 1,
											"Price": 34.87,
											"Profit": 9.76
										},
										{
											"ProductId": 2365,
											"Seasonality": 1,
											"Price": 22.73,
											"Profit": 5.07
										},
										{
											"ProductId": 2366,
											"Seasonality": 2,
											"Price": 27.11,
											"Profit": 7.88
										},
										{
											"ProductId": 2367,
											"Seasonality": 1,
											"Price": 32.45,
											"Profit": 9.43
										},
										{
											"ProductId": 2368,
											"Seasonality": 1,
											"Price": 20.17,
											"Profit": 5.96
										},
										{
											"ProductId": 2369,
											"Seasonality": 2,
											"Price": 25.69,
											"Profit": 7.15
										},
										{
											"ProductId": 2370,
											"Seasonality": 1,
											"Price": 17.37,
											"Profit": 4.85
										},
										{
											"ProductId": 2371,
											"Seasonality": 2,
											"Price": 31.04,
											"Profit": 9.73
										},
										{
											"ProductId": 2372,
											"Seasonality": 1,
											"Price": 33.38,
											"Profit": 8.38
										},
										{
											"ProductId": 2373,
											"Seasonality": 1,
											"Price": 31.28,
											"Profit": 11.14
										},
										{
											"ProductId": 2374,
											"Seasonality": 1,
											"Price": 16.18,
											"Profit": 5
										},
										{
											"ProductId": 2375,
											"Seasonality": 1,
											"Price": 33.64,
											"Profit": 9.81
										},
										{
											"ProductId": 2376,
											"Seasonality": 1,
											"Price": 36.29,
											"Profit": 10.35
										},
										{
											"ProductId": 2377,
											"Seasonality": 3,
											"Price": 29.56,
											"Profit": 7.62
										},
										{
											"ProductId": 2378,
											"Seasonality": 1,
											"Price": 21.05,
											"Profit": 5.85
										},
										{
											"ProductId": 2379,
											"Seasonality": 1,
											"Price": 27.37,
											"Profit": 9.99
										},
										{
											"ProductId": 2380,
											"Seasonality": 1,
											"Price": 29.64,
											"Profit": 11.66
										},
										{
											"ProductId": 2381,
											"Seasonality": 3,
											"Price": 25.68,
											"Profit": 8.18
										},
										{
											"ProductId": 2382,
											"Seasonality": 2,
											"Price": 27.43,
											"Profit": 7.42
										},
										{
											"ProductId": 2383,
											"Seasonality": 2,
											"Price": 28.68,
											"Profit": 7.87
										},
										{
											"ProductId": 2384,
											"Seasonality": 2,
											"Price": 33.55,
											"Profit": 10.4
										},
										{
											"ProductId": 2385,
											"Seasonality": 1,
											"Price": 34.2,
											"Profit": 7.59
										},
										{
											"ProductId": 2386,
											"Seasonality": 1,
											"Price": 28.01,
											"Profit": 8.91
										},
										{
											"ProductId": 2387,
											"Seasonality": 3,
											"Price": 24.85,
											"Profit": 8.61
										},
										{
											"ProductId": 2388,
											"Seasonality": 3,
											"Price": 25.92,
											"Profit": 9.54
										},
										{
											"ProductId": 2389,
											"Seasonality": 1,
											"Price": 31.52,
											"Profit": 7.29
										},
										{
											"ProductId": 2390,
											"Seasonality": 1,
											"Price": 27.41,
											"Profit": 8.49
										},
										{
											"ProductId": 2391,
											"Seasonality": 3,
											"Price": 12.08,
											"Profit": 3.85
										},
										{
											"ProductId": 2392,
											"Seasonality": 1,
											"Price": 32.9,
											"Profit": 9.47
										},
										{
											"ProductId": 2393,
											"Seasonality": 3,
											"Price": 17.65,
											"Profit": 4.23
										},
										{
											"ProductId": 2394,
											"Seasonality": 1,
											"Price": 25.83,
											"Profit": 8.74
										},
										{
											"ProductId": 2395,
											"Seasonality": 2,
											"Price": 30.33,
											"Profit": 12.54
										},
										{
											"ProductId": 2396,
											"Seasonality": 3,
											"Price": 23.53,
											"Profit": 6.3
										},
										{
											"ProductId": 2397,
											"Seasonality": 1,
											"Price": 26.42,
											"Profit": 10.09
										},
										{
											"ProductId": 2398,
											"Seasonality": 3,
											"Price": 23.35,
											"Profit": 6.89
										},
										{
											"ProductId": 2399,
											"Seasonality": 2,
											"Price": 17.34,
											"Profit": 5.42
										},
										{
											"ProductId": 2400,
											"Seasonality": 1,
											"Price": 18.25,
											"Profit": 5.64
										},
										{
											"ProductId": 2401,
											"Seasonality": 3,
											"Price": 20.75,
											"Profit": 6.8
										},
										{
											"ProductId": 2402,
											"Seasonality": 1,
											"Price": 25.55,
											"Profit": 7.79
										},
										{
											"ProductId": 2403,
											"Seasonality": 2,
											"Price": 43.43,
											"Profit": 15.28
										},
										{
											"ProductId": 2404,
											"Seasonality": 3,
											"Price": 18.85,
											"Profit": 6.13
										},
										{
											"ProductId": 2405,
											"Seasonality": 1,
											"Price": 34.5,
											"Profit": 9.49
										},
										{
											"ProductId": 2406,
											"Seasonality": 2,
											"Price": 29.83,
											"Profit": 8.54
										},
										{
											"ProductId": 2407,
											"Seasonality": 2,
											"Price": 28.28,
											"Profit": 8.4
										},
										{
											"ProductId": 2408,
											"Seasonality": 2,
											"Price": 26.91,
											"Profit": 8.7
										},
										{
											"ProductId": 2409,
											"Seasonality": 1,
											"Price": 30.29,
											"Profit": 7.46
										},
										{
											"ProductId": 2410,
											"Seasonality": 1,
											"Price": 28.23,
											"Profit": 9.25
										},
										{
											"ProductId": 2411,
											"Seasonality": 1,
											"Price": 11.86,
											"Profit": 4.35
										},
										{
											"ProductId": 2412,
											"Seasonality": 1,
											"Price": 26.76,
											"Profit": 8.35
										},
										{
											"ProductId": 2413,
											"Seasonality": 1,
											"Price": 25.61,
											"Profit": 6.12
										},
										{
											"ProductId": 2414,
											"Seasonality": 2,
											"Price": 25.97,
											"Profit": 6.38
										},
										{
											"ProductId": 2415,
											"Seasonality": 2,
											"Price": 19.27,
											"Profit": 6.16
										},
										{
											"ProductId": 2416,
											"Seasonality": 1,
											"Price": 33.38,
											"Profit": 10.24
										},
										{
											"ProductId": 2417,
											"Seasonality": 2,
											"Price": 33.61,
											"Profit": 11.72
										},
										{
											"ProductId": 2418,
											"Seasonality": 1,
											"Price": 25.27,
											"Profit": 9.01
										},
										{
											"ProductId": 2419,
											"Seasonality": 2,
											"Price": 26.12,
											"Profit": 7.98
										},
										{
											"ProductId": 2420,
											"Seasonality": 3,
											"Price": 21.97,
											"Profit": 6.26
										},
										{
											"ProductId": 2421,
											"Seasonality": 2,
											"Price": 27.15,
											"Profit": 6.17
										},
										{
											"ProductId": 2422,
											"Seasonality": 2,
											"Price": 26.98,
											"Profit": 8.4
										},
										{
											"ProductId": 2423,
											"Seasonality": 1,
											"Price": 28.31,
											"Profit": 7.29
										},
										{
											"ProductId": 2424,
											"Seasonality": 1,
											"Price": 25.77,
											"Profit": 8.35
										},
										{
											"ProductId": 2425,
											"Seasonality": 2,
											"Price": 36.05,
											"Profit": 11.32
										},
										{
											"ProductId": 2426,
											"Seasonality": 1,
											"Price": 24.26,
											"Profit": 8.89
										},
										{
											"ProductId": 2427,
											"Seasonality": 1,
											"Price": 26.62,
											"Profit": 7
										},
										{
											"ProductId": 2428,
											"Seasonality": 3,
											"Price": 36.19,
											"Profit": 12.4
										},
										{
											"ProductId": 2429,
											"Seasonality": 1,
											"Price": 38.2,
											"Profit": 10.07
										},
										{
											"ProductId": 2430,
											"Seasonality": 1,
											"Price": 20.49,
											"Profit": 5.43
										},
										{
											"ProductId": 2431,
											"Seasonality": 1,
											"Price": 28.69,
											"Profit": 7.5
										},
										{
											"ProductId": 2432,
											"Seasonality": 1,
											"Price": 19.83,
											"Profit": 5.98
										},
										{
											"ProductId": 2433,
											"Seasonality": 1,
											"Price": 22.76,
											"Profit": 7.2
										},
										{
											"ProductId": 2434,
											"Seasonality": 1,
											"Price": 28.21,
											"Profit": 8.72
										},
										{
											"ProductId": 2435,
											"Seasonality": 1,
											"Price": 38.05,
											"Profit": 10.47
										},
										{
											"ProductId": 2436,
											"Seasonality": 3,
											"Price": 11.59,
											"Profit": 2.76
										},
										{
											"ProductId": 2437,
											"Seasonality": 1,
											"Price": 20.84,
											"Profit": 5.44
										},
										{
											"ProductId": 2438,
											"Seasonality": 2,
											"Price": 19.44,
											"Profit": 5.45
										},
										{
											"ProductId": 2439,
											"Seasonality": 1,
											"Price": 30.54,
											"Profit": 8.13
										},
										{
											"ProductId": 2440,
											"Seasonality": 1,
											"Price": 19.33,
											"Profit": 5.15
										},
										{
											"ProductId": 2441,
											"Seasonality": 2,
											"Price": 32.09,
											"Profit": 9.81
										},
										{
											"ProductId": 2442,
											"Seasonality": 2,
											"Price": 38.22,
											"Profit": 13.56
										},
										{
											"ProductId": 2443,
											"Seasonality": 1,
											"Price": 34.78,
											"Profit": 11.1
										},
										{
											"ProductId": 2444,
											"Seasonality": 1,
											"Price": 28.42,
											"Profit": 6.88
										},
										{
											"ProductId": 2445,
											"Seasonality": 1,
											"Price": 30.92,
											"Profit": 8.78
										},
										{
											"ProductId": 2446,
											"Seasonality": 1,
											"Price": 30.1,
											"Profit": 8.73
										},
										{
											"ProductId": 2447,
											"Seasonality": 1,
											"Price": 28.99,
											"Profit": 10.44
										},
										{
											"ProductId": 2448,
											"Seasonality": 3,
											"Price": 24.21,
											"Profit": 9.15
										},
										{
											"ProductId": 2449,
											"Seasonality": 2,
											"Price": 37.29,
											"Profit": 10.26
										},
										{
											"ProductId": 2450,
											"Seasonality": 3,
											"Price": 43.98,
											"Profit": 10.93
										},
										{
											"ProductId": 2451,
											"Seasonality": 3,
											"Price": 32.05,
											"Profit": 8.75
										},
										{
											"ProductId": 2452,
											"Seasonality": 1,
											"Price": 31.59,
											"Profit": 8.45
										},
										{
											"ProductId": 2453,
											"Seasonality": 1,
											"Price": 33.9,
											"Profit": 7.24
										},
										{
											"ProductId": 2454,
											"Seasonality": 1,
											"Price": 27.26,
											"Profit": 7.14
										},
										{
											"ProductId": 2455,
											"Seasonality": 2,
											"Price": 30.71,
											"Profit": 10.29
										},
										{
											"ProductId": 2456,
											"Seasonality": 1,
											"Price": 22.98,
											"Profit": 7.63
										},
										{
											"ProductId": 2457,
											"Seasonality": 2,
											"Price": 24.98,
											"Profit": 6.79
										},
										{
											"ProductId": 2458,
											"Seasonality": 2,
											"Price": 29.17,
											"Profit": 7.84
										},
										{
											"ProductId": 2459,
											"Seasonality": 1,
											"Price": 22.81,
											"Profit": 6.11
										},
										{
											"ProductId": 2460,
											"Seasonality": 1,
											"Price": 25.79,
											"Profit": 8.62
										},
										{
											"ProductId": 2461,
											"Seasonality": 1,
											"Price": 27.64,
											"Profit": 8.19
										},
										{
											"ProductId": 2462,
											"Seasonality": 1,
											"Price": 29.74,
											"Profit": 9.05
										},
										{
											"ProductId": 2463,
											"Seasonality": 1,
											"Price": 28.13,
											"Profit": 8.36
										},
										{
											"ProductId": 2464,
											"Seasonality": 1,
											"Price": 18.57,
											"Profit": 4.54
										},
										{
											"ProductId": 2465,
											"Seasonality": 1,
											"Price": 23.97,
											"Profit": 6.16
										},
										{
											"ProductId": 2466,
											"Seasonality": 1,
											"Price": 23.5,
											"Profit": 6.39
										},
										{
											"ProductId": 2467,
											"Seasonality": 1,
											"Price": 30.48,
											"Profit": 8.56
										},
										{
											"ProductId": 2468,
											"Seasonality": 3,
											"Price": 37.23,
											"Profit": 8.39
										},
										{
											"ProductId": 2469,
											"Seasonality": 3,
											"Price": 32.63,
											"Profit": 9.24
										},
										{
											"ProductId": 2470,
											"Seasonality": 3,
											"Price": 41.83,
											"Profit": 12.2
										},
										{
											"ProductId": 2471,
											"Seasonality": 3,
											"Price": 23.02,
											"Profit": 8.72
										},
										{
											"ProductId": 2472,
											"Seasonality": 1,
											"Price": 36.81,
											"Profit": 9.6
										},
										{
											"ProductId": 2473,
											"Seasonality": 3,
											"Price": 27.51,
											"Profit": 8.13
										},
										{
											"ProductId": 2474,
											"Seasonality": 1,
											"Price": 28.11,
											"Profit": 10.21
										},
										{
											"ProductId": 2475,
											"Seasonality": 1,
											"Price": 36.01,
											"Profit": 9.9
										},
										{
											"ProductId": 2476,
											"Seasonality": 2,
											"Price": 32.48,
											"Profit": 9.1
										},
										{
											"ProductId": 2477,
											"Seasonality": 1,
											"Price": 27.16,
											"Profit": 7.05
										},
										{
											"ProductId": 2478,
											"Seasonality": 1,
											"Price": 21.95,
											"Profit": 7.26
										},
										{
											"ProductId": 2479,
											"Seasonality": 3,
											"Price": 29.4,
											"Profit": 8.72
										},
										{
											"ProductId": 2480,
											"Seasonality": 3,
											"Price": 13.96,
											"Profit": 4.31
										},
										{
											"ProductId": 2481,
											"Seasonality": 1,
											"Price": 27.9,
											"Profit": 10.55
										},
										{
											"ProductId": 2482,
											"Seasonality": 1,
											"Price": 26.27,
											"Profit": 5.88
										},
										{
											"ProductId": 2483,
											"Seasonality": 2,
											"Price": 26.7,
											"Profit": 8.59
										},
										{
											"ProductId": 2484,
											"Seasonality": 1,
											"Price": 22.84,
											"Profit": 6.88
										},
										{
											"ProductId": 2485,
											"Seasonality": 1,
											"Price": 29.26,
											"Profit": 8.87
										},
										{
											"ProductId": 2486,
											"Seasonality": 3,
											"Price": 32.09,
											"Profit": 11.15
										},
										{
											"ProductId": 2487,
											"Seasonality": 3,
											"Price": 21.8,
											"Profit": 6.37
										},
										{
											"ProductId": 2488,
											"Seasonality": 3,
											"Price": 34.21,
											"Profit": 10.1
										},
										{
											"ProductId": 2489,
											"Seasonality": 1,
											"Price": 30.49,
											"Profit": 10.51
										},
										{
											"ProductId": 2490,
											"Seasonality": 1,
											"Price": 18.11,
											"Profit": 4.95
										},
										{
											"ProductId": 2491,
											"Seasonality": 1,
											"Price": 28.41,
											"Profit": 8.38
										},
										{
											"ProductId": 2492,
											"Seasonality": 1,
											"Price": 34.07,
											"Profit": 9.76
										},
										{
											"ProductId": 2493,
											"Seasonality": 2,
											"Price": 28.46,
											"Profit": 9.26
										},
										{
											"ProductId": 2494,
											"Seasonality": 1,
											"Price": 39.43,
											"Profit": 12.79
										},
										{
											"ProductId": 2495,
											"Seasonality": 1,
											"Price": 38.12,
											"Profit": 8.29
										},
										{
											"ProductId": 2496,
											"Seasonality": 1,
											"Price": 22.56,
											"Profit": 6.11
										},
										{
											"ProductId": 2497,
											"Seasonality": 1,
											"Price": 30.8,
											"Profit": 9.08
										},
										{
											"ProductId": 2498,
											"Seasonality": 2,
											"Price": 19.12,
											"Profit": 5.81
										},
										{
											"ProductId": 2499,
											"Seasonality": 1,
											"Price": 26.51,
											"Profit": 9.54
										},
										{
											"ProductId": 2500,
											"Seasonality": 2,
											"Price": 22.07,
											"Profit": 6.95
										},
										{
											"ProductId": 2501,
											"Seasonality": 3,
											"Price": 29.58,
											"Profit": 9.73
										},
										{
											"ProductId": 2502,
											"Seasonality": 1,
											"Price": 23.72,
											"Profit": 6.08
										},
										{
											"ProductId": 2503,
											"Seasonality": 1,
											"Price": 36.71,
											"Profit": 11.2
										},
										{
											"ProductId": 2504,
											"Seasonality": 1,
											"Price": 21.42,
											"Profit": 7.03
										},
										{
											"ProductId": 2505,
											"Seasonality": 3,
											"Price": 37.62,
											"Profit": 12.01
										},
										{
											"ProductId": 2506,
											"Seasonality": 3,
											"Price": 18.79,
											"Profit": 6.51
										},
										{
											"ProductId": 2507,
											"Seasonality": 1,
											"Price": 26.89,
											"Profit": 8.64
										},
										{
											"ProductId": 2508,
											"Seasonality": 1,
											"Price": 21.36,
											"Profit": 6.16
										},
										{
											"ProductId": 2509,
											"Seasonality": 2,
											"Price": 28.15,
											"Profit": 7.6
										},
										{
											"ProductId": 2510,
											"Seasonality": 3,
											"Price": 31.02,
											"Profit": 10.25
										},
										{
											"ProductId": 2511,
											"Seasonality": 1,
											"Price": 23.45,
											"Profit": 6.26
										},
										{
											"ProductId": 2512,
											"Seasonality": 1,
											"Price": 25.97,
											"Profit": 7.74
										},
										{
											"ProductId": 2513,
											"Seasonality": 1,
											"Price": 36.23,
											"Profit": 11.39
										},
										{
											"ProductId": 2514,
											"Seasonality": 3,
											"Price": 26.78,
											"Profit": 7.79
										},
										{
											"ProductId": 2515,
											"Seasonality": 1,
											"Price": 24.37,
											"Profit": 6.18
										},
										{
											"ProductId": 2516,
											"Seasonality": 1,
											"Price": 28.51,
											"Profit": 8.02
										},
										{
											"ProductId": 2517,
											"Seasonality": 1,
											"Price": 39.56,
											"Profit": 12.49
										},
										{
											"ProductId": 2518,
											"Seasonality": 1,
											"Price": 16.77,
											"Profit": 4.5
										},
										{
											"ProductId": 2519,
											"Seasonality": 2,
											"Price": 24.58,
											"Profit": 6.75
										},
										{
											"ProductId": 2520,
											"Seasonality": 2,
											"Price": 34.21,
											"Profit": 8.17
										},
										{
											"ProductId": 2521,
											"Seasonality": 1,
											"Price": 25.28,
											"Profit": 6.27
										},
										{
											"ProductId": 2522,
											"Seasonality": 1,
											"Price": 35.81,
											"Profit": 10.01
										},
										{
											"ProductId": 2523,
											"Seasonality": 1,
											"Price": 26.45,
											"Profit": 7.58
										},
										{
											"ProductId": 2524,
											"Seasonality": 3,
											"Price": 34,
											"Profit": 7.57
										},
										{
											"ProductId": 2525,
											"Seasonality": 1,
											"Price": 19.8,
											"Profit": 6.05
										},
										{
											"ProductId": 2526,
											"Seasonality": 1,
											"Price": 27.49,
											"Profit": 7.41
										},
										{
											"ProductId": 2527,
											"Seasonality": 1,
											"Price": 31.65,
											"Profit": 8.44
										},
										{
											"ProductId": 2528,
											"Seasonality": 1,
											"Price": 22.61,
											"Profit": 5.7
										},
										{
											"ProductId": 2529,
											"Seasonality": 1,
											"Price": 18.12,
											"Profit": 4.37
										},
										{
											"ProductId": 2530,
											"Seasonality": 1,
											"Price": 38.26,
											"Profit": 10.4
										},
										{
											"ProductId": 2531,
											"Seasonality": 1,
											"Price": 25.07,
											"Profit": 8.19
										},
										{
											"ProductId": 2532,
											"Seasonality": 1,
											"Price": 16.68,
											"Profit": 4.73
										},
										{
											"ProductId": 2533,
											"Seasonality": 1,
											"Price": 14.5,
											"Profit": 4.08
										},
										{
											"ProductId": 2534,
											"Seasonality": 1,
											"Price": 30.24,
											"Profit": 8.28
										},
										{
											"ProductId": 2535,
											"Seasonality": 1,
											"Price": 20.37,
											"Profit": 6.17
										},
										{
											"ProductId": 2536,
											"Seasonality": 2,
											"Price": 30.96,
											"Profit": 9.69
										},
										{
											"ProductId": 2537,
											"Seasonality": 1,
											"Price": 26.03,
											"Profit": 7.74
										},
										{
											"ProductId": 2538,
											"Seasonality": 3,
											"Price": 31.65,
											"Profit": 8.74
										},
										{
											"ProductId": 2539,
											"Seasonality": 1,
											"Price": 18.76,
											"Profit": 5.15
										},
										{
											"ProductId": 2540,
											"Seasonality": 3,
											"Price": 25.42,
											"Profit": 8.41
										},
										{
											"ProductId": 2541,
											"Seasonality": 1,
											"Price": 36.44,
											"Profit": 11.42
										},
										{
											"ProductId": 2542,
											"Seasonality": 2,
											"Price": 32.24,
											"Profit": 7.24
										},
										{
											"ProductId": 2543,
											"Seasonality": 1,
											"Price": 30.34,
											"Profit": 8.45
										},
										{
											"ProductId": 2544,
											"Seasonality": 2,
											"Price": 23.75,
											"Profit": 7.46
										},
										{
											"ProductId": 2545,
											"Seasonality": 1,
											"Price": 32.97,
											"Profit": 8.77
										},
										{
											"ProductId": 2546,
											"Seasonality": 1,
											"Price": 26.72,
											"Profit": 8.87
										},
										{
											"ProductId": 2547,
											"Seasonality": 1,
											"Price": 32.35,
											"Profit": 8.5
										},
										{
											"ProductId": 2548,
											"Seasonality": 1,
											"Price": 29.13,
											"Profit": 9.05
										},
										{
											"ProductId": 2549,
											"Seasonality": 1,
											"Price": 28.45,
											"Profit": 7.43
										},
										{
											"ProductId": 2550,
											"Seasonality": 2,
											"Price": 29.75,
											"Profit": 8.53
										},
										{
											"ProductId": 2551,
											"Seasonality": 1,
											"Price": 30.77,
											"Profit": 10.89
										},
										{
											"ProductId": 2552,
											"Seasonality": 2,
											"Price": 33.15,
											"Profit": 10.57
										},
										{
											"ProductId": 2553,
											"Seasonality": 3,
											"Price": 23.41,
											"Profit": 5.37
										},
										{
											"ProductId": 2554,
											"Seasonality": 1,
											"Price": 32.92,
											"Profit": 10.64
										},
										{
											"ProductId": 2555,
											"Seasonality": 1,
											"Price": 20.79,
											"Profit": 7.07
										},
										{
											"ProductId": 2556,
											"Seasonality": 1,
											"Price": 18.12,
											"Profit": 6.15
										},
										{
											"ProductId": 2557,
											"Seasonality": 1,
											"Price": 35.82,
											"Profit": 10.83
										},
										{
											"ProductId": 2558,
											"Seasonality": 1,
											"Price": 45.35,
											"Profit": 13.93
										},
										{
											"ProductId": 2559,
											"Seasonality": 1,
											"Price": 33.02,
											"Profit": 9.51
										},
										{
											"ProductId": 2560,
											"Seasonality": 1,
											"Price": 26.88,
											"Profit": 10
										},
										{
											"ProductId": 2561,
											"Seasonality": 3,
											"Price": 22.3,
											"Profit": 7.89
										}
									],
									"schema": {
										"ProductId": "int",
										"Seasonality": "int",
										"Price": "object",
										"Profit": "object"
									},
									"filter": null
								},
								"showRightPanel": false,
								"isSql": false
							}
						},
						"source": [
							"%%spark\n",
							"val df = spark.read.sqlanalytics(\"SQLPool01.wwi.SaleSmall\") \n",
							"df.createOrReplaceTempView(\"sale\")\n",
							"\n",
							"val df2 = spark.read.sqlanalytics(\"SQLPool01.wwi.Product\") \n",
							"df2.createOrReplaceTempView(\"product\")\n",
							"display(df2)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Load daily product sales from the SQL pool.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"sqlQuery = \"\"\"\n",
							"SELECT\n",
							"    P.ProductId\n",
							"    ,P.Seasonality\n",
							"    ,S.TransactionDateId\n",
							"    ,COUNT(*) as TransactionItemsCount\n",
							"FROM\n",
							"    sale S\n",
							"    JOIN product P ON\n",
							"        S.ProductId = P.ProductId\n",
							"WHERE\n",
							"    S.TransactionDateId NOT IN (20120229, 20160229)\n",
							"GROUP BY\n",
							"    P.ProductId\n",
							"    ,P.Seasonality\n",
							"    ,S.TransactionDateId\n",
							"\"\"\"\n",
							"\n",
							"prod_df = spark.sql(sqlQuery)\n",
							"prod_df.cache()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Check the number of records in the data farame (should be around 13 million rows)."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"prod_df.count()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Display some statistics about the data frame.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"display(prod_df.describe())"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Pivot the data frame to make daily sale items counts columns. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"prod_prep_df = prod_df.groupBy(['ProductId', 'Seasonality']).pivot('TransactionDateId').sum('TransactionItemsCount').toPandas()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Clean up the nulls and take a look at the result.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"prod_prep_df = prod_prep_df.fillna(0)\n",
							"prod_prep_df.head(10)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Isloate features and prediction classes.\n",
							"\n",
							"Standardize features by removing the mean and scaling to unit variance.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"X = prod_prep_df.iloc[:, 2:].values\n",
							"y = prod_prep_df['Seasonality'].values\n",
							"\n",
							"X_scale = StandardScaler().fit_transform(X)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Use PCA for dimensionality reduction\n",
							"\n",
							"Perform dimensionality reduction using Principal Components Analysis and two target components.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"pca = PCA(n_components=2)\n",
							"principal_components = pca.fit_transform(X_scale)\n",
							"principal_components = MinMaxScaler().fit_transform(principal_components)\n",
							"\n",
							"pca_df = pd.DataFrame(data = principal_components, columns = ['pc1', 'pc2'])\n",
							"pca_df = pd.concat([pca_df, prod_prep_df[['Seasonality']]], axis = 1)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Display the products data frame in two dimensions (mapped to the two principal components).\n",
							"\n",
							"Note the clear separation of clusters.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"fig = plt.figure(figsize = (6,6))\n",
							"ax = fig.add_subplot(1,1,1) \n",
							"ax.set_xlabel('Principal Component 1', fontsize = 15)\n",
							"ax.set_ylabel('Principal Component 2', fontsize = 15)\n",
							"ax.set_title('2 component PCA', fontsize = 20)\n",
							"targets = [1, 2, 3]\n",
							"colors = ['r', 'g', 'b']\n",
							"for target, color in zip(targets,colors):\n",
							"    indicesToKeep = pca_df['Seasonality'] == target\n",
							"    ax.scatter(pca_df.loc[indicesToKeep, 'pc1']\n",
							"               , pca_df.loc[indicesToKeep, 'pc2']\n",
							"               , c = color\n",
							"               , s = 1)\n",
							"ax.legend(['All Season Products', 'Summer Products', 'Winter Products'])\n",
							"ax.plot([-0.05, 1.05], [0.77, 1.0], linestyle=':', linewidth=1, color='y')\n",
							"ax.plot([-0.05, 1.05], [0.37, 0.6], linestyle=':', linewidth=1, color='y')\n",
							"ax.grid()\n",
							"\n",
							"plt.show()\n",
							"plt.close()"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Redo the Principal Components Analysis, this time with twenty dimensions.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"def col_name(x):\n",
							"    return f'f{x:02}'\n",
							"\n",
							"pca = PCA(n_components=20)\n",
							"principal_components = pca.fit_transform(X_scale)\n",
							"principal_components = MinMaxScaler().fit_transform(principal_components)\n",
							"\n",
							"X = pd.DataFrame(data = principal_components, columns = list(map(col_name, np.arange(0, 20))))\n",
							"pca_df = pd.concat([X, prod_prep_df[['ProductId']]], axis = 1)\n",
							"pca_automl_df = pd.concat([X, prod_prep_df[['Seasonality']]], axis = 1)\n",
							"\n",
							"X = X[:4500]\n",
							"y = prod_prep_df['Seasonality'][:4500]\n",
							"pca_automl_df = pca_automl_df[:4500]"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Save the PCA components to the SQL pool.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"pca_sdf = spark.createDataFrame(pca_df)\n",
							"pca_sdf.createOrReplaceTempView(\"productpca\")"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"%%spark\n",
							"// Make sure the name of the SQL pool (SQLPool01 below) matches the name of your SQL pool.\n",
							"val df = spark.sqlContext.sql(\"select * from productpca\")\n",
							"df.write.sqlanalytics(\"SQLPool01.wwi_ml.ProductPCA\", Constants.INTERNAL)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train ensemble of trees classifier (using XGBoost)\n",
							"\n",
							"Split into test and training data sets.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=123)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Train the ensemble classifier using XGBoost.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"model = XGBClassifier()\n",
							"model.fit(X_train, y_train)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Perform predictions with the newly trained model.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"y_pred = model.predict(X_test)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Calculate the accuracy of the model using test data.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"accuracy = accuracy_score(y_test, y_pred)\n",
							"print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Convert trained model to ONNX format.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"initial_types = [\n",
							"    ('input', FloatTensorType([1, 20]))\n",
							"]\n",
							"\n",
							"onnx_model = convert_xgboost(model, initial_types=initial_types)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"outputCollapsed": true
						},
						"source": [
							"\n",
							"#model.get_booster().get_dump(with_stats=True, dump_format='json')\n",
							"#model.get_booster().feature_names\n",
							"#onnx_model"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Train classifier using Auto ML\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azureml.core.experiment import Experiment\n",
							"from azureml.core.workspace import Workspace\n",
							"from azureml.train.automl.run import AutoMLRun\n",
							"from azureml.train.automl import AutoMLConfig\n",
							"from azureml.automl.runtime.onnx_convert import OnnxConverter"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"pca_automl_df.head(10)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Configure the connection to the Azure Machine Learning workspace. The Azure portal provides all the values below.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"subscription_id='fe5aef09-bf0f-4faf-9c28-311200cf35cd'         # ensure it matches your Azure subscription id\n",
							"resource_group='Synapse-WS-L400'      # ensure it matches your resource group name\n",
							"workspace_name='amlworkspaceimre'       # ensure it matches your Azure Machine Learning workspace name\n",
							"ws = Workspace(subscription_id = subscription_id, resource_group = resource_group, workspace_name = workspace_name)\n",
							"ws.write_config()\n",
							"ws = Workspace.from_config()\n",
							"experiment = Experiment(ws, \"Product_Seasonality\")"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Configure the Automated Machine Learning experiment and start it (will run on local compute resources).\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"automl_classifier_config = AutoMLConfig(\n",
							"        task='classification',\n",
							"        #experiment_exit_score = 0.995,\n",
							"        experiment_timeout_minutes=15,\n",
							"        enable_onnx_compatible_models=True,\n",
							"        training_data=pca_automl_df,\n",
							"        label_column_name='Seasonality',\n",
							"        n_cross_validations=5,\n",
							"        enable_voting_ensemble=False,\n",
							"        enable_stack_ensemble=False\n",
							"        )\n",
							"\n",
							"local_run = experiment.submit(automl_classifier_config, show_output=True)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Retrieve the best model directly in ONNX format and take a look at it.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"best_run, onnx_model2 = local_run.get_output(return_onnx_model=True)\n",
							"#onnx_fl_path = \"./best_model.onnx\"\n",
							"#OnnxConverter.save_onnx_model(onnx_mdl, onnx_fl_path)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"onnx_model2"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Replace below the placeholders with the name of the primary data lake account and one of it's security keys."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from azure.storage.blob import BlockBlobService\n",
							"\n",
							"block_blob_service = BlockBlobService(\n",
							"    account_name='asadatalakeimre', account_key='uM35ZwSzYURhnx5DGe4oTttGZTdEqmRrDQYjDgXchfwWUndpWtA8rlScmm/Li8V6+ZS9f1bKCrvO27uE3j0qjg==') \n",
							"\n",
							"block_blob_service.create_blob_from_text('wwi-02', '/ml/onnx/product_seasonality_classifier.onnx', onnx_model2.SerializeToString())"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 07 - Spark ML')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {}
				},
				"metadata": {
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 60
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"## Making Product Recommendations\n",
							"\n",
							"In this notebook, you will use sales data to create product recommendations for customers. \n",
							"\n",
							"When creating recommendation models there are generally two approaches that vary only on the data you use to compute the \"strength\" of a recommendation:\n",
							"- **Explicit ratings**: In this case, each user and product has a star rating attached. Think you might review restaurants in your favorite app.\n",
							"- **Implicit ratings**: In this case each user and product has a rating that is derived from some behavioral metric. Typically that metric is a count, like number purchases of that product or the number of product page views. The actual rating is \"implicit\" in the sense that it is computed algorithmically instead of directly using the value provided.\n",
							"\n",
							"In this notebook, you train a model that makes product recommendation based purchase history. For each user and product that appears in the history, you will sum the quantity of items purchased across each transaction. This sum will create an **explicit** rating for the user to product mapping, effectively your model is saying the more of a product a user buys across all transactions, the more relevant it is to that user.\n",
							"\n",
							"The model then goes one step further, and enables you to calculate the recommendations for a user, who may not have bought the product before, but because her purchases are similar to another's, she might like the strongest recommendations inferred from other users like her. Think of this as the algorthim filling in the blanks for the user and a given product, it predicts what that rating should be between them.\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"### Using Spark ML's ALS Algorithm\n",
							"\n",
							"Run the following cell to import the ALS class.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.ml.recommendation import ALS\n",
							"from pyspark.sql import Row\n",
							""
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Run the following cell to load the SaleSmall table from the SQL Pool. Make sure the SQL pool name (SQLPool01) matches the name of your SQL Pool.\n",
							"\n",
							"Remember, that in order to read from table like this, we need to use Scala to create a DataFrame around it.\n",
							"\n",
							"Once you have the DataFrame, you can create a named view from it. Since named views are registered in the shared metastore, you can access view by name from both Scala and Python cells.\n",
							"\n",
							"In this cell we use the Spark magic to run this cells content's using Scala, create the DataFrame and then register it as a view that we will use from later Python cells.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"%%spark\n",
							"val df = spark.read.sqlanalytics(\"SQLPool01.wwi.SaleSmall\") \n",
							"df.createOrReplaceTempView(\"sales\")"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Next, you need to get just the data you need to train the recommender.\n",
							"\n",
							"A recommender really only operates on three fields: the customerid/userid, the itemid/productid and the rating.\n",
							"\n",
							"In the following cell, we select just those columns, summing the quantity field to get a toal purchase count for any given product by that user in the history. This field, which we alias as numpurchases, is our rating.\n",
							"\n",
							"Then we call `cache()` on the dataframe so that resultant dataset is cached in Spark memory (or disk) and does not have to be recomputed everytime we make a subequent query for it. Machine learning algorithms like ALS make several passes thru data, so caching the DataFrame provides a significant performance boost.\n",
							"\n",
							"Run the following cell to prepare and cached the implicit ratings (IR) table.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# To be able to complete this lab in under an hour, let's just work with 1,500k rows\n",
							"sample = spark.sql(\"SELECT productid, customerid, quantity FROM sales\").limit(15000000)\n",
							"sample.createOrReplaceTempView(\"salessample\")\n",
							"\n",
							"ir = spark.sql(\"SELECT productid, customerid, SUM(quantity) as numpurchases FROM salessample GROUP BY productid, customerid LIMIT 500000\")\n",
							"ir.cache()\n",
							"display(ir)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"In training a model, we withold a subset of the data to use when evaluating the model. This is the test set. The train set is what we show to the algorithm for it to learn from.\n",
							"\n",
							"The basic idea is if you show the model all of the data you have, it may effectively memorize all the answers- meaning it will perform very well if it has seen the question before, but probably perform poorly against new questions. This problem that is avoided is called overfitting the model to the data.\n",
							"\n",
							"In the first line, we split our data into those train and test subsets.\n",
							"\n",
							"In the sceond line, we instantiate the ALS algorithm, telling it which columns in our data are the user, item and rating. THe `maxIter` controls how many passes the training takes over the data, and the `regParam` controls how big of an adjustment the model makes during each pass. These are set to the common defaults so you can ignore those values for the purposes of this lab. \n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"train, test = ir.randomSplit([0.7,0.3])\n",
							"als = ALS(maxIter=5,regParam=0.01,userCol=\"customerid\",itemCol=\"productid\",ratingCol=\"numpurchases\")\n",
							"model = als.fit(train)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"With a trained model in hand, we can now use it to make some recommendations. \n",
							"\n",
							"In reccommender systems it is very common to pre-compute the recommendations in batch and then simply query their reccommendations for a single customer later.\n",
							"\n",
							"Run the following cell to batch compute the top 5 product recommendations for each customer, and see a sampling of the result.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"product_recommendations = model.recommendForAllUsers(5).selectExpr(\"customerid\",\"explode(recommendations) as rec\")\n",
							"product_recommendations = product_recommendations.selectExpr(\"customerId\", \"rec.productid\", \"rec.rating\")\n",
							"product_recommendations.createOrReplaceTempView(\"recommendations\")\n",
							"display(product_recommendations)"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"Now that you have the batch recommendations, save the results to a table in a SQL Pool by running the following cell. With this, downstream applications can look up recommendations by issuing a traditional T-SQL query.\n",
							"\n",
							"Don't forget to check the name of your SQL Pool used on Line 3.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"%%spark\n",
							"val recommendations = spark.sql(\"SELECT * from recommendations\")\n",
							"recommendations.write.sqlanalytics(\"SQLPool01.wwi.Recommendations\", Constants.INTERNAL) "
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 1 - Spark Pool')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-small/Year=2016/Quarter=Q4/Month=12/Day=20161231/sale-small-20161231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.types import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"\r\n",
							"profitByDateProduct = (df.groupBy(\"TransactionDate\",\"ProductId\")\r\n",
							"    .agg(\r\n",
							"        sum(\"ProfitAmount\").alias(\"(sum)ProfitAmount\"),\r\n",
							"        round(avg(\"Quantity\"), 4).alias(\"(avg)Quantity\"),\r\n",
							"        sum(\"Quantity\").alias(\"(sum)Quantity\"))\r\n",
							"    .orderBy(\"TransactionDate\"))\r\n",
							"profitByDateProduct.show(100)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df = (spark.read \\\r\n",
							"        .option(\"inferSchema\", \"true\") \\\r\n",
							"        .json(\"abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/online-user-profiles-02/*.json\", multiLine=True)\r\n",
							"    )\r\n",
							"\r\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# create a view called user_profiles\r\n",
							"df.createOrReplaceTempView(\"user_profiles\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * FROM user_profiles LIMIT 10"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.functions import udf, explode\r\n",
							"\r\n",
							"flat=df.select('visitorId',explode('topProductPurchases').alias('topProductPurchases_flat'))\r\n",
							"flat.show(100)"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"topPurchases = (flat.select('visitorId','topProductPurchases_flat.productId','topProductPurchases_flat.itemsPurchasedLast12Months')\r\n",
							"    .orderBy('visitorId'))\r\n",
							"\r\n",
							"topPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Let's order by the number of items purchased in the last 12 months\r\n",
							"sortedTopPurchases = topPurchases.orderBy(\"itemsPurchasedLast12Months\")\r\n",
							"\r\n",
							"sortedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"sortedTopPurchases = (topPurchases\r\n",
							"    .orderBy( col(\"itemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"sortedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(count(\"*\").alias(\"total\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"groupedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\",\"itemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(sum(\"itemsPurchasedLast12Months\").alias(\"totalItemsPurchased\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"groupedTopPurchases.show(100)"
						],
						"outputs": [],
						"execution_count": 22
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 2 - Explore with Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Lab_05_Synapse_Saprk"
				},
				"nbformat": 0,
				"nbformat_minor": 0,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"bf640098-ad88-4b5d-be5c-394a97379924": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"Quantity": 3,
												"ProductId": 4475,
												"CustomerId": 127962,
												"TotalAmount": 71.47800000000001,
												"ProfitAmount": 20.196,
												"Price": 21.66,
												"StoreId": 1973,
												"TransactionId": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
												"TransactionDate": 20170501,
												"Hour": 3,
												"Minute": 32
											},
											{
												"Quantity": 2,
												"ProductId": 3903,
												"CustomerId": 127962,
												"TotalAmount": 64.658,
												"ProfitAmount": 17.226000000000003,
												"Price": 29.39,
												"StoreId": 1973,
												"TransactionId": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
												"TransactionDate": 20170501,
												"Hour": 3,
												"Minute": 32
											},
											{
												"Quantity": 3,
												"ProductId": 2235,
												"CustomerId": 127962,
												"TotalAmount": 96.525,
												"ProfitAmount": 32.274,
												"Price": 29.25,
												"StoreId": 1973,
												"TransactionId": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
												"TransactionDate": 20170501,
												"Hour": 3,
												"Minute": 32
											},
											{
												"Quantity": 3,
												"ProductId": 194,
												"CustomerId": 127962,
												"TotalAmount": 93.852,
												"ProfitAmount": 30.393,
												"Price": 28.44,
												"StoreId": 1973,
												"TransactionId": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
												"TransactionDate": 20170501,
												"Hour": 3,
												"Minute": 32
											},
											{
												"Quantity": 4,
												"ProductId": 1808,
												"CustomerId": 127972,
												"TotalAmount": 93.19200000000001,
												"ProfitAmount": 27.588,
												"Price": 21.18,
												"StoreId": 5318,
												"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"TransactionDate": 20170501,
												"Hour": 14,
												"Minute": 15
											},
											{
												"Quantity": 3,
												"ProductId": 3660,
												"CustomerId": 127972,
												"TotalAmount": 93.126,
												"ProfitAmount": 25.740000000000002,
												"Price": 28.22,
												"StoreId": 5318,
												"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"TransactionDate": 20170501,
												"Hour": 14,
												"Minute": 15
											},
											{
												"Quantity": 1,
												"ProductId": 155,
												"CustomerId": 127972,
												"TotalAmount": 32.989000000000004,
												"ProfitAmount": 8.448,
												"Price": 29.99,
												"StoreId": 5318,
												"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"TransactionDate": 20170501,
												"Hour": 14,
												"Minute": 15
											},
											{
												"Quantity": 2,
												"ProductId": 108,
												"CustomerId": 127972,
												"TotalAmount": 25.762,
												"ProfitAmount": 8.074,
												"Price": 11.71,
												"StoreId": 5318,
												"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"TransactionDate": 20170501,
												"Hour": 14,
												"Minute": 15
											},
											{
												"Quantity": 4,
												"ProductId": 90,
												"CustomerId": 127972,
												"TotalAmount": 126.28000000000002,
												"ProfitAmount": 39.6,
												"Price": 28.7,
												"StoreId": 5318,
												"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"TransactionDate": 20170501,
												"Hour": 14,
												"Minute": 15
											},
											{
												"Quantity": 1,
												"ProductId": 111,
												"CustomerId": 127972,
												"TotalAmount": 28.985000000000003,
												"ProfitAmount": 8.888,
												"Price": 26.35,
												"StoreId": 5318,
												"TransactionId": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"TransactionDate": 20170501,
												"Hour": 14,
												"Minute": 15
											}
										],
										"schema": {
											"TransactionId": "string",
											"CustomerId": "int",
											"ProductId": "int",
											"Quantity": "int",
											"Price": "double",
											"TotalAmount": "double",
											"TransactionDate": "int",
											"ProfitAmount": "double",
											"Hour": "int",
											"Minute": "int",
											"StoreId": "int"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"TransactionId"
											],
											"seriesFieldKeys": [
												"CustomerId"
											],
											"isStacked": false
										}
									}
								}
							},
							"eeac3b38-547f-408b-ac90-d87f5ed21d4e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"CustomerId": 3,
												"ProductId": 4581
											},
											{
												"CustomerId": 3,
												"ProductId": 1365
											},
											{
												"CustomerId": 3,
												"ProductId": 2641
											},
											{
												"CustomerId": 3,
												"ProductId": 220
											},
											{
												"CustomerId": 3,
												"ProductId": 110
											},
											{
												"CustomerId": 3,
												"ProductId": 2
											},
											{
												"CustomerId": 11,
												"ProductId": 3323
											},
											{
												"CustomerId": 11,
												"ProductId": 4763
											},
											{
												"CustomerId": 11,
												"ProductId": 4070
											},
											{
												"CustomerId": 11,
												"ProductId": 582
											},
											{
												"CustomerId": 11,
												"ProductId": 194
											},
											{
												"CustomerId": 11,
												"ProductId": 70
											},
											{
												"CustomerId": 11,
												"ProductId": 32
											},
											{
												"CustomerId": 41,
												"ProductId": 3321
											},
											{
												"CustomerId": 41,
												"ProductId": 244
											},
											{
												"CustomerId": 41,
												"ProductId": 3009
											},
											{
												"CustomerId": 41,
												"ProductId": 126
											},
											{
												"CustomerId": 41,
												"ProductId": 3564
											},
											{
												"CustomerId": 41,
												"ProductId": 1091
											},
											{
												"CustomerId": 41,
												"ProductId": 4660
											},
											{
												"CustomerId": 41,
												"ProductId": 2726
											},
											{
												"CustomerId": 41,
												"ProductId": 88
											},
											{
												"CustomerId": 41,
												"ProductId": 134
											},
											{
												"CustomerId": 41,
												"ProductId": 186
											},
											{
												"CustomerId": 41,
												"ProductId": 84
											},
											{
												"CustomerId": 42,
												"ProductId": 3256
											},
											{
												"CustomerId": 42,
												"ProductId": 4843
											},
											{
												"CustomerId": 42,
												"ProductId": 2836
											},
											{
												"CustomerId": 42,
												"ProductId": 2996
											},
											{
												"CustomerId": 42,
												"ProductId": 4544
											},
											{
												"CustomerId": 42,
												"ProductId": 57
											},
											{
												"CustomerId": 42,
												"ProductId": 35
											},
											{
												"CustomerId": 42,
												"ProductId": 229
											},
											{
												"CustomerId": 43,
												"ProductId": 412
											},
											{
												"CustomerId": 43,
												"ProductId": 2031
											},
											{
												"CustomerId": 43,
												"ProductId": 4220
											},
											{
												"CustomerId": 43,
												"ProductId": 3478
											},
											{
												"CustomerId": 43,
												"ProductId": 2776
											},
											{
												"CustomerId": 43,
												"ProductId": 153
											},
											{
												"CustomerId": 43,
												"ProductId": 30
											},
											{
												"CustomerId": 52,
												"ProductId": 3604
											},
											{
												"CustomerId": 52,
												"ProductId": 2711
											},
											{
												"CustomerId": 52,
												"ProductId": 4830
											},
											{
												"CustomerId": 52,
												"ProductId": 4260
											},
											{
												"CustomerId": 52,
												"ProductId": 686
											},
											{
												"CustomerId": 52,
												"ProductId": 609
											},
											{
												"CustomerId": 52,
												"ProductId": 619
											},
											{
												"CustomerId": 52,
												"ProductId": 160
											},
											{
												"CustomerId": 52,
												"ProductId": 209
											},
											{
												"CustomerId": 52,
												"ProductId": 18
											},
											{
												"CustomerId": 61,
												"ProductId": 2430
											},
											{
												"CustomerId": 61,
												"ProductId": 4196
											},
											{
												"CustomerId": 61,
												"ProductId": 2482
											},
											{
												"CustomerId": 61,
												"ProductId": 3663
											},
											{
												"CustomerId": 61,
												"ProductId": 1329
											},
											{
												"CustomerId": 61,
												"ProductId": 2655
											},
											{
												"CustomerId": 61,
												"ProductId": 2751
											},
											{
												"CustomerId": 61,
												"ProductId": 1302
											},
											{
												"CustomerId": 61,
												"ProductId": 37
											},
											{
												"CustomerId": 61,
												"ProductId": 176
											},
											{
												"CustomerId": 61,
												"ProductId": 112
											},
											{
												"CustomerId": 64,
												"ProductId": 2229
											},
											{
												"CustomerId": 64,
												"ProductId": 3352
											},
											{
												"CustomerId": 64,
												"ProductId": 2551
											},
											{
												"CustomerId": 64,
												"ProductId": 3039
											},
											{
												"CustomerId": 64,
												"ProductId": 2240
											},
											{
												"CustomerId": 64,
												"ProductId": 1140
											},
											{
												"CustomerId": 64,
												"ProductId": 1397
											},
											{
												"CustomerId": 64,
												"ProductId": 3779
											},
											{
												"CustomerId": 64,
												"ProductId": 263
											},
											{
												"CustomerId": 64,
												"ProductId": 1447
											},
											{
												"CustomerId": 64,
												"ProductId": 48
											},
											{
												"CustomerId": 64,
												"ProductId": 169
											},
											{
												"CustomerId": 70,
												"ProductId": 4109
											},
											{
												"CustomerId": 70,
												"ProductId": 1189
											},
											{
												"CustomerId": 70,
												"ProductId": 2648
											},
											{
												"CustomerId": 70,
												"ProductId": 1911
											},
											{
												"CustomerId": 70,
												"ProductId": 3514
											},
											{
												"CustomerId": 70,
												"ProductId": 1564
											},
											{
												"CustomerId": 70,
												"ProductId": 2549
											},
											{
												"CustomerId": 70,
												"ProductId": 4317
											},
											{
												"CustomerId": 70,
												"ProductId": 3645
											},
											{
												"CustomerId": 70,
												"ProductId": 226
											},
											{
												"CustomerId": 70,
												"ProductId": 19
											},
											{
												"CustomerId": 88,
												"ProductId": 1604
											},
											{
												"CustomerId": 88,
												"ProductId": 808
											},
											{
												"CustomerId": 88,
												"ProductId": 2461
											},
											{
												"CustomerId": 88,
												"ProductId": 3004
											},
											{
												"CustomerId": 88,
												"ProductId": 3551
											},
											{
												"CustomerId": 88,
												"ProductId": 1062
											},
											{
												"CustomerId": 88,
												"ProductId": 3231
											},
											{
												"CustomerId": 88,
												"ProductId": 172
											},
											{
												"CustomerId": 88,
												"ProductId": 7
											},
											{
												"CustomerId": 91,
												"ProductId": 323
											},
											{
												"CustomerId": 91,
												"ProductId": 1757
											},
											{
												"CustomerId": 91,
												"ProductId": 607
											},
											{
												"CustomerId": 91,
												"ProductId": 2995
											},
											{
												"CustomerId": 91,
												"ProductId": 2465
											},
											{
												"CustomerId": 91,
												"ProductId": 1271
											},
											{
												"CustomerId": 91,
												"ProductId": 4622
											}
										],
										"schema": {
											"CustomerId": "int",
											"ProductId": "int"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"ProductId"
											],
											"seriesFieldKeys": [
												"CustomerId"
											],
											"isStacked": false
										}
									}
								}
							},
							"872b6e86-89ef-4955-a965-3a0971274692": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"Quantity": "1",
												"ProductId": "4909",
												"CustomerId": "126061",
												"TotalAmount": "32.46100000000000262101451654",
												"ProfitAmount": "9.592000000000000774491581979",
												"Price": "29.510000000000000000",
												"StoreId": "3962",
												"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
												"TransactionDateId": "20170502",
												"Hour": "19",
												"Minute": "57"
											},
											{
												"Quantity": "1",
												"ProductId": "776",
												"CustomerId": "126061",
												"TotalAmount": "32.07600000000000258992827185",
												"ProfitAmount": "8.756000000000000706990022081",
												"Price": "29.160000000000000000",
												"StoreId": "3962",
												"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
												"TransactionDateId": "20170502",
												"Hour": "19",
												"Minute": "57"
											},
											{
												"Quantity": "2",
												"ProductId": "2928",
												"CustomerId": "126061",
												"TotalAmount": "68.26600000000000551203527266",
												"ProfitAmount": "23.98000000000000193622895495",
												"Price": "31.030000000000000000",
												"StoreId": "3962",
												"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
												"TransactionDateId": "20170502",
												"Hour": "19",
												"Minute": "57"
											},
											{
												"Quantity": "4",
												"ProductId": "180",
												"CustomerId": "126061",
												"TotalAmount": "113.5640000000000091695540050",
												"ProfitAmount": "36.56400000000000295230506708",
												"Price": "25.810000000000000000",
												"StoreId": "3962",
												"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
												"TransactionDateId": "20170502",
												"Hour": "19",
												"Minute": "57"
											},
											{
												"Quantity": "2",
												"ProductId": "150",
												"CustomerId": "126061",
												"TotalAmount": "57.97000000000000468070027182",
												"ProfitAmount": "19.95400000000000161115565334",
												"Price": "26.350000000000000000",
												"StoreId": "3962",
												"TransactionId": "a4116581-5aad-416a-b767-aefa516737b1",
												"TransactionDateId": "20170502",
												"Hour": "19",
												"Minute": "57"
											},
											{
												"Quantity": "3",
												"ProductId": "3163",
												"CustomerId": "126086",
												"TotalAmount": "85.27200000000000688515910952",
												"ProfitAmount": "26.13600000000000211031192521",
												"Price": "25.840000000000000000",
												"StoreId": "218",
												"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
												"TransactionDateId": "20170502",
												"Hour": "22",
												"Minute": "25"
											},
											{
												"Quantity": "1",
												"ProductId": "2110",
												"CustomerId": "126086",
												"TotalAmount": "26.05900000000000210409467627",
												"ProfitAmount": "7.271000000000000587085935422",
												"Price": "23.690000000000000000",
												"StoreId": "218",
												"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
												"TransactionDateId": "20170502",
												"Hour": "22",
												"Minute": "25"
											},
											{
												"Quantity": "4",
												"ProductId": "1895",
												"CustomerId": "126086",
												"TotalAmount": "149.4680000000000120685683669",
												"ProfitAmount": "46.28800000000000373745479010",
												"Price": "33.970000000000000000",
												"StoreId": "218",
												"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
												"TransactionDateId": "20170502",
												"Hour": "22",
												"Minute": "25"
											},
											{
												"Quantity": "1",
												"ProductId": "1037",
												"CustomerId": "126086",
												"TotalAmount": "33.01100000000000266542343752",
												"ProfitAmount": "7.711000000000000622613072210",
												"Price": "30.010000000000000000",
												"StoreId": "218",
												"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
												"TransactionDateId": "20170502",
												"Hour": "22",
												"Minute": "25"
											},
											{
												"Quantity": "1",
												"ProductId": "4203",
												"CustomerId": "126086",
												"TotalAmount": "21.68100000000000175059966523",
												"ProfitAmount": "7.337000000000000592415005940",
												"Price": "19.710000000000000000",
												"StoreId": "218",
												"TransactionId": "5455a4b4-62bd-401a-b5c6-79ea24f30531",
												"TransactionDateId": "20170502",
												"Hour": "22",
												"Minute": "25"
											}
										],
										"schema": {
											"TransactionId": "string",
											"CustomerId": "string",
											"ProductId": "string",
											"Quantity": "string",
											"Price": "string",
											"TotalAmount": "string",
											"TransactionDateId": "string",
											"ProfitAmount": "string",
											"Hour": "string",
											"Minute": "string",
											"StoreId": "string"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"TransactionId"
											],
											"seriesFieldKeys": [
												"TransactionId"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Exploring and fixing data with Synapse Spark\n",
							"\n",
							"In this task, you will use a Synapse Spark notebook to explore a few of the files in the `wwi-02/sale-poc` folder in the data lake. You will also use Python code to fix the issues with the `sale-20170502.csv` file, so all the files in the directory can be ingested using a Synapse Pipeline later in this lab.\n",
							"\n",
							"The first thing we need to is set a variable within the notebook to provide the name of your primary data lake storage account. Before executing the cell below, you will need to replace `[YOUR-DATA-LAKE-ACCOUNT-NAME]` with the name of the primary data lake storage account associated with your Syanpse workspace.\n",
							"\n",
							"You can find the name of your data lake storage account by navigating to the **Data** hub in Synapse Studio, selecting the **Linked** tab, and locating the storage account name that begins with **asadatalake** under **Azure Data Lake Storage Gen2**.\n",
							"\n",
							"![The primary data lake storage account is highlighted on the Data hub's Linked tab.](https://solliancepublicdata.blob.core.windows.net/images/synapse/data-hub-primary-data-lake-storage-account.png \"Primary ADLS Gen2 Account\")\n",
							"\n",
							"1. Copy the name of your data lake storage account and paste it in place of `[YOUR-DATA-LAKE-ACCOUNT-NAME]` in the cell below, then execute the cell by selecting the **Run cell** button that becomes visible when you select the cell.\n",
							"\n",
							"    ![The primary data lake storage account is highlighted on the Data hub's Linked tab.](https://solliancepublicdata.blob.core.windows.net/images/synapse/synapse-notebook-run-cell.png \"Primary ADLS Gen2 Account\")\n",
							"\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"adls_account_name = '[YOUR-DATA-LAKE-ACCOUNT-NAME]'"
						],
						"outputs": []
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploring files with Spark\n",
							"\n",
							"1. The first step in exploring data using Synapse Spark is to load a file from the data lake. For this, we can use the `spark.read.load()` method of the `SparkSession`.\n",
							"\n",
							"2. In Spark, we can load the data from our files into [DataFrames](https://spark.apache.org/docs/2.2.0/sql-programming-guide.html#datasets-and-dataframes), which are an abstraction that allows data to be structured in named columns. Execute the cell below to load the data from the `sale-20170501.csv` file into a data frame. You can run the cell by hovering your mouse over the left-hand side of the cell and then selecting the blue **Run cell** button.\n",
							"\n",
							"    ![The Run Cell button is highlighted to the left of the cell contents to execute.](https://solliancepublicdata.blob.core.windows.net/images/synapse/synapse-notebook-run-cell-load-sale-20170501-csv.png \"Run cell\")"
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# First, load the file `sale-20170501.csv` file, which we know from our previous exploration to be formatted correctly.\n",
							"# Note the use of the `header` and `inferSchema` parameters. Header indicates the first row of the file contains column headers,\n",
							"# and `inferSchema` instruct Spark to use data within the file to infer data types.\n",
							"df = spark.read.load(f'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20170501.csv', format='csv', header=True, inferSchema=True)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## View the contents of the DataFrame\n",
							"\n",
							"With the data from the `sale-20170501.csv` file loaded into a data frame, we can now use various methods of a data frame to explore the properties of the data.\n",
							"\n",
							"1. First, let's look at the data as it was imported. Execute the cell below to view and inspect the data in the data frame."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"TransactionId"
									],
									"values": [
										"CustomerId"
									],
									"yLabel": "CustomerId",
									"xLabel": "TransactionId",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"CustomerId\":{\"cdd2ed88-8aae-4295-884a-ac4d40c3c33c\":44,\"e067fc11-e07d-4517-bc93-f7dc4b44f35e\":18}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"2. Like we saw duing exploration with the SQL on-demand capabilities of Azure Synapse, Spark allows us to view and query against the data contained within files. \n",
							"\n",
							"3. Now, use the `printSchema()` method of the data frame to view the results of using the `inferSchema` parameter when creating the data frame. Execute the cell below and observe the output."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Now, print the inferred schema. We will need this information below to help with the missing headers in the May 2, 2017 file.\n",
							"df.printSchema()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"4. The `printSchema` method outputs both field names and data types that are based on the Spark engine's evaluation of the data contained within each field.\n",
							"\n",
							"    > We can use this information later to help define the schema for the poorly formed `sale-20170502.csv` file. In addition to the field names and data types, we should note the number of features or columns contained in the file. In this case, note that there are 11 fields. That will be used to determine where to split the single row of data.\n",
							"\n",
							"5. As an example of further exploration we can do, run the cell below to create and display a new data frame that contains an ordered list of distinct Customer and Product Id pairings. We can use these types of functions to find invalid or empty values quickly in targeted fields."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [
										"ProductId"
									],
									"yLabel": "ProductId",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"ProductId\":{\"\":189206}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Create a new data frame containing a list of distinct CustomerId and ProductId values in descending order of the CustomerId.\n",
							"df_distinct_products = df.select('CustomerId', 'ProductId').distinct().orderBy('CustomerId')\n",
							"\n",
							"# Display the first 100 rows of the resulting data frame.\n",
							"display(df_distinct_products.limit(100))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"6. Next, let's attempt to open and explore the `sale-20170502.csv` file using the `load()` method, as we did above."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Next, let's try to read in the May 2, 2017 file using the same `load()` method we used for the first file.\n",
							"df = spark.read.load(f'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20100502.csv', format='csv')\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"7. As we saw in T-SQL, we receive a similar error in Spark that the number of columns processed may have exceeded limit of 20480 columns. To work with the data in this file, we need to use more advanced methods, as you will see in the next section below.\n",
							""
						]
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Handling and fixing poorly formed CSV files\n",
							"\n",
							"> The steps below provide example code for fixing the poorly-formed CSV file, `sale-20170502.csv` we discovered during exploration of the files in the `wwi-02/sale-poc` folder. This is just one of many ways to handle \"fixing\" a poorly-formed CSV file using Spark.\n",
							"\n",
							"1. To \"fix\" the bad file, we need to take a programmatic approach, using Python to read in the contents of the file and then parse them to put them into the proper shape.\n",
							"\n",
							"    > To handle the data being in a single row, we can use the `textFile()` method of our `SparkContext` to read the file as a collection of rows into a resilient distributed dataset (RDD). This allows us to get around the errors around the number of columns because we are essentially getting a single string value stored in a single column.\n",
							"\n",
							"2. Execute the cell below to load the RDD with data from the file."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Import the NumPy library. NumPy is a python library used for working with arrays.\n",
							"import numpy as np\n",
							"\n",
							"# Read the CSV file into a resilient distributed dataset (RDD) as a text file. This will read each row of the file into rows in an RDD.\n",
							"rdd = sc.textFile(f'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20100502.csv')"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"3. With the data now stored in an RDD, we can access the first, and only, populated row in the RDD, and split that into individual fields. We know from our inspection of the file in Notepad++ that it all the fields are separated by a comma (,), so let's start by splitting on that to create an array of field values. Execute the cell below to create a data array."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Since we know there is only one row, grab the first row of the RDD and split in on the field delimiter (comma).\n",
							"data = rdd.first().split(',')\n",
							"\n",
							"field_count = len(data)\n",
							"# Print out the count of fields read into the array.\n",
							"print(field_count)"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"4. By splitting the row on the field delimiter, we created an array of all the individual field values in the file, the count of which you can see above.\n",
							"\n",
							"5. Now, run the cell below to do a quick calculation on the expected number of rows that will be generated by parsing every 11 fields into a single row."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"import math\n",
							"\n",
							"expected_row_count = math.floor(field_count / 11)\n",
							"print(f'The expected row count is: {expected_row_count}')"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "markdown",
						"source": [
							"6. Next, let's create an array to store the data associated with each \"row\".\n",
							"\n",
							"    > We will set the max_index to the number of columns that are expected in each row. We know from our exploration of other files in the `wwi-02/sale-poc` folder that they contain 11 columns, so that is the value we will set.\n",
							"\n",
							"7. In addition to setting variables, we will use the cell below to loop through the `data` array and assign every 11 values to a row. By doing this, we are able to \"split\" the data that was once a single row into appropriate rows containing the proper data and columns from the file.\n",
							"\n",
							"8. Execute the cell below to create an array of rows from the file data."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Create an array to store the data associated with each \"row\". Set the max_index to the number of columns that are in each row. This is 11, which we noted above when viewing the schema of the May 1 file.\n",
							"row_list = []\n",
							"max_index = 11\n",
							"\n",
							"# Now, we are going to loop through the array of values extracted from the single row of the file and build rows consisting of 11 columns.\n",
							"while max_index <= len(data):\n",
							"    row = [data[i] for i in np.arange(max_index-11, max_index)]\n",
							"    row_list.append(row)\n",
							"    max_index += 11\n",
							"\n",
							"print(f'The row array contains {len(row_list)} rows. The expected number of rows was {expected_row_count}.')"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"9. The last thing we need to do to be able to work with the file data as rows is to read it into a Spark DataFrame. In the cell below, we use the `createDataFrame()` method to convert the `row_list` array into a data frame, which also adding names for the columns. Column names are based on the schema we observed in the well formatted files in the `wwi-02/sale-poc` directory.\n",
							"\n",
							"10. Execute the cell below to create a data frame containing row data from the file and then display the first 10 rows."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"TransactionId"
									],
									"values": [
										"TransactionId"
									],
									"yLabel": "TransactionId",
									"xLabel": "TransactionId",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"TransactionId\":{\"5455a4b4-62bd-401a-b5c6-79ea24f30531\":5,\"a4116581-5aad-416a-b767-aefa516737b1\":5}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Finally, we can use the row_list we created above to create a DataFrame. We can add to this a schema parameter, which contains the column names we saw in the schema of the first file.\n",
							"df_fixed = spark.createDataFrame(row_list,schema=['TransactionId', 'CustomerId', 'ProductId', 'Quantity', 'Price', 'TotalAmount', 'TransactionDateId', 'ProfitAmount', 'Hour', 'Minute', 'StoreId'])\n",
							"display(df_fixed.limit(10))"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write the \"fixed\" file into the data lake\n",
							"\n",
							"1. The last step we will take as part of our exploration and file fixing process is to write the data back into the data lake, so it can be ingested following the same process as the other files in the `wwi-02/sale-poc` folder.\n",
							"\n",
							"2. Execute the cell below to save the data frame into the data lake a series of files in a folder named `sale-20170502-fixed`.\n",
							"\n",
							"    > Note: Spark parallelizes workloads across worker nodes, so when saving files, you will notice they are saved as a collection \"part\" files, and not as a single file. While there are some libraries you can use to create a single file, it is helpful to get used to working with files generated via Spark notebooks as they are natively created.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"source": [
							"df.write.format('csv').option('header',True).mode('overwrite').option('sep',',').save(f'abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-poc/sale-20170502-fixed')"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Inspect the fixed file in the data lake\n",
							"\n",
							"1. With the fixed file written to the data lake, you can quickly inpsect it to verify the files are now formatted properly. Select the `wwi-02` tab above and then double-click on the `sale-20170502-fixed` folder.\n",
							"\n",
							"    ![](https://solliancepublicdata.blob.core.windows.net/images/synapse/wwi-02-sale-poc-sale-20170502-fixed.png)\n",
							"\n",
							"2. In the `sale-20170502-fixed` folder, right-click the first file whose name begins with `part` and whose extension is `.csv` and select **Preview** from the context menu.\n",
							"\n",
							"    ![](https://solliancepublicdata.blob.core.windows.net/images/synapse/wwi-02-sale-poc-sale-20170502-fixed-content.png)\n",
							"\n",
							"3. In the **Preview** dialog, verify you see the proper columns and that the data looks valid in each field.\n",
							"\n",
							"    ![](https://solliancepublicdata.blob.core.windows.net/images/synapse/sale-20170502-fixed-preview.png)\n",
							"\n",
							"## Wrap-up\n",
							"\n",
							"Throughout this exercise, you used a Spark notebook to explore data stored within files in the data lake. You used Python code to extract data from a poorly formatted CSV file, assemble the data from that file into proper rows, and then write the \"fixed\" file back out into your data lake.\n",
							"\n",
							"You can now return to the lab guide to continue with the next section of Lab 2.\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"a = spark.conf.get(\"spark.sql.warehouse.dir\")\r\n",
							"b = spark.conf.get(\"spark.sql.hive.metastore.version\")\r\n",
							"c = spark.sparkContext.getConf().getAll()\r\n",
							"# c = spark.conf.get(\"hive.metastore.uris\")\r\n",
							"# c =spark.catalog.listFunctions()\r\n",
							"d = spark.conf.get(\"spark.sql.catalogImplementation\")\r\n",
							"e = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionDriverName\")\r\n",
							"f = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionURL\") \r\n",
							"g = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionPassword\") \r\n",
							"h = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionUserName\")\r\n",
							"\r\n",
							"print(\"spark.sql.warehouse.dir:\", a)\r\n",
							"print(\"spark.sql.hive.metastore.version:\", b)\r\n",
							"#print (c)\r\n",
							"print (\"spark.sql.catalogImplementation: \", d)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionDriverName: \" , e)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionURL: \", f)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionPassword: \", g)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionUserName: \", h)"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"h = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionUserName\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab_04_Writing')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"d0c1424c-44cf-4163-a169-29dab11b6418": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"Quantity": 1,
												"ProductId": 4741,
												"CustomerId": 15,
												"TotalAmount": 22.82,
												"ProfitAmount": 7.09,
												"Price": 22.82,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											},
											{
												"Quantity": 1,
												"ProductId": 1584,
												"CustomerId": 15,
												"TotalAmount": 22.57,
												"ProfitAmount": 6.45,
												"Price": 22.57,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											},
											{
												"Quantity": 2,
												"ProductId": 2930,
												"CustomerId": 15,
												"TotalAmount": 56,
												"ProfitAmount": 15,
												"Price": 28,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											},
											{
												"Quantity": 1,
												"ProductId": 4738,
												"CustomerId": 15,
												"TotalAmount": 20.1,
												"ProfitAmount": 5.3,
												"Price": 20.1,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											},
											{
												"Quantity": 4,
												"ProductId": 4036,
												"CustomerId": 15,
												"TotalAmount": 86.12,
												"ProfitAmount": 27.2,
												"Price": 21.53,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											},
											{
												"Quantity": 3,
												"ProductId": 936,
												"CustomerId": 15,
												"TotalAmount": 53.61,
												"ProfitAmount": 17.34,
												"Price": 17.87,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											},
											{
												"Quantity": 1,
												"ProductId": 53,
												"CustomerId": 15,
												"TotalAmount": 30.18,
												"ProfitAmount": 8.04,
												"Price": 30.18,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											},
											{
												"Quantity": 1,
												"ProductId": 64,
												"CustomerId": 15,
												"TotalAmount": 31.28,
												"ProfitAmount": 9.69,
												"Price": 31.28,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											},
											{
												"Quantity": 2,
												"ProductId": 103,
												"CustomerId": 15,
												"TotalAmount": 51.78,
												"ProfitAmount": 14.1,
												"Price": 25.89,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											},
											{
												"Quantity": 4,
												"ProductId": 190,
												"CustomerId": 15,
												"TotalAmount": 98.6,
												"ProfitAmount": 26.8,
												"Price": 24.65,
												"StoreId": 9490,
												"TransactionId": "39137418-490d-491c-99d5-4dfb1a8fe967",
												"TransactionDate": 20190301,
												"Hour": 20,
												"Minute": 9
											}
										],
										"schema": {
											"TransactionId": "string",
											"CustomerId": "int",
											"ProductId": "smallint",
											"Quantity": "tinyint",
											"Price": "decimal",
											"TotalAmount": "decimal",
											"TransactionDate": "int",
											"ProfitAmount": "decimal",
											"Hour": "tinyint",
											"Minute": "tinyint",
											"StoreId": "smallint"
										}
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"TransactionId"
											],
											"seriesFieldKeys": [
												"CustomerId"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q1/Month=3/Day=20190301/sale-small-20190301-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.write.parquet('abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q1/Month=3/Day=20190301/sale-small-20190301-snappy-test.parquet')"
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MSSparkUtils')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Lab01_Synapse_Spark"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"#\r\n",
							"# Microsoft Spark Utilities\r\n",
							"#\r\n",
							"# https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python\r\n",
							"#\r\n",
							"\r\n",
							"# Azure storage access info\r\n",
							"blob_account_name = datalake\r\n",
							"blob_container_name = 'wwi-02'\r\n",
							"blob_relative_path = '/'\r\n",
							"linkedServiceName = datalake\r\n",
							"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linkedServiceName)\r\n",
							"\r\n",
							"# Allow SPARK to access from Blob remotely\r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)\r\n",
							"\r\n",
							"mssparkutils.fs.mkdirs('/SomeNewFolder')\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool1MetastoreConfig')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Metastore"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "cf0e9b9f-65e9-4f06-a543-83e825dddd8f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"93148b91-6ccc-4473-bf53-1e28f1b68ef4": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "spark.sparkContextAfterInit.plugins",
												"1": "org.apache.spark.microsoft.tools.api.plugin.MSToolsSparkContextAfterInitPlugin"
											},
											{
												"0": "spark.sql.warehouse.dir",
												"1": "abfss://tempdata@asadatalakeimre.dfs.core.windows.net/synapse/workspaces/asaworkspaceimre/warehouse"
											},
											{
												"0": "spark.driver.cores",
												"1": "4"
											},
											{
												"0": "spark.databricks.delta.vacuum.parallelDelete.enabled",
												"1": "true"
											},
											{
												"0": "spark.serializer",
												"1": "org.apache.spark.serializer.JavaSerializer"
											},
											{
												"0": "spark.ui.advise.hub.impl.class",
												"1": "org.apache.spark.advise.DefaultAdviseHub"
											},
											{
												"0": "spark.yarn.containerLauncherMaxThreads",
												"1": "25"
											},
											{
												"0": "spark.hadoop.javax.jdo.option.ConnectionUserName",
												"1": ""
											},
											{
												"0": "spark.shuffle.io.serverThreads",
												"1": "128"
											},
											{
												"0": "spark.livy.server.session.timeout",
												"1": "1800000"
											},
											{
												"0": "spark.yarn.jars",
												"1": "local:///opt/spark/jars/*"
											},
											{
												"0": "spark.sql.hive.metastore.version",
												"1": "2.3.2"
											},
											{
												"0": "spark.dotnet.ignoreSparkPatchVersionCheck",
												"1": "true"
											},
											{
												"0": "spark.shuffle.file.buffer",
												"1": "1m"
											},
											{
												"0": "spark.cluster.environment.type",
												"1": "PROD"
											},
											{
												"0": "spark.dotnet.nuget.fallbackPackagesPath",
												"1": "/usr/local/lib/sparkdotnet/.nuget/packages"
											},
											{
												"0": "spark.arcadia.session.token",
												"1": "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Iiwia2lkIjoiMUEzRDU5QzI2ODg3NjUzMkZGOEU4QkEwNDUxMjRDOENDQkYyRThFMCIsInR5cCI6IkpXVCJ9.eyJhdXRoVG9rZW4iOiJBQUVBRkJvOVdjSm9oMlV5LzQ2TG9FVVNUSXpMOHVqZ0FRQnk4QkxCWHFtZUdDWU04SGQ1K2wwK3BwNDVWZ2NGZ0dXZGF3ZVZLSlRzbG5jeWFSS0Z5ZjhxRHNrZjFwVnNZMzF6YzhFMEpNTkI5dnl2V2xGeExEK04raXBkTGdZeTB3ZHhkclhva25wbmNBWUJ3U1RERlpUL0lFWEc5cnhjbWM2TFIwQkFxbGFOVXpkbFBocW83WFM5R3dMc0JWdmsxZFFkend4MmFOVml5RUVXUmVXRWxaZkF2aVFUeGZFbVMvYkhVZUlNeUhDbzd6eFd1WUpJeUhhVW5waVJFOTBwRVZBVFZPNFVIdHJjRDZZYkJNeG1HRm03cVJIWjZQRXhzWlA5Vk9LTUE2dEJqNnI1Vko2U1hMOGRCbkZQeVo0cU9CamgyMktsay94WFRhemMwaVNGeE5ndU1nNHF6VW1MWUZ6MUM5Tzh2SlVUNWhiS05USmdGdHluQUJEYkowdkdQSHVVL0NTZHJJaHRLWE5VQVdBbDBjaHNrN1FFaUVod3Zod1VYYkNvNzFqZHlMMlZCdytuWnFLaW8vVDlQdWtqQjVCblc4NG5LbVZ4OEQwbmJyWXI2cjJUdzc1eTNsaENEbm1QS25SNm91aFhpMmRUWVp4UVg2KzJGM1RRUGRDUkRIcElRMlBuTXF3bDUwMGdNa1BlT04vWGVPQy9sNWhqMjFQVDNFRnBFZHAvM1hsRlhySExSdTVlTlc1c1RqK1NwR29LUjhPREZLL1FaZzQ0Sk5lYjNkQnNDeW45MG5RK0xIRmRvL2UyYWxGb0FDWXhQN0dTNVZFLzBHdFkvSXBrVVE2NExvUEk1OW15blUyb25nTzMyU2hYc2JLQ2FKSHhBWHNqWnU1cGxoSGVBcE9NRTJleUdEbHZ1TlVzWXhMelV6ZW9HbnZsZk1RUnk1bUxhUkU0K0NPWkxjbFUwUjlZdXE0RXFIYXU5MG0rb0FPRDZiaCtEbW1MRXRidm9qMCsrZERKRXFoWEZYWlRNMUQ2eDF3RlR1L1VNV21qNzVTRXZQbnEvZUFtWHVtKzgxSGhVVjRET2dLNHU3Ykc2SnNrZEthRzZ4bWI2Zk5QUExRSmgrM1U2eWRrenRJb0RlYUIxdFUxTHQvMSIsInNpZ25hdHVyZVBheWxvYWQiOnsidXNlcklkIjoiNzRmYWI5ZWQtOTI0NS00NTQ0LWE2YjQtOWM0YWFiOWJmYjVmIiwiam9iSWQiOiIwIiwiY2x1c3RlcklkIjoiN2ZiNjZmZTUtZDRhZS00ODQ0LThmMjMtZTc5YzVlZjBjYTEyIiwid29ya3NwYWNlTmFtZSI6ImFzYXdvcmtzcGFjZWltcmUiLCJ3b3Jrc3BhY2VUeXBlIjoiU3luYXBzZSIsIndvcmtzcGFjZVVJRCI6ImNmYzdiYTdiLWNkZTUtNGI3My1hOTI4LThlOGUyMDYyZGI0MyIsImNvbXB1dGVOYW1lIjoiU3BhcmtQb29sMDEiLCJqb2JUeXBlIjoiU3BhcmtTZXJ2aWNlU2Vzc2lvbiJ9LCJmYWN0b3J5TG9jYXRpb24iOiJlYXN0dXMifQ.kHXXbrprLqU3FvjSvog47PQTLII-RwWg8FFNhXDGyB1N9ZIeAHBQwL2IcFSvB-Zj6U5Nk-FzCHpw130Wpt064hXMNjA42S6WAOWFd8OhQHYvwn8eKZ9q8gHqgscHM5AyPLyzwc8crGq5EBCAzsqQ0zUlufG24sbHx1SxiltxOCxN2R8OKZJKZxqHqCvqnmffQB3CVPxVpl9TWfJrgieJApChaMsddGzUaXM2pPw2GpAmgYNMyYOP9GSHk2Cn8O4kJFrGfsvx-EwIJBrTYdCfbJTvOzZn0HZSbHAXrtCfientbV-0D87XIJF78eUMxA_idihgNWqLounxnon1Ox50sQ"
											},
											{
												"0": "spark.advise.nameToClass.TimeSkew",
												"1": "com.microsoft.impulse.insights.TimeSkewInsight"
											},
											{
												"0": "spark.sql.window.sort.optimization.enabled",
												"1": "false"
											},
											{
												"0": "spark.yarn.app.id",
												"1": "application_1670000821406_0001"
											},
											{
												"0": "spark.delta.logStore.class",
												"1": "org.apache.spark.sql.delta.storage.AzureLogStore"
											},
											{
												"0": "spark.autotune.trackingId",
												"1": "dc4044e1-9159-4abc-bf84-202473d0d1ef"
											},
											{
												"0": "spark.sql.legacy.replaceDatabricksSparkAvro.enabled",
												"1": "false"
											},
											{
												"0": "spark.hadoop.fs.azure.block.blob.with.compaction.dir",
												"1": "wasbs://61531924-6c3a-4b37-955b-80bdd38ebe73@d6wxk2b70qpfb1pt9xx1wb40.blob.core.windows.net/events/0/eventLogs/"
											},
											{
												"0": "spark.sql.catalyst.optimizer.blitz.enabled",
												"1": "true"
											},
											{
												"0": "spark.yarn.nodeStateNotification.enabled",
												"1": "true"
											},
											{
												"0": "spark.synapse.history.rpc.update.retry.maxNumber",
												"1": "3"
											},
											{
												"0": "spark.synapse.diagnostic.emitter.ShoeboxEmitter.type",
												"1": "Shoebox"
											},
											{
												"0": "spark.synapse.clusteridentifier",
												"1": "7fb66fe5-d4ae-4844-8f23-e79c5ef0ca12"
											},
											{
												"0": "spark.advise.nameToClass.SparkStopAdvise",
												"1": "org.apache.spark.advise.SparkStopAdvise"
											},
											{
												"0": "spark.dynamicAllocation.disableIfMinMaxNotSpecified.enabled",
												"1": "true"
											},
											{
												"0": "spark.dynamicAllocation.maxExecutors",
												"1": "2"
											},
											{
												"0": "spark.livy.spark_major_version",
												"1": "2"
											},
											{
												"0": "spark.repl.class.outputDir",
												"1": "/mnt/var/hadoop/tmp/nm-local-dir/usercache/trusted-service-user/appcache/application_1670000821406_0001/container_1670000821406_0001_01_000001/tmp/spark7329507379425084425"
											},
											{
												"0": "spark.synapse.session.token",
												"1": "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2Iiwia2lkIjoiMUEzRDU5QzI2ODg3NjUzMkZGOEU4QkEwNDUxMjRDOENDQkYyRThFMCIsInR5cCI6IkpXVCJ9.eyJhdXRoVG9rZW4iOiJBQUVBRkJvOVdjSm9oMlV5LzQ2TG9FVVNUSXpMOHVqZ0FRQnk4QkxCWHFtZUdDWU04SGQ1K2wwK3BwNDVWZ2NGZ0dXZGF3ZVZLSlRzbG5jeWFSS0Z5ZjhxRHNrZjFwVnNZMzF6YzhFMEpNTkI5dnl2V2xGeExEK04raXBkTGdZeTB3ZHhkclhva25wbmNBWUJ3U1RERlpUL0lFWEc5cnhjbWM2TFIwQkFxbGFOVXpkbFBocW83WFM5R3dMc0JWdmsxZFFkend4MmFOVml5RUVXUmVXRWxaZkF2aVFUeGZFbVMvYkhVZUlNeUhDbzd6eFd1WUpJeUhhVW5waVJFOTBwRVZBVFZPNFVIdHJjRDZZYkJNeG1HRm03cVJIWjZQRXhzWlA5Vk9LTUE2dEJqNnI1Vko2U1hMOGRCbkZQeVo0cU9CamgyMktsay94WFRhemMwaVNGeE5ndU1nNHF6VW1MWUZ6MUM5Tzh2SlVUNWhiS05USmdGdHluQUJEYkowdkdQSHVVL0NTZHJJaHRLWE5VQVdBbDBjaHNrN1FFaUVod3Zod1VYYkNvNzFqZHlMMlZCdytuWnFLaW8vVDlQdWtqQjVCblc4NG5LbVZ4OEQwbmJyWXI2cjJUdzc1eTNsaENEbm1QS25SNm91aFhpMmRUWVp4UVg2KzJGM1RRUGRDUkRIcElRMlBuTXF3bDUwMGdNa1BlT04vWGVPQy9sNWhqMjFQVDNFRnBFZHAvM1hsRlhySExSdTVlTlc1c1RqK1NwR29LUjhPREZLL1FaZzQ0Sk5lYjNkQnNDeW45MG5RK0xIRmRvL2UyYWxGb0FDWXhQN0dTNVZFLzBHdFkvSXBrVVE2NExvUEk1OW15blUyb25nTzMyU2hYc2JLQ2FKSHhBWHNqWnU1cGxoSGVBcE9NRTJleUdEbHZ1TlVzWXhMelV6ZW9HbnZsZk1RUnk1bUxhUkU0K0NPWkxjbFUwUjlZdXE0RXFIYXU5MG0rb0FPRDZiaCtEbW1MRXRidm9qMCsrZERKRXFoWEZYWlRNMUQ2eDF3RlR1L1VNV21qNzVTRXZQbnEvZUFtWHVtKzgxSGhVVjRET2dLNHU3Ykc2SnNrZEthRzZ4bWI2Zk5QUExRSmgrM1U2eWRrenRJb0RlYUIxdFUxTHQvMSIsInNpZ25hdHVyZVBheWxvYWQiOnsidXNlcklkIjoiNzRmYWI5ZWQtOTI0NS00NTQ0LWE2YjQtOWM0YWFiOWJmYjVmIiwiam9iSWQiOiIwIiwiY2x1c3RlcklkIjoiN2ZiNjZmZTUtZDRhZS00ODQ0LThmMjMtZTc5YzVlZjBjYTEyIiwid29ya3NwYWNlTmFtZSI6ImFzYXdvcmtzcGFjZWltcmUiLCJ3b3Jrc3BhY2VUeXBlIjoiU3luYXBzZSIsIndvcmtzcGFjZVVJRCI6ImNmYzdiYTdiLWNkZTUtNGI3My1hOTI4LThlOGUyMDYyZGI0MyIsImNvbXB1dGVOYW1lIjoiU3BhcmtQb29sMDEiLCJqb2JUeXBlIjoiU3BhcmtTZXJ2aWNlU2Vzc2lvbiJ9LCJmYWN0b3J5TG9jYXRpb24iOiJlYXN0dXMifQ.kHXXbrprLqU3FvjSvog47PQTLII-RwWg8FFNhXDGyB1N9ZIeAHBQwL2IcFSvB-Zj6U5Nk-FzCHpw130Wpt064hXMNjA42S6WAOWFd8OhQHYvwn8eKZ9q8gHqgscHM5AyPLyzwc8crGq5EBCAzsqQ0zUlufG24sbHx1SxiltxOCxN2R8OKZJKZxqHqCvqnmffQB3CVPxVpl9TWfJrgieJApChaMsddGzUaXM2pPw2GpAmgYNMyYOP9GSHk2Cn8O4kJFrGfsvx-EwIJBrTYdCfbJTvOzZn0HZSbHAXrtCfientbV-0D87XIJF78eUMxA_idihgNWqLounxnon1Ox50sQ"
											},
											{
												"0": "spark.blockmanager.decommission.enabled",
												"1": "true"
											},
											{
												"0": "spark.history.store.path",
												"1": "/var/lib/spark2/shs_db"
											},
											{
												"0": "spark.sql.cbo.enabled",
												"1": "true"
											},
											{
												"0": "spark.jarLoadOrder.userJarFirst",
												"1": "true"
											},
											{
												"0": "spark.synapse.jobidentifier",
												"1": "asaworkspaceimre.SparkPool01.0"
											},
											{
												"0": "spark.sql.preaggregation.enabled",
												"1": "true"
											},
											{
												"0": "spark.submit.deployMode",
												"1": "cluster"
											},
											{
												"0": "spark.driver.port",
												"1": "33971"
											},
											{
												"0": "spark.org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.param.PROXY_HOSTS",
												"1": "vm-9c776164,vm-dbb75841"
											},
											{
												"0": "spark.org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.param.PROXY_URI_BASES",
												"1": "http://vm-9c776164:8088/proxy/application_1670000821406_0001,http://vm-dbb75841:8088/proxy/application_1670000821406_0001"
											},
											{
												"0": "spark.sql.catalyst.optimizer.blitz.boundedOutput.enabled",
												"1": "true"
											},
											{
												"0": "spark.advise.nameToClass.TaskError",
												"1": "com.microsoft.impulse.insights.TaskErrorInsight"
											},
											{
												"0": "spark.sqlanalyticsconnector.stagingdir.prefix",
												"1": "abfss://tempdata@asadatalakeimre.dfs.core.windows.net/synapse/workspaces/asaworkspaceimre/sparkpools/SparkPool01/sparkpoolinstances/74fab9ed-9245-4544-a6b4-9c4aab9bfb5f/livysessions/2022/12/02/0/tempdata/"
											},
											{
												"0": "spark.yarn.app.container.log.dir",
												"1": "/var/log/yarn-nm/userlogs/application_1670000821406_0001/container_1670000821406_0001_01_000001"
											},
											{
												"0": "spark.executor.cores",
												"1": "4"
											},
											{
												"0": "spark.history.fs.cleaner.interval",
												"1": "30d"
											},
											{
												"0": "spark.synapse.diagnostic.builtinEmitters",
												"1": "ShoeboxEmitter"
											},
											{
												"0": "spark.yarn.preserve.staging.files",
												"1": "false"
											},
											{
												"0": "spark.hadoop.fs.azure.client.correlationid ",
												"1": "e4003b4c-d8a5-49d2-915b-4a2bc547dfa4"
											},
											{
												"0": "spark.sql.crossJoin.enabled",
												"1": "true"
											},
											{
												"0": "spark.submit.pyFiles",
												"1": "local:///opt/spark/python/lib/pyspark.zip,local:///opt/spark/python/lib/py4j-0.10.7-src.zip"
											},
											{
												"0": "spark.executor.instances",
												"1": "2"
											},
											{
												"0": "spark.driver.maxResultSize",
												"1": "4096m"
											},
											{
												"0": "spark.yarn.secondary.jars",
												"1": "local:///opt/livy/rsc-jars/livy-rsc.jar,local:///opt/livy/rsc-jars/livy-api.jar,local:///opt/livy/rsc-jars/netty-all-4.1.17.Final.jar,local:///opt/livy/rsc-jars/log4j-api.jar,local:///opt/livy/rsc-jars/log4j-core.jar,local:///opt/livy/rsc-jars/livy-logging.jar,local:///opt/livy/repl_2.11-jars/livy-repl.jar,local:///opt/livy/repl_2.11-jars/livy-core.jar,local:///opt/livy/repl_2.11-jars/commons-codec-1.9.jar,local:///opt/livy/repl_2.11-jars/livy-logging.jar"
											},
											{
												"0": "spark.tokenServiceEndpoint",
												"1": "tokenservice1.eastus.azuresynapse.net:443"
											},
											{
												"0": "spark.synapse.nbs.kernelid",
												"1": "528684d6-de82-40c7-bb14-da4e277f9942"
											},
											{
												"0": "spark.yarn.appMasterEnv.PYSPARK3_PYTHON",
												"1": "/home/trusted-service-user/cluster-env/env/bin/python3"
											},
											{
												"0": "spark.sql.extensions",
												"1": "io.delta.sql.DeltaSparkSessionExtension,com.microsoft.azure.synapse.cardinalEstimate.CardinalExtensionBuilder,com.microsoft.peregrine.spark.extensions.SparkExtensionsSynapse,org.apache.spark.advise.input.AdviseSqlExtension"
											},
											{
												"0": "spark.app.name",
												"1": "SynapseCredentialPy"
											},
											{
												"0": "spark.driver.host",
												"1": "vm-9c776164"
											},
											{
												"0": "spark.synapse.context.pipelinejobid",
												"1": ""
											},
											{
												"0": "spark.driver.extraLibraryPath",
												"1": "/usr/hdp/current/hadoop-client/lib/native"
											},
											{
												"0": "spark.livy.synapse.cancelImprovement.enabled",
												"1": "true"
											},
											{
												"0": "spark.livy.synapse.sql.displayFormatter.enabled",
												"1": "True"
											},
											{
												"0": "spark.yarn.stagingDir",
												"1": "wasbs://61531924-6c3a-4b37-955b-80bdd38ebe73@d6wxk2b70qpfb1pt9xx1wb40.blob.core.windows.net/user/trusted-service-user/"
											},
											{
												"0": "spark.synapse.history.rpc.update.retry.waitMs",
												"1": "5000"
											},
											{
												"0": "spark.synapse.history.rpc.sparkContext.enabled",
												"1": "true"
											},
											{
												"0": "spark.inputOutput.data.enabled",
												"1": "true"
											},
											{
												"0": "spark.nonjvm.error.buffer.size",
												"1": "10400"
											},
											{
												"0": "spark.hyperspace.eventLoggerClass",
												"1": "com.microsoft.hyperspace.telemetry.synapse.SynapseLogger"
											},
											{
												"0": "spark.appLiveStatusPlugins",
												"1": "org.apache.spark.ui.EnhancementLiveStatusPlugin,org.apache.spark.diagnostic.synapse.SparkDiagnosticPlugin,org.apache.spark.deploy.history.rpc.app.RpcAppLivePlugin"
											},
											{
												"0": "spark.master",
												"1": "yarn"
											},
											{
												"0": "spark.driver.memoryOverhead",
												"1": "384"
											},
											{
												"0": "spark.sql.orc.filterPushdown",
												"1": "true"
											},
											{
												"0": "spark.shuffle.io.backLog",
												"1": "8192"
											},
											{
												"0": "spark.livy.synapse.skipSplitCodeExecution.enabled",
												"1": "true"
											},
											{
												"0": "spark.synapse.history.rpc.update.intervalMs",
												"1": "1000"
											},
											{
												"0": "spark.synapse.rpc.listener.historyServer.address",
												"1": "${hadoopconf-yarn.resourcemanager.hostname.rm1}"
											},
											{
												"0": "spark.cluster.region",
												"1": "eastus"
											},
											{
												"0": "spark.eventLog.buffer.kb",
												"1": "4k"
											},
											{
												"0": "spark.cluster.name",
												"1": "7fb66fe5-d4ae-4844-8f23-e79c5ef0ca12"
											},
											{
												"0": "spark.unsafe.sorter.spill.reader.buffer.size",
												"1": "1m"
											},
											{
												"0": "spark.nonjvm.error.forwarding.enabled",
												"1": "True"
											},
											{
												"0": "spark.ui.enhancement.enabled",
												"1": "true"
											},
											{
												"0": "spark.eventLog.enabled",
												"1": "true"
											},
											{
												"0": "spark.synapse.history.rpc.update.timeoutMs",
												"1": "5000"
											},
											{
												"0": "spark.sql.hive.metastore.jars",
												"1": "/opt/hive-metastore/lib/*"
											},
											{
												"0": "spark.synapse.history.rpc.waitAppStart.enabled",
												"1": "true"
											},
											{
												"0": "spark.driver.extraClassPath",
												"1": "/usr/lib/library-manager/bin/libraries/scala/*"
											},
											{
												"0": "spark.shuffle.service.client.class",
												"1": "org.apache.spark.network.shuffle.ExternalFsShuffleClientWithMetrics"
											},
											{
												"0": "spark.synapse.history.rpc.update.delayMs",
												"1": "2000"
											},
											{
												"0": "spark.executor.decommissioning.enabled",
												"1": "true"
											},
											{
												"0": "spark.executor.memoryOverhead",
												"1": "384"
											},
											{
												"0": "spark.shuffle.service.decommissioning.enabled",
												"1": "true"
											},
											{
												"0": "spark.extraListeners",
												"1": "com.microsoft.hdinsight.spark.metrics.SparkMetricsListener,com.microsoft.peregrine.spark.listeners.PeregrineListenerSynapse,org.apache.spark.listeners.LogAnalyticsSparkListener,com.microsoft.impulse.analyze.eventLog.ImpulseListener"
											},
											{
												"0": "spark.sql.hive.convertMetastoreOrc",
												"1": "true"
											},
											{
												"0": "spark.driver.extraJavaOptions",
												"1": "-Dlog4j2.configurationFile=/opt/livy/conf/log4j2-client.xml -Detwlogger.component=sparkdriver -DlogFilter.filename=SparkLogFilters.xml -DpatternGroup.filename=SparkPatternGroups.xml -Dlog4jspark.root.logger=INFO,console,RFA,ETW,Anonymizer -Dlog4jspark.log.dir=/var/log/sparkapp/${user.name} -Dlog4jspark.log.file=sparkdriver.log -Dlog4j.configuration=file:/usr/hdp/current/spark2-client/conf/driver-log4j.properties -Djavax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl -XX:+UseParallelGC -XX:+UseParallelOldGC -XX:+TieredCompilation -XX:Tier4CompileThreshold=150000 -noverify"
											},
											{
												"0": "spark.repl.class.uri",
												"1": "spark://vm-9c776164:33971/classes"
											},
											{
												"0": "spark.sql.autoBroadcastJoinThreshold",
												"1": "26214400"
											},
											{
												"0": "spark.shuffle.service.shuffleCleanup.enabled",
												"1": "true"
											},
											{
												"0": "spark.advise.nameToClass.RandomSplitInconsistentAdvise",
												"1": "org.apache.spark.advise.RandomSplitInconsistentAdvise"
											},
											{
												"0": "spark.ui.filters",
												"1": "org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter"
											},
											{
												"0": "spark.synapse.context.notebookname",
												"1": "SparkPool1MetastoreConfig"
											},
											{
												"0": "spark.yarn.scheduler.heartbeat.interval-ms",
												"1": "1000"
											},
											{
												"0": "spark.livy.session.type",
												"1": "interactive"
											},
											{
												"0": "spark.dotnet.shell.command",
												"1": "/usr/share/dotnet-tools/dotnet-interactive,[synapse],stdio,--default-kernel,csharp"
											},
											{
												"0": "spark.yarn.am.waitTime",
												"1": "600s"
											},
											{
												"0": "spark.synapse.diagnostic.emitter.ShoeboxEmitter.proxyServiceIp",
												"1": ""
											},
											{
												"0": "spark.advise.nameToClass.DriverError",
												"1": "com.microsoft.impulse.insights.DriverErrorInsight"
											},
											{
												"0": "spark.yarn.dist.pyFiles",
												"1": "local:///opt/spark/python/lib/pyspark.zip,local:///opt/spark/python/lib/py4j-0.10.7-src.zip"
											},
											{
												"0": "spark.synapse.pool.name",
												"1": "SparkPool01"
											},
											{
												"0": "spark.locality.wait",
												"1": "1"
											},
											{
												"0": "spark.app.id",
												"1": "application_1670000821406_0001"
											},
											{
												"0": "spark.dotnet.packages",
												"1": "nuget:Microsoft.Spark,1.0.1;nuget:Microsoft.Spark.Extensions.DotNet.Interactive,1.0.1;nuget:Microsoft.Spark.Extensions.Delta,1.0.1;nuget:Microsoft.Spark.Extensions.Hyperspace,1.0.1;nuget:Microsoft.Spark.Extensions.Azure.Synapse.Analytics,0.15.0"
											},
											{
												"0": "spark.executor.id",
												"1": "driver"
											},
											{
												"0": "spark.stop.improvement.enabled",
												"1": "true"
											},
											{
												"0": "spark.synapse.rpc.listener.nodeInfo.path",
												"1": "/etc/bbc/nodes.json"
											},
											{
												"0": "spark.sql.orc.impl",
												"1": "native"
											},
											{
												"0": "spark.rdd.compress",
												"1": "true"
											},
											{
												"0": "spark.executor.memory",
												"1": "28g"
											},
											{
												"0": "spark.cluster.environment.name",
												"1": "Arcadia-Cluster-Service-PROD-EastUS"
											},
											{
												"0": "spark.livy.synapse.ipythonInterpreter.enabled",
												"1": "true"
											},
											{
												"0": "spark.livy.pipeInteractiveConsoleBacktoSparkConsole.enabled",
												"1": "true"
											},
											{
												"0": "spark.sql.catalogImplementation",
												"1": "hive"
											},
											{
												"0": "spark.cluster.node.name",
												"1": "vm-dbb75841"
											},
											{
												"0": "spark.synapse.context.activityrunid",
												"1": ""
											},
											{
												"0": "spark.synapse.history.rpc.port",
												"1": "18082"
											},
											{
												"0": "spark.advisor.enabled",
												"1": "true"
											},
											{
												"0": "spark.executor.extraClassPath",
												"1": "/usr/lib/library-manager/bin/libraries/scala/*"
											},
											{
												"0": "spark.history.fs.cleaner.enabled",
												"1": "false"
											},
											{
												"0": "spark.dynamicAllocation.enabled",
												"1": "false"
											},
											{
												"0": "spark.yarn.appMasterEnv.MMLSPARK_PLATFORM_INFO",
												"1": "synapse"
											},
											{
												"0": "spark.yarn.dist.jars",
												"1": "local:///opt/livy/rsc-jars/livy-rsc.jar,local:///opt/livy/rsc-jars/livy-api.jar,local:///opt/livy/rsc-jars/netty-all-4.1.17.Final.jar,local:///opt/livy/rsc-jars/log4j-api.jar,local:///opt/livy/rsc-jars/log4j-core.jar,local:///opt/livy/rsc-jars/livy-logging.jar,local:///opt/livy/repl_2.11-jars/livy-repl.jar,local:///opt/livy/repl_2.11-jars/livy-core.jar,local:///opt/livy/repl_2.11-jars/commons-codec-1.9.jar,local:///opt/livy/repl_2.11-jars/livy-logging.jar"
											},
											{
												"0": "spark.sql.execution.arrow.enabled",
												"1": "true"
											},
											{
												"0": "spark.redaction.regex",
												"1": "(?i)secret|password|session.token"
											},
											{
												"0": "spark.advise.nameToClass.ExecutorError",
												"1": "com.microsoft.impulse.insights.ExecutorErrorInsight"
											},
											{
												"0": "spark.org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.param.RM_HA_URLS",
												"1": "vm-9c776164:8088,vm-dbb75841:8088"
											},
											{
												"0": "spark.advise.nameToClass.DataSkew",
												"1": "com.microsoft.impulse.insights.DataSkewInsight"
											},
											{
												"0": "spark.yarn.submit.waitAppCompletion",
												"1": "false"
											},
											{
												"0": "spark.sql.bloom.enabled",
												"1": "false"
											},
											{
												"0": "spark.synapse.history.rpc.message.maxSize",
												"1": "10485760"
											},
											{
												"0": "spark.eventLog.dir",
												"1": "wasbs://61531924-6c3a-4b37-955b-80bdd38ebe73@d6wxk2b70qpfb1pt9xx1wb40.blob.core.windows.net/events/0/eventLogs/"
											},
											{
												"0": "spark.yarn.tags",
												"1": "livy-session-0-qwZJRU4K"
											},
											{
												"0": "spark.executor.extraJavaOptions",
												"1": "-Detwlogger.component=sparkexecutor -DlogFilter.filename=SparkLogFilters.xml -DpatternGroup.filename=SparkPatternGroups.xml -Dlog4jspark.root.logger=INFO,console,RFA,ETW,Anonymizer -Dlog4jspark.log.dir=/var/log/sparkapp/${user.name} -Dlog4jspark.log.file=sparkexecutor.log -Dlog4j.configuration=file:/usr/hdp/current/spark2-client/conf/executor-log4j.properties -Djavax.xml.parsers.SAXParserFactory=com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl -XX:+UseG1GC"
											},
											{
												"0": "spark.sql.statistics.fallBackToHdfs",
												"1": "true"
											},
											{
												"0": "spark.synapse.customercorrelationid",
												"1": "e4003b4c-d8a5-49d2-915b-4a2bc547dfa4"
											},
											{
												"0": "spark.synapse.rpc.listener.nodeInfo.enabled",
												"1": "true"
											},
											{
												"0": "spark.yarn.maxAppAttempts",
												"1": "1"
											},
											{
												"0": "spark.synapse.workspace.name",
												"1": "asaworkspaceimre"
											},
											{
												"0": "spark.synapse.vhd.id",
												"1": "3f127d2e-1537-4eb2-999d-8ef67bdc0add"
											},
											{
												"0": "spark.ui.prometheus.enabled",
												"1": "true"
											},
											{
												"0": "spark.hadoop.javax.jdo.option.ConnectionDriverName",
												"1": "com.microsoft.sqlserver.jdbc.SQLServerDriver"
											},
											{
												"0": "spark.hadoop.javax.jdo.option.ConnectionURL",
												"1": ";"
											},
											{
												"0": "spark.yarn.appMasterEnv.PYSPARK_PYTHON",
												"1": "/home/trusted-service-user/cluster-env/env/bin/python"
											},
											{
												"0": "spark.sql.cbo.joinReorder.enabled",
												"1": "true"
											},
											{
												"0": "spark.sql.cardinalityEstimation.enabled",
												"1": "true"
											},
											{
												"0": "spark.history.ui.port",
												"1": "18080"
											},
											{
												"0": "spark.shuffle.service.closeHostConnectionsToUnusableHost.enabled",
												"1": "true"
											},
											{
												"0": "spark.shuffle.service.enabled",
												"1": "true"
											},
											{
												"0": "spark.sql.execution.arrow.fallback.enabled",
												"1": "true"
											},
											{
												"0": "spark.synapse.history.rpc.batch.size",
												"1": "2000"
											},
											{
												"0": "spark.dynamicAllocation.minExecutors",
												"1": "2"
											},
											{
												"0": "spark.executor.extraLibraryPath",
												"1": "/usr/hdp/current/hadoop-client/lib/native"
											},
											{
												"0": "spark.yarn.queue",
												"1": "default"
											},
											{
												"0": "spark.executorEnv.PYTHONPATH",
												"1": "/opt/spark/python/lib/pyspark.zip<CPS>/opt/spark/python/lib/py4j-0.10.7-src.zip<CPS>/opt/spark/python/lib/pyspark.zip<CPS>/opt/spark/python/lib/py4j-0.10.7-src.zip"
											},
											{
												"0": "spark.hadoop.javax.jdo.option.ConnectionPassword",
												"1": ""
											},
											{
												"0": "spark.yarn.dist.archives",
												"1": "local:///opt/spark/R/lib/sparkr.zip#sparkr"
											},
											{
												"0": "spark.ui.port",
												"1": "0"
											},
											{
												"0": "spark.io.compression.lz4.blockSize",
												"1": "128kb"
											},
											{
												"0": "spark.synapse.dep.enabled",
												"1": "false"
											},
											{
												"0": "spark.vegas.setoptimizer",
												"1": "true"
											},
											{
												"0": "spark.driver.memory",
												"1": "28g"
											},
											{
												"0": "spark.shuffle.unsafe.file.output.buffer",
												"1": "5m"
											},
											{
												"0": "spark.pythonRunnerOutputStream.plugin",
												"1": "org.apache.spark.microsoft.tools.api.plugin.MSToolsPythonRunnerOutputStreamPlugin"
											},
											{
												"0": "spark.yarn.isPython",
												"1": "true"
											},
											{
												"0": "spark.executor.cachedIdle.decommission.enabled",
												"1": "false"
											},
											{
												"0": "spark.sql.files.maxPartitionBytes",
												"1": "134217728"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "_1",
												"type": "string"
											},
											{
												"key": "1",
												"name": "_2",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "count",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"a = spark.conf.get(\"spark.sql.warehouse.dir\")\r\n",
							"b = spark.conf.get(\"spark.sql.hive.metastore.version\")\r\n",
							"c = spark.sparkContext.getConf().getAll()\r\n",
							"\r\n",
							"# c = spark.conf.get(\"hive.metastore.uris\")\r\n",
							"# c =spark.catalog.listFunctions()\r\n",
							"ll = spark.sparkContext.parallelize(c).toDF()\r\n",
							"d = spark.conf.get(\"spark.sql.catalogImplementation\")\r\n",
							"e = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionDriverName\")\r\n",
							"f = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionURL\") \r\n",
							"g = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionPassword\") \r\n",
							"h = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionUserName\")\r\n",
							"#i = spark.conf.get(\"spark.sql.hive.security.metastore.authorization.manager\")\r\n",
							"\r\n",
							"\r\n",
							"print(\"spark.sql.warehouse.dir:\", a)\r\n",
							"print(\"spark.sql.hive.metastore.version:\", b)\r\n",
							"print (c)\r\n",
							"print (\"spark.sql.catalogImplementation: \", d)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionDriverName: \" , e)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionURL: \", f)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionPassword: \", g)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionUserName: \", h)\r\n",
							"#println(\"hive.security.metastore.authorization.manager:\", i)\r\n",
							"display (ll)"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"USE imre_spark;\r\n",
							"SHOW Tables;\r\n",
							"SELECT COUNT(*) FROM imre_spark_test;\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool2MetastoreConfig')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Metastore"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool002",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d29c2994-7d25-4a03-b39b-ce871ccf6fd1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool002",
						"name": "SparkPool002",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool002",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"a = spark.conf.get(\"spark.sql.warehouse.dir\")\r\n",
							"b = spark.conf.get(\"spark.sql.hive.metastore.version\")\r\n",
							"c = spark.sparkContext.getConf().getAll()\r\n",
							"c = spark.conf.get(\"hive.metastore.uris\")\r\n",
							"# c =spark.catalog.listFunctions()\r\n",
							"d = spark.conf.get(\"spark.sql.catalogImplementation\")\r\n",
							"e = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionDriverName\")\r\n",
							"f = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionURL\") \r\n",
							"g = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionPassword\") \r\n",
							"h = spark.conf.get(\"spark.hadoop.javax.jdo.option.ConnectionUserName\")\r\n",
							"\r\n",
							"print(\"spark.sql.warehouse.dir:\", a)\r\n",
							"print(\"spark.sql.hive.metastore.version:\", b)\r\n",
							"#print (c)\r\n",
							"print (\"spark.sql.catalogImplementation: \", d)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionDriverName: \" , e)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionURL: \", f)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionPassword: \", g)\r\n",
							"print(\"spark.hadoop.javax.jdo.option.ConnectionUserName: \", h)"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark \r\n",
							"\r\n",
							"import java.sql.DriverManager \r\n",
							"/** this JDBC url could be copied from Azure portal > Azure SQL database > Connection strings > JDBC **/ \r\n",
							"val url = s\"jdbc:sqlserver://imreserver.database.windows.net:1433;database=imrehivemetastore;user=sqladmin;password=manCHI11;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\" \r\n",
							"try { \r\n",
							"    val connection = DriverManager.getConnection(url) \r\n",
							"    val result = connection.createStatement().executeQuery(\"select t.SCHEMA_VERSION from VERSION t\") \r\n",
							"    val result2 = connection.createStatement().executeQuery(\"select * from tbls\") \r\n",
							"    result.next(); \r\n",
							"    println(s\"Successful to test connection. Hive Metastore version is ${result.getString(1)}\") \r\n",
							"} catch { \r\n",
							"    case ex: Throwable => println(s\"Failed to establish connection:\\n $ex\") \r\n",
							"}\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%%configure -f\r\n",
							"{\r\n",
							"    \"conf\":{\r\n",
							"        \"spark.sql.hive.metastore.version\":\"3.1\",\r\n",
							"        \"spark.hadoop.hive.synapse.externalmetastore.linkedservice.name\":\"HMS_test\",\r\n",
							"        \"spark.sql.hive.metastore.jars\":\"/opt/hive-metastore/lib-3.1/*:/usr/hdp/current/hadoop-client/lib/*\"\r\n",
							"    }\r\n",
							"}\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"show databases\").show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"  %%sql\r\n",
							"  \r\n",
							" -- CREATE DATABASE mytestdb;\r\n",
							"  CREATE TABLE mytestdb.myparquettable(id int, name string, birthdate date) USING Parquet;"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "csharp"
							}
						},
						"source": [
							"%%csharp\r\n",
							"\r\n",
							"using Microsoft.Spark.Sql.Types;\r\n",
							"\r\n",
							"var data = new List<GenericRow>();\r\n",
							"\r\n",
							"data.Add(new GenericRow(new object[] { 1, \"Alice\", new Date(2010, 1, 1)}));\r\n",
							"data.Add(new GenericRow(new object[] { 2, \"Bob\", new Date(1990, 1, 1)}));\r\n",
							"\r\n",
							"var schema = new StructType\r\n",
							"    (new List<StructField>()\r\n",
							"        {\r\n",
							"            new StructField(\"id\", new IntegerType()),\r\n",
							"            new StructField(\"name\", new StringType()),\r\n",
							"            new StructField(\"birthdate\", new DateType())\r\n",
							"        }\r\n",
							"    );\r\n",
							"\r\n",
							"var df = spark.CreateDataFrame(data, schema);\r\n",
							"df.Write().Mode(SaveMode.Append).InsertInto(\"mytestdb.myparquettable\");"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql \r\n",
							"\r\n",
							"CREATE TABLE myexternalparquettable (id int, name string, birthdate date) \r\n",
							"    USING Parquet\r\n",
							"--    LOCATION \"abfss://asadatalakeimre.dfs.core.windows.net/imrehdihive40/myparquettable\"\r\n",
							"    LOCATION \"abfss://tempdata@asadatalakeimre.dfs.core.windows.net/synapse/workspaces/asaworkspaceimre/warehouse/mytestdb.db/myparquettable\"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * from mytestdb.myparquettable;"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE TABLE myexternalparquettable4 (id int, name string, birthdate date) \r\n",
							"    USING Parquet\r\n",
							"--    LOCATION \"abfss://asadatalakeimre.dfs.core.windows.net/imrehdihive40/myparquettable\"\r\n",
							"    LOCATION \"abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/mytestdb.db/myparquettable\"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"USE default;\r\n",
							"SHOW TABLES;"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"Drop table myexternalparquettable7;"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql \r\n",
							"\r\n",
							"CREATE EXTERNAL TABLE myexternalparquettable8 (id int, name string, birthdate date) \r\n",
							"    USING Parquet\r\n",
							"--    LOCATION \"abfss://asadatalakeimre.dfs.core.windows.net/imrehdihive40/myparquettable\"\r\n",
							"    LOCATION \"abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/mytestdb.db/myparquettable8\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\r\n",
							"spark.conf.set (\"spark.hadoop.metastore.authorization.storage.checks\", \"true\");\r\n",
							"a = spark.conf.get(\"spark.hadoop.metastore.authorization.storage.checks\")\r\n",
							"\r\n",
							"print(\"hive.metastore.authorization.storage.checks\", a)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							" CREATE EXTERNAL TABLE myexternalparquettable8 (id int, name string, birthdate date) \r\n",
							" --   USING Parquet\r\n",
							"--    LOCATION \"abfss://asadatalakeimre.dfs.core.windows.net/imrehdihive40/myparquettable\"\r\n",
							"    LOCATION \"abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/mytestdb.db/myparquettable8\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql \r\n",
							"\r\n",
							"CREATE TABLE my_asa_parquettable (id int, name string, birthdate date) ;"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fix_CSV')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fe5aef09-bf0f-4faf-9c28-311200cf35cd/resourceGroups/Synapse-WS-L400/providers/Microsoft.Synapse/workspaces/asaworkspaceimre/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspaceimre.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"rdd = sc.wholeTextFiles(\"abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/campaign-analytics/ZTSI_ACTR.LF.TMP_BILKODE_LKV_POLICA.csv\") # this can be a path to a folder with multiple gz files per table\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"rddtemp = rdd.map(lambda s: s.replace(\"\\\\\\n\",\"<ESCAPEDNEWLINE>\")).flatMap(lambda s: s.split(\"\\n\"))\r\n",
							"rddtemp.collect()\r\n",
							""
						],
						"outputs": [],
						"execution_count": 44
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"rdd2 = (rdd.map(lambda s: s[1].replace(\"\\\\\\n\",\"<ESCAPEDNEWLINE>\"))\r\n",
							"        .flatMap(lambda s: s.split(\"\\n\"))\r\n",
							"        .map(lambda s: s.replace(r\"\\;\", \"<ESCAPEDDELIM>\"))\r\n",
							"        .map(lambda s: s.split(';'))\r\n",
							"        .map(lambda s: [(('\"' + c + '\"')\r\n",
							"                         .replace(\"<ESCAPEDDELIM>\", \"\\\\;\")\r\n",
							"                         .replace(\"<ESCAPEDNEWLINE>\", \"\\\\\\n\"))  for c in s]\r\n",
							"                         )        \r\n",
							"        )\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"rdd2 = (rdd.map(lambda s: s[1].replace(\"\\\\\\n\",\"<ESCAPEDNEWLINE>\"))\r\n",
							"        .flatMap(lambda s: s.split(\"\\n\"))\r\n",
							"        .map(lambda s: s.replace(r\"\\;\", \"<ESCAPEDDELIM>\"))\r\n",
							"        .map(lambda s: s.split(';'))\r\n",
							"        .map(lambda s: [(('\"' + c + '\"')\r\n",
							"                         .replace(\"<ESCAPEDDELIM>\", \";\") # insteaf of  replace(\"<ESCAPEDDELIM>\", \"\\\\;\")\r\n",
							"                         .replace(\"<ESCAPEDNEWLINE>\", \"\\n\"))  for c in s] #instead of .replace(\"<ESCAPEDNEWLINE>\", \"\\\\\\n\"))\r\n",
							"                         )        \r\n",
							"        )\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"rdd3 = rdd2.map(lambda s: \";\".join(s))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df = spark.read.csv(rdd3, sep =\";\", header = \"false\", inferSchema=\"true\" ) #inferSchema is slow, on the big RDDS better to infer/construct schema on one file and plug it into DataFrame\r\n",
							"df.schema\r\n",
							"#df.write.parquet(\"...path\") # if you wish to convert to parquet"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"display(df)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"(rdd3\r\n",
							"    .coalesce(1) #only if you want to compress everything into 1 CSV file (performance killer)\r\n",
							"    .saveAsTextFile(\"abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/campaign-analytics/ZTSI_ACTR.LF.TMP_BILKODE_LKV_POLICA.out\") #this is going to become a folder with 1 or more csv files\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Imre_lake_DB')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Imre_lake_DB",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true,
								"DerivedModelDBInfo": "{\"ModelDirectives\":{\"BaseModel\":{\"Name\":\"Retail\",\"Version\":\"0.1.0\"}}}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "asadatalakeimre"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 2,
							"ObjectId": "6fb46f15-b84e-435f-9b60-15c1aa16474c"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ApparelProduct",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "ProductId",
										"Description": "The unique identifier of a Product.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "ProductId"
										}
									},
									{
										"Name": "ThreadCount",
										"Description": "Thread count is measured by adding the number of warp ends per inch and filling picks per square inch in the woven fabric. \n\nThe higher the number, the more dense the yarns are packed together, but unfortunately thread count has come to be the major determinant of quality in the U.S. customer's eyes. \n\nThe quality of the cotton and the finishing process after weaving can often be more important to the soft hand and durability of a fabric than a high thread count.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "ThreadCount"
										}
									},
									{
										"Name": "StyleId",
										"Description": "The unique identifier of a style.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "StyleId"
										}
									},
									{
										"Name": "SizeId",
										"Description": "The unique identifier of a size.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "SizeId"
										}
									},
									{
										"Name": "FabricHandId",
										"Description": "The unique identifier of a fabric hand.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "FabricHandId"
										}
									},
									{
										"Name": "DyeTypeId",
										"Description": "The unique identifier of a dye type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "DyeTypeId"
										}
									},
									{
										"Name": "CoatingId",
										"Description": "The unique identifier of a coating.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "CoatingId"
										}
									},
									{
										"Name": "WeaveTypeId",
										"Description": "The unique identifier of a weave type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "WeaveTypeId"
										}
									},
									{
										"Name": "ConstructionTypeId",
										"Description": "The unique identifier of a construction type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "ConstructionTypeId"
										}
									},
									{
										"Name": "FiberId",
										"Description": "The unique identifier of a fabric.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "FiberId"
										}
									},
									{
										"Name": "FabricId",
										"Description": "The unique identifier of a Fabric.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "FabricId"
										}
									},
									{
										"Name": "ApparelProductTypeId",
										"Description": "The unique identifier of an apparel product type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "ApparelProductTypeId"
										}
									}
								],
								"ColumnSetEntityName": "d2f29dcb-6adc-44d9-ba10-67819fad0927",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ApparelProduct",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ApparelProduct",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ProductId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ProductId\"},\"ThreadCount\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ThreadCount\"},\"StyleId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"StyleId\"},\"SizeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"SizeId\"},\"FabricHandId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FabricHandId\"},\"DyeTypeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"DyeTypeId\"},\"CoatingId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"CoatingId\"},\"WeaveTypeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"WeaveTypeId\"},\"ConstructionTypeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ConstructionTypeId\"},\"FiberId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FiberId\"},\"FabricId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FabricId\"},\"ApparelProductTypeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ApparelProductTypeId\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ApparelProduct\",\"path\":\"ApparelProduct.cdm.json/ApparelProduct\"},\"description\":\"An apparel product.\",\"primaryKey\":[\"ProductId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"ProductId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ProductId\"},\"dataType\":\"long\"},{\"type\":\"Existing\",\"name\":\"ThreadCount\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ThreadCount\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"StyleId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"StyleId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"SizeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"SizeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FabricHandId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FabricHandId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"DyeTypeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"DyeTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"CoatingId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"CoatingId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"WeaveTypeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"WeaveTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ConstructionTypeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ConstructionTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FiberId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FiberId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FabricId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FabricId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ApparelProductTypeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ApparelProductTypeId\"},\"dataType\":\"integer\"}]}}}",
								"Description": "An apparel product.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "ProductId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"ProductId\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"ThreadCount\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"StyleId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SizeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FabricHandId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DyeTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CoatingId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"WeaveTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ConstructionTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FiberId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FabricId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ApparelProductTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "885fe4ea-9e22-43fe-ab54-ebe4e9bbc3c5",
							"Description": "An apparel product."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ApparelProductFeature",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "ProductId",
										"Description": "The unique identifier of a Product.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProductFeature.cdm.json/ApparelProductFeature",
											"Name": "ProductId"
										}
									},
									{
										"Name": "ApparelProductFeatureTypeId",
										"Description": "The unique identifier of an Apparel Product Feature Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProductFeature.cdm.json/ApparelProductFeature",
											"Name": "ApparelProductFeatureTypeId"
										}
									},
									{
										"Name": "ApparelProductFeatureNote",
										"Description": "A note, comment or additional information regarding the apparel product feature.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProductFeature.cdm.json/ApparelProductFeature",
											"Name": "ApparelProductFeatureNote"
										}
									}
								],
								"ColumnSetEntityName": "075d6a08-bb18-4cfa-a535-c068cac6dd45",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ApparelProductFeature",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ApparelProductFeature",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ProductId\":{\"entity\":\"ApparelProductFeature.cdm.json/ApparelProductFeature\",\"name\":\"ProductId\"},\"ApparelProductFeatureTypeId\":{\"entity\":\"ApparelProductFeature.cdm.json/ApparelProductFeature\",\"name\":\"ApparelProductFeatureTypeId\"},\"ApparelProductFeatureNote\":{\"entity\":\"ApparelProductFeature.cdm.json/ApparelProductFeature\",\"name\":\"ApparelProductFeatureNote\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ApparelProductFeature\",\"path\":\"ApparelProductFeature.cdm.json/ApparelProductFeature\"},\"description\":\"The apparel product feature(s) that characterize or describe the associated apparel product\",\"primaryKey\":[\"ProductId\",\"ApparelProductFeatureTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"ProductId\",\"attributeReference\":{\"entity\":\"ApparelProductFeature.cdm.json/ApparelProductFeature\",\"name\":\"ProductId\"},\"dataType\":\"long\"},{\"type\":\"Existing\",\"name\":\"ApparelProductFeatureTypeId\",\"attributeReference\":{\"entity\":\"ApparelProductFeature.cdm.json/ApparelProductFeature\",\"name\":\"ApparelProductFeatureTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ApparelProductFeatureNote\",\"attributeReference\":{\"entity\":\"ApparelProductFeature.cdm.json/ApparelProductFeature\",\"name\":\"ApparelProductFeatureNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024}]}}}",
								"Description": "The apparel product feature(s) that characterize or describe the associated apparel product",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "ProductId,ApparelProductFeatureTypeId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"ProductId\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"ApparelProductFeatureTypeId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"ApparelProductFeatureNote\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "55a02929-6321-494d-ad3f-5702b3c656df",
							"Description": "The apparel product feature(s) that characterize or describe the associated apparel product"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ApparelProductFinishingProcess",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "ProductId",
										"Description": "The unique identifier of a Product.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess",
											"Name": "ProductId"
										}
									},
									{
										"Name": "FabricFinishingProcessId",
										"Description": "The unique identifier of a fabric finishing process.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess",
											"Name": "FabricFinishingProcessId"
										}
									},
									{
										"Name": "ProductFinishingProcessNote",
										"Description": "A note, comment or additional information regarding the finishing process.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess",
											"Name": "ProductFinishingProcessNote"
										}
									}
								],
								"ColumnSetEntityName": "a3fb8ab1-11cc-4193-9679-6abfc84f13f9",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ApparelProductFinishingProcess",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ApparelProductFinishingProcess",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ProductId\":{\"entity\":\"ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess\",\"name\":\"ProductId\"},\"FabricFinishingProcessId\":{\"entity\":\"ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess\",\"name\":\"FabricFinishingProcessId\"},\"ProductFinishingProcessNote\":{\"entity\":\"ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess\",\"name\":\"ProductFinishingProcessNote\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ApparelProductFinishingProcess\",\"path\":\"ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess\"},\"description\":\"The one or more finishing processes applied to a product.\",\"primaryKey\":[\"ProductId\",\"FabricFinishingProcessId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"ProductId\",\"attributeReference\":{\"entity\":\"ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess\",\"name\":\"ProductId\"},\"dataType\":\"long\"},{\"type\":\"Existing\",\"name\":\"FabricFinishingProcessId\",\"attributeReference\":{\"entity\":\"ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess\",\"name\":\"FabricFinishingProcessId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ProductFinishingProcessNote\",\"attributeReference\":{\"entity\":\"ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess\",\"name\":\"ProductFinishingProcessNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024}]}}}",
								"Description": "The one or more finishing processes applied to a product.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "ProductId,FabricFinishingProcessId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"ProductId\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"FabricFinishingProcessId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"ProductFinishingProcessNote\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "f4f28c81-d8c2-4051-86dc-8f73e8b4812d",
							"Description": "The one or more finishing processes applied to a product."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ApparelProductType",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "ApparelProductTypeId",
										"Description": "The unique identifier of an apparel product type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProductType.cdm.json/ApparelProductType",
											"Name": "ApparelProductTypeId"
										}
									},
									{
										"Name": "ApparelProductTypeName",
										"Description": "The name of an apparel product type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProductType.cdm.json/ApparelProductType",
											"Name": "ApparelProductTypeName"
										}
									},
									{
										"Name": "ApparelProductTypeDescription",
										"Description": "The description of an apparel product type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProductType.cdm.json/ApparelProductType",
											"Name": "ApparelProductTypeDescription"
										}
									}
								],
								"ColumnSetEntityName": "3d8bb008-e496-47aa-a465-f7a90d1fca07",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ApparelProductType",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ApparelProductType",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ApparelProductTypeId\":{\"entity\":\"ApparelProductType.cdm.json/ApparelProductType\",\"name\":\"ApparelProductTypeId\"},\"ApparelProductTypeName\":{\"entity\":\"ApparelProductType.cdm.json/ApparelProductType\",\"name\":\"ApparelProductTypeName\"},\"ApparelProductTypeDescription\":{\"entity\":\"ApparelProductType.cdm.json/ApparelProductType\",\"name\":\"ApparelProductTypeDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ApparelProductType\",\"path\":\"ApparelProductType.cdm.json/ApparelProductType\"},\"description\":\"The type of apparel product.\\n\\nEx:\\n- Activewear\\n- Backpack\\n- Belt\\n- Blazer\\n- Boots\\n- Cap\\n- Casual Pant\\n- Chinos\\n- Dress\\n- Gloves\\n- Hat\\n- Intimate\\n- Jacket\\n- Jean\\n- Jewelry\\n- Knit Top\\n- Necktie\\n- Pajama\\n- Parka\\n- Polo Shirt\\n- Raincoat\\n- Robe\\n- Scarf\\n- Shirt / Blouse\\n- Shoes\\n- Skirt\\n- Sleepwear\\n- Slippers\\n- Socks / Hosiery\\n- Software\\n- Suit\\n- Sweater\\n- Swimsuit\\n- Tailored Pant\\n- Tights\\n- Tote / Bag\\n- T-Shirt\\n- Turtleneck / Mock\\n- Underwear\\n- Vest\\n- Weather Boots\",\"primaryKey\":[\"ApparelProductTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"ApparelProductTypeId\",\"attributeReference\":{\"entity\":\"ApparelProductType.cdm.json/ApparelProductType\",\"name\":\"ApparelProductTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ApparelProductTypeName\",\"attributeReference\":{\"entity\":\"ApparelProductType.cdm.json/ApparelProductType\",\"name\":\"ApparelProductTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"ApparelProductTypeDescription\",\"attributeReference\":{\"entity\":\"ApparelProductType.cdm.json/ApparelProductType\",\"name\":\"ApparelProductTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512}]}}}",
								"Description": "The type of apparel product.\n\nEx:\n- Activewear\n- Backpack\n- Belt\n- Blazer\n- Boots\n- Cap\n- Casual Pant\n- Chinos\n- Dress\n- Gloves\n- Hat\n- Intimate\n- Jacket\n- Jean\n- Jewelry\n- Knit Top\n- Necktie\n- Pajama\n- Parka\n- Polo Shirt\n- Raincoat\n- Robe\n- Scarf\n- Shirt / Blouse\n- Shoes\n- Skirt\n- Sleepwear\n- Slippers\n- Socks / Hosiery\n- Software\n- Suit\n- Sweater\n- Swimsuit\n- Tailored Pant\n- Tights\n- Tote / Bag\n- T-Shirt\n- Turtleneck / Mock\n- Underwear\n- Vest\n- Weather Boots",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "ApparelProductTypeId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"ApparelProductTypeId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"ApparelProductTypeName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ApparelProductTypeDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "f284b2c8-eb9a-4417-8fd4-c6741b6fa7b1",
							"Description": "The type of apparel product.\n\nEx:\n- Activewear\n- Backpack\n- Belt\n- Blazer\n- Boots\n- Cap\n- Casual Pant\n- Chinos\n- Dress\n- Gloves\n- Hat\n- Intimate\n- Jacket\n- Jean\n- Jewelry\n- Knit Top\n- Necktie\n- Pajama\n- Parka\n- Polo Shirt\n- Raincoat\n- Robe\n- Scarf\n- Shirt / Blouse\n- Shoes\n- Skirt\n- Sleepwear\n- Slippers\n- Socks / Hosiery\n- Software\n- Suit\n- Sweater\n- Swimsuit\n- Tailored Pant\n- Tights\n- Tote / Bag\n- T-Shirt\n- Turtleneck / Mock\n- Underwear\n- Vest\n- Weather Boots"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Coating",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "CoatingId",
										"Description": "The unique identifier of a coating.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Coating.cdm.json/Coating",
											"Name": "CoatingId"
										}
									},
									{
										"Name": "CoatingName",
										"Description": "The name of a coating.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Coating.cdm.json/Coating",
											"Name": "CoatingName"
										}
									},
									{
										"Name": "CoatingDescription",
										"Description": "The description of a coating.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Coating.cdm.json/Coating",
											"Name": "CoatingDescription"
										}
									}
								],
								"ColumnSetEntityName": "94384b55-0dd6-4bd3-9686-c5d6afdab226",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Coating",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Coating",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CoatingId\":{\"entity\":\"Coating.cdm.json/Coating\",\"name\":\"CoatingId\"},\"CoatingName\":{\"entity\":\"Coating.cdm.json/Coating\",\"name\":\"CoatingName\"},\"CoatingDescription\":{\"entity\":\"Coating.cdm.json/Coating\",\"name\":\"CoatingDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"Coating\",\"path\":\"Coating.cdm.json/Coating\"},\"description\":\"A coating associated with an apparel product.\\n\\nEx:\\nCoating:  A finishing process in which a substance - like rubber, resin or synthetic compounds - covers the fabric on one or both sides.  Polyurethane is a common coating for outerwear.  Coating typically aids water-resistance.\\n\\nUrethane coated:  A thin layer of polyurethane is sprayed onto backside of fabric to waterproof, yet accommodates silkening.\",\"primaryKey\":[\"CoatingId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"CoatingId\",\"attributeReference\":{\"entity\":\"Coating.cdm.json/Coating\",\"name\":\"CoatingId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"CoatingName\",\"attributeReference\":{\"entity\":\"Coating.cdm.json/Coating\",\"name\":\"CoatingName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"CoatingDescription\",\"attributeReference\":{\"entity\":\"Coating.cdm.json/Coating\",\"name\":\"CoatingDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512}]}}}",
								"Description": "A coating associated with an apparel product.\n\nEx:\nCoating:  A finishing process in which a substance - like rubber, resin or synthetic compounds - covers the fabric on one or both sides.  Polyurethane is a common coating for outerwear.  Coating typically aids water-resistance.\n\nUrethane coated:  A thin layer of polyurethane is sprayed onto backside of fabric to waterproof, yet accommodates silkening.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "CoatingId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"CoatingId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"CoatingName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CoatingDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "816a927c-404d-4505-9e62-15b49e4f19de",
							"Description": "A coating associated with an apparel product.\n\nEx:\nCoating:  A finishing process in which a substance - like rubber, resin or synthetic compounds - covers the fabric on one or both sides.  Polyurethane is a common coating for outerwear.  Coating typically aids water-resistance.\n\nUrethane coated:  A thin layer of polyurethane is sprayed onto backside of fabric to waterproof, yet accommodates silkening."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ConstructionType",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "ConstructionTypeId",
										"Description": "The unique identifier of a construction type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ConstructionType.cdm.json/ConstructionType",
											"Name": "ConstructionTypeId"
										}
									},
									{
										"Name": "ConstructionTypeName",
										"Description": "The name of a construction type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ConstructionType.cdm.json/ConstructionType",
											"Name": "ConstructionTypeName"
										}
									},
									{
										"Name": "ConstructionTypeDescription",
										"Description": "The description of a construction type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ConstructionType.cdm.json/ConstructionType",
											"Name": "ConstructionTypeDescription"
										}
									}
								],
								"ColumnSetEntityName": "8a501913-6a6f-4984-a411-431fecf02632",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ConstructionType",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/ConstructionType",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ConstructionTypeId\":{\"entity\":\"ConstructionType.cdm.json/ConstructionType\",\"name\":\"ConstructionTypeId\"},\"ConstructionTypeName\":{\"entity\":\"ConstructionType.cdm.json/ConstructionType\",\"name\":\"ConstructionTypeName\"},\"ConstructionTypeDescription\":{\"entity\":\"ConstructionType.cdm.json/ConstructionType\",\"name\":\"ConstructionTypeDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ConstructionType\",\"path\":\"ConstructionType.cdm.json/ConstructionType\"},\"description\":\"The type of construction used to construct the garment or product.\\n\\nEx:\\nDrop stitch construction - is generally used on jersey and rib fabrics for either fabric design or for the separation of rib fabric pieces. Used in knit shirts and dress fabrics.\",\"primaryKey\":[\"ConstructionTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"ConstructionTypeId\",\"attributeReference\":{\"entity\":\"ConstructionType.cdm.json/ConstructionType\",\"name\":\"ConstructionTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ConstructionTypeName\",\"attributeReference\":{\"entity\":\"ConstructionType.cdm.json/ConstructionType\",\"name\":\"ConstructionTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"ConstructionTypeDescription\",\"attributeReference\":{\"entity\":\"ConstructionType.cdm.json/ConstructionType\",\"name\":\"ConstructionTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512}]}}}",
								"Description": "The type of construction used to construct the garment or product.\n\nEx:\nDrop stitch construction - is generally used on jersey and rib fabrics for either fabric design or for the separation of rib fabric pieces. Used in knit shirts and dress fabrics.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "ConstructionTypeId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"ConstructionTypeId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"ConstructionTypeName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ConstructionTypeDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "01c9ac25-1a5f-4761-ad1f-3c6dcca40b9f",
							"Description": "The type of construction used to construct the garment or product.\n\nEx:\nDrop stitch construction - is generally used on jersey and rib fabrics for either fabric design or for the separation of rib fabric pieces. Used in knit shirts and dress fabrics."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "DyeType",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "DyeTypeId",
										"Description": "The unique identifier of a dye type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "DyeType.cdm.json/DyeType",
											"Name": "DyeTypeId"
										}
									},
									{
										"Name": "DyeTypeName",
										"Description": "The name of a dye type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "DyeType.cdm.json/DyeType",
											"Name": "DyeTypeName"
										}
									},
									{
										"Name": "DyeTypeDescription",
										"Description": "The description of a dye type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "DyeType.cdm.json/DyeType",
											"Name": "DyeTypeDescription"
										}
									}
								],
								"ColumnSetEntityName": "1a5c7a7e-2dd2-40bb-8abd-04ce121ca7cf",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/DyeType",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/DyeType",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"DyeTypeId\":{\"entity\":\"DyeType.cdm.json/DyeType\",\"name\":\"DyeTypeId\"},\"DyeTypeName\":{\"entity\":\"DyeType.cdm.json/DyeType\",\"name\":\"DyeTypeName\"},\"DyeTypeDescription\":{\"entity\":\"DyeType.cdm.json/DyeType\",\"name\":\"DyeTypeDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"DyeType\",\"path\":\"DyeType.cdm.json/DyeType\"},\"description\":\"The type of dye used to construct the clothing product.\\n\\nEx:\\n\\nPigment dye:  Washed down colors that will continue to soften and age with washing.  Great for outdoor and casual looks. \\n\\nNatural dye\\n\\nSpace dye:  A yarn dyeing process of which one strand received one color at irregular intervals.  Produces an effect of disorganization.\",\"primaryKey\":[\"DyeTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"DyeTypeId\",\"attributeReference\":{\"entity\":\"DyeType.cdm.json/DyeType\",\"name\":\"DyeTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"DyeTypeName\",\"attributeReference\":{\"entity\":\"DyeType.cdm.json/DyeType\",\"name\":\"DyeTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"DyeTypeDescription\",\"attributeReference\":{\"entity\":\"DyeType.cdm.json/DyeType\",\"name\":\"DyeTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512}]}}}",
								"Description": "The type of dye used to construct the clothing product.\n\nEx:\n\nPigment dye:  Washed down colors that will continue to soften and age with washing.  Great for outdoor and casual looks. \n\nNatural dye\n\nSpace dye:  A yarn dyeing process of which one strand received one color at irregular intervals.  Produces an effect of disorganization.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "DyeTypeId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"DyeTypeId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"DyeTypeName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DyeTypeDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "1ce9ab10-e5a0-4f95-9592-acf45972ac22",
							"Description": "The type of dye used to construct the clothing product.\n\nEx:\n\nPigment dye:  Washed down colors that will continue to soften and age with washing.  Great for outdoor and casual looks. \n\nNatural dye\n\nSpace dye:  A yarn dyeing process of which one strand received one color at irregular intervals.  Produces an effect of disorganization."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Fabric",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "FabricId",
										"Description": "The unique identifier of a Fabric.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fabric.cdm.json/Fabric",
											"Name": "FabricId"
										}
									},
									{
										"Name": "FabricName",
										"Description": "The name of a Fabric.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fabric.cdm.json/Fabric",
											"Name": "FabricName"
										}
									},
									{
										"Name": "FabricDescription",
										"Description": "The description of a Fabric.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fabric.cdm.json/Fabric",
											"Name": "FabricDescription"
										}
									}
								],
								"ColumnSetEntityName": "4db0af5c-d980-45b2-807c-520a20ac24a0",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Fabric",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Fabric",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"FabricId\":{\"entity\":\"Fabric.cdm.json/Fabric\",\"name\":\"FabricId\"},\"FabricName\":{\"entity\":\"Fabric.cdm.json/Fabric\",\"name\":\"FabricName\"},\"FabricDescription\":{\"entity\":\"Fabric.cdm.json/Fabric\",\"name\":\"FabricDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"Fabric\",\"path\":\"Fabric.cdm.json/Fabric\"},\"description\":\"A material that resembles cloth, which is sometimes used as a generic term for \\\"fabric\\\".   \\n\\nEx:\\n\\nABACA -  a naturally occurring fiber found in the stem of the abaca plant. A member of the banana family, Musa Textilis.  The fiber is also called Manila Hemp, and is used extensively in the manufacture of marine cordage, abrasive backing papers, tea bags, and other products requiring high tensile strength. \\n\\nBAIZE -  a coarse woolen or cotton fabric napped to imitate felt.\\n\\nYARN -  a generic term for a continuous strand spun from a group of natural or synthetic staple fibers, or filaments, used in weaving, knitting to form textile fabrics\\n\\nBATIK -  a fabric printed by batik, namely an Indonesian method of hand-printing textiles by coating with wax the parts not to be dyed\\n\\nBOUCLE - a fabric of bouclÉ yarn, namely an uneven yarn of three piles one of which forms loops at intervals.  Wool, also in rayon, silk, cotton, linen, blends, hair fibers.   Any weave, knit.  From the French for \\\"buckled\\\" or \\\"ringed\\\".  A drawn out or ringed, looped yarn is used to give it a kinky appearance at intervals.  Made in a variety of weights.  Boucle yarns are usually in both the filling and the warp. Fabrics are usually springy to handle on account of the highly twisted yarns used to achieve the boucle effect.  Often ravels easily.\\n\\nBROCADE - a rich oriental silk fabric with raised patterns in gold and silver.  Cotton brocade often has the ground of cotton and the pattern of rayon and silk.  Pattern is in low relief.  Generally weaved in Jacquard and dobby.  Rich, heavy, elaborate design effect. Sometimes with colored or metallic threads making the design usually against a satin weave background.  This makes the figures stand out.  The figures in brocade are rather loose, while in damask the figure threads are actually bound into the material.  The pattern may be satin on a twill ground or twill on a satin ground.   Often reversible. The motifs may be of flowers, foliage, scrollwork, pastoral scenes, or other designs.\\n\\nBULL DENIM -  a 3x1 twill weave piece dyed fabric, made from coarse yarns. Weights can vary from 9 oz/sq yard up to the standard 14 oz/sq yard. Bull Denim is essentially a denim without indigo.\\n\\nBURLAP -  a coarse heavy plain-woven fabric usually of jute or hemp used for bagging and wrapping and in furniture and linoleum manufacture.\\n\\nCANVAS -  a firm closely woven cloth usually of linen, hemp, or cotton used for clothing and formerly much used for tents and sails.  Plain weave.  Mostly rugged, heavy material made from plied yarns. Has body and strength. It is usually manufactured in the grey state but some is dyed for different uses.\\n\\nCHAMOIS CLOTH -  a cotton fabric.   Fabric is napped, sheared, and dyed to simulate chamois leather. It is stiffer than kasha and thicker, softer and more durable than flannelette.\\n\\nCHEESECLOTH -  originally used as a wrapping material for pressing cheese. Loosely woven, thin, light in weight, open in construction, and soft.  Carded yarns are always used.   It is also called gauze weave.  When woven in 36\\\" widths it is called tobacco cloth.  When an applied finish is added, it is called buckram, crinoline, or bunting.  In the gray cloth, it is used for covering tobacco plants, tea bags and wiping cloths.  Finished cloth is used for curtains, bandages, dust cloths, cheap bunting, hat lining, surgical gauze, fly nets, food wrapping, e.g. meat and cheese, costumes and basket tops\\n\\nCHENILLE -  warp yarn of any major textile fiber. Filling of chenille yarns (has a pile protruding all around at right angles).  The word is French for caterpillar and fabric looks hairy.  A fuzzy yarn whose pile resembles a caterpillar.    Do not confuse with tufted effects obtained without the use of true Chenille filling.  Used for millinery, rugs, decorative fabrics, trimmings, upholstery.  Sometimes used broadly to define a fabric woven from chenille yarns.\\n\\nCORDUROY - cut pile fabric woven with either wide or narrow wales formed by using extra filling.  Back may be either plain or twill weave, the latter being better quality.\\n\\nCREPE -  fabric characterized by a broad range of crinkled or grained surface effect.\\n\\n.\",\"primaryKey\":[\"FabricId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"FabricId\",\"attributeReference\":{\"entity\":\"Fabric.cdm.json/Fabric\",\"name\":\"FabricId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FabricName\",\"attributeReference\":{\"entity\":\"Fabric.cdm.json/Fabric\",\"name\":\"FabricName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"FabricDescription\",\"attributeReference\":{\"entity\":\"Fabric.cdm.json/Fabric\",\"name\":\"FabricDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512}]}}}",
								"Description": "A material that resembles cloth, which is sometimes used as a generic term for \"fabric\".   \n\nEx:\n\nABACA -  a naturally occurring fiber found in the stem of the abaca plant. A member of the banana family, Musa Textilis.  The fiber is also called Manila Hemp, and is used extensively in the manufacture of marine cordage, abrasive backing papers, tea bags, and other products requiring high tensile strength. \n\nBAIZE -  a coarse woolen or cotton fabric napped to imitate felt.\n\nYARN -  a generic term for a continuous strand spun from a group of natural or synthetic staple fibers, or filaments, used in weaving, knitting to form textile fabrics\n\nBATIK -  a fabric printed by batik, namely an Indonesian method of hand-printing textiles by coating with wax the parts not to be dyed\n\nBOUCLE - a fabric of bouclÉ yarn, namely an uneven yarn of three piles one of which forms loops at intervals.  Wool, also in rayon, silk, cotton, linen, blends, hair fibers.   Any weave, knit.  From the French for \"buckled\" or \"ringed\".  A drawn out or ringed, looped yarn is used to give it a kinky appearance at intervals.  Made in a variety of weights.  Boucle yarns are usually in both the filling and the warp. Fabrics are usually springy to handle on account of the highly twisted yarns used to achieve the boucle effect.  Often ravels easily.\n\nBROCADE - a rich oriental silk fabric with raised patterns in gold and silver.  Cotton brocade often has the ground of cotton and the pattern of rayon and silk.  Pattern is in low relief.  Generally weaved in Jacquard and dobby.  Rich, heavy, elaborate design effect. Sometimes with colored or metallic threads making the design usually against a satin weave background.  This makes the figures stand out.  The figures in brocade are rather loose, while in damask the figure threads are actually bound into the material.  The pattern may be satin on a twill ground or twill on a satin ground.   Often reversible. The motifs may be of flowers, foliage, scrollwork, pastoral scenes, or other designs.\n\nBULL DENIM -  a 3x1 twill weave piece dyed fabric, made from coarse yarns. Weights can vary from 9 oz/sq yard up to the standard 14 oz/sq yard. Bull Denim is essentially a denim without indigo.\n\nBURLAP -  a coarse heavy plain-woven fabric usually of jute or hemp used for bagging and wrapping and in furniture and linoleum manufacture.\n\nCANVAS -  a firm closely woven cloth usually of linen, hemp, or cotton used for clothing and formerly much used for tents and sails.  Plain weave.  Mostly rugged, heavy material made from plied yarns. Has body and strength. It is usually manufactured in the grey state but some is dyed for different uses.\n\nCHAMOIS CLOTH -  a cotton fabric.   Fabric is napped, sheared, and dyed to simulate chamois leather. It is stiffer than kasha and thicker, softer and more durable than flannelette.\n\nCHEESECLOTH -  originally used as a wrapping material for pressing cheese. Loosely woven, thin, light in weight, open in construction, and soft.  Carded yarns are always used.   It is also called gauze weave.  When woven in 36\" widths it is called tobacco cloth.  When an applied finish is added, it is called buckram, crinoline, or bunting.  In the gray cloth, it is used for covering tobacco plants, tea bags and wiping cloths.  Finished cloth is used for curtains, bandages, dust cloths, cheap bunting, hat lining, surgical gauze, fly nets, food wrapping, e.g. meat and cheese, costumes and basket tops\n\nCHENILLE -  warp yarn of any major textile fiber. Filling of chenille yarns (has a pile protruding all around at right angles).  The word is French for caterpillar and fabric looks hairy.  A fuzzy yarn whose pile resembles a caterpillar.    Do not confuse with tufted effects obtained without the use of true Chenille filling.  Used for millinery, rugs, decorative fabrics, trimmings, upholstery.  Sometimes used broadly to define a fabric woven from chenille yarns.\n\nCORDUROY - cut pile fabric woven with either wide or narrow wales formed by using extra filling.  Back may be either plain or twill weave, the latter being better quality.\n\nCREPE -  fabric characterized by a broad range of crinkled or grained surface effect.\n\n.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "FabricId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"FabricId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"FabricName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FabricDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "427f3262-e401-4eba-a4c1-f95509199b2c",
							"Description": "A material that resembles cloth, which is sometimes used as a generic term for \"fabric\".   \n\nEx:\n\nABACA -  a naturally occurring fiber found in the stem of the abaca plant. A member of the banana family, Musa Textilis.  The fiber is also called Manila Hemp, and is used extensively in the manufacture of marine cordage, abrasive backing papers, tea bags, and other products requiring high tensile strength. \n\nBAIZE -  a coarse woolen or cotton fabric napped to imitate felt.\n\nYARN -  a generic term for a continuous strand spun from a group of natural or synthetic staple fibers, or filaments, used in weaving, knitting to form textile fabrics\n\nBATIK -  a fabric printed by batik, namely an Indonesian method of hand-printing textiles by coating with wax the parts not to be dyed\n\nBOUCLE - a fabric of bouclÉ yarn, namely an uneven yarn of three piles one of which forms loops at intervals.  Wool, also in rayon, silk, cotton, linen, blends, hair fibers.   Any weave, knit.  From the French for \"buckled\" or \"ringed\".  A drawn out or ringed, looped yarn is used to give it a kinky appearance at intervals.  Made in a variety of weights.  Boucle yarns are usually in both the filling and the warp. Fabrics are usually springy to handle on account of the highly twisted yarns used to achieve the boucle effect.  Often ravels easily.\n\nBROCADE - a rich oriental silk fabric with raised patterns in gold and silver.  Cotton brocade often has the ground of cotton and the pattern of rayon and silk.  Pattern is in low relief.  Generally weaved in Jacquard and dobby.  Rich, heavy, elaborate design effect. Sometimes with colored or metallic threads making the design usually against a satin weave background.  This makes the figures stand out.  The figures in brocade are rather loose, while in damask the figure threads are actually bound into the material.  The pattern may be satin on a twill ground or twill on a satin ground.   Often reversible. The motifs may be of flowers, foliage, scrollwork, pastoral scenes, or other designs.\n\nBULL DENIM -  a 3x1 twill weave piece dyed fabric, made from coarse yarns. Weights can vary from 9 oz/sq yard up to the standard 14 oz/sq yard. Bull Denim is essentially a denim without indigo.\n\nBURLAP -  a coarse heavy plain-woven fabric usually of jute or hemp used for bagging and wrapping and in furniture and linoleum manufacture.\n\nCANVAS -  a firm closely woven cloth usually of linen, hemp, or cotton used for clothing and formerly much used for tents and sails.  Plain weave.  Mostly rugged, heavy material made from plied yarns. Has body and strength. It is usually manufactured in the grey state but some is dyed for different uses.\n\nCHAMOIS CLOTH -  a cotton fabric.   Fabric is napped, sheared, and dyed to simulate chamois leather. It is stiffer than kasha and thicker, softer and more durable than flannelette.\n\nCHEESECLOTH -  originally used as a wrapping material for pressing cheese. Loosely woven, thin, light in weight, open in construction, and soft.  Carded yarns are always used.   It is also called gauze weave.  When woven in 36\" widths it is called tobacco cloth.  When an applied finish is added, it is called buckram, crinoline, or bunting.  In the gray cloth, it is used for covering tobacco plants, tea bags and wiping cloths.  Finished cloth is used for curtains, bandages, dust cloths, cheap bunting, hat lining, surgical gauze, fly nets, food wrapping, e.g. meat and cheese, costumes and basket tops\n\nCHENILLE -  warp yarn of any major textile fiber. Filling of chenille yarns (has a pile protruding all around at right angles).  The word is French for caterpillar and fabric looks hairy.  A fuzzy yarn whose pile resembles a caterpillar.    Do not confuse with tufted effects obtained without the use of true Chenille filling.  Used for millinery, rugs, decorative fabrics, trimmings, upholstery.  Sometimes used broadly to define a fabric woven from chenille yarns.\n\nCORDUROY - cut pile fabric woven with either wide or narrow wales formed by using extra filling.  Back may be either plain or twill weave, the latter being better quality.\n\nCREPE -  fabric characterized by a broad range of crinkled or grained surface effect.\n\n."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "FabricHand",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "FabricHandId",
										"Description": "The unique identifier of a fabric hand.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FabricHand.cdm.json/FabricHand",
											"Name": "FabricHandId"
										}
									},
									{
										"Name": "FabricHandName",
										"Description": "The name of a fabric hand.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FabricHand.cdm.json/FabricHand",
											"Name": "FabricHandName"
										}
									},
									{
										"Name": "FabricHandDescription",
										"Description": "The description of a fabric hand.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "FabricHand.cdm.json/FabricHand",
											"Name": "FabricHandDescription"
										}
									}
								],
								"ColumnSetEntityName": "eb28bfe4-861b-4570-a4b8-f14fc2d3ec29",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/FabricHand",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/FabricHand",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"FabricHandId\":{\"entity\":\"FabricHand.cdm.json/FabricHand\",\"name\":\"FabricHandId\"},\"FabricHandName\":{\"entity\":\"FabricHand.cdm.json/FabricHand\",\"name\":\"FabricHandName\"},\"FabricHandDescription\":{\"entity\":\"FabricHand.cdm.json/FabricHand\",\"name\":\"FabricHandDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"FabricHand\",\"path\":\"FabricHand.cdm.json/FabricHand\"},\"description\":\"Hand  is the softness of a fabric as judged by feeling it with your hand.\",\"primaryKey\":[\"FabricHandId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"FabricHandId\",\"attributeReference\":{\"entity\":\"FabricHand.cdm.json/FabricHand\",\"name\":\"FabricHandId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FabricHandName\",\"attributeReference\":{\"entity\":\"FabricHand.cdm.json/FabricHand\",\"name\":\"FabricHandName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"FabricHandDescription\",\"attributeReference\":{\"entity\":\"FabricHand.cdm.json/FabricHand\",\"name\":\"FabricHandDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512}]}}}",
								"Description": "Hand  is the softness of a fabric as judged by feeling it with your hand.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "FabricHandId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"FabricHandId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"FabricHandName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FabricHandDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "643f1ab9-fdf1-47e2-94ef-7ba8292658e8",
							"Description": "Hand  is the softness of a fabric as judged by feeling it with your hand."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Fiber",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "FiberId",
										"Description": "The unique identifier of a fabric.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fiber.cdm.json/Fiber",
											"Name": "FiberId"
										}
									},
									{
										"Name": "FiberName",
										"Description": "The name of the fabric.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fiber.cdm.json/Fiber",
											"Name": "FiberName"
										}
									},
									{
										"Name": "FiberDescription",
										"Description": "The description of the fabric.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fiber.cdm.json/Fiber",
											"Name": "FiberDescription"
										}
									},
									{
										"Name": "NaturalFiberIndicator",
										"Description": "Indicates that the fiber is natural.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fiber.cdm.json/Fiber",
											"Name": "NaturalFiberIndicator"
										}
									},
									{
										"Name": "SyntheticFiberIndicator",
										"Description": "Indicates that the fiber is synthetic.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fiber.cdm.json/Fiber",
											"Name": "SyntheticFiberIndicator"
										}
									},
									{
										"Name": "BlendIndicator",
										"Description": "Indicates that the fiber is a blend.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fiber.cdm.json/Fiber",
											"Name": "BlendIndicator"
										}
									},
									{
										"Name": "ElasticFiberIndicator",
										"Description": "Indicates that the fiber is an elastic fabric usually made of yarns containing rubber.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fiber.cdm.json/Fiber",
											"Name": "ElasticFiberIndicator"
										}
									},
									{
										"Name": "HypoAllergenicFiberIndicator",
										"Description": "Indicates that the fiber is hypo-allergenic, which is a fiber or material is deemed hypo-allergenic if it has undergone a process that makes it less apt to cause an allergic reaction.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Fiber.cdm.json/Fiber",
											"Name": "HypoAllergenicFiberIndicator"
										}
									}
								],
								"ColumnSetEntityName": "fbbefe45-862e-4c40-a4bf-aaf916a1ab8a",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Fiber",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Fiber",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"FiberId\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"FiberId\"},\"FiberName\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"FiberName\"},\"FiberDescription\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"FiberDescription\"},\"NaturalFiberIndicator\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"NaturalFiberIndicator\"},\"SyntheticFiberIndicator\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"SyntheticFiberIndicator\"},\"BlendIndicator\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"BlendIndicator\"},\"ElasticFiberIndicator\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"ElasticFiberIndicator\"},\"HypoAllergenicFiberIndicator\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"HypoAllergenicFiberIndicator\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"Fiber\",\"path\":\"Fiber.cdm.json/Fiber\"},\"description\":\"An elongated stringy natural, man-made or manufactured material.\\n\\nIn the case of natural fibers, they often tie together the parts of natural creatures. Natural vegetable fibers, generally consist of cellulose, examples include cotton, linen, and hemp. \\n\\nNatural animal fibers include spider silk, sinew, hair, and wool.\\n\\nEx:\\n- Acrylic\\n- Alpaca\\n- Cotton\\n- Angora\\n- Silk\\n- Camel hair\\n- Cashmere\\ncaddis  worsted yarn specifically a worsted ribbon or binding formerly used for garters and girdles.\\n- Wool\\n- Rayon\\ncheviot  wool originally and mostly made from wool from the Cheviot sheep but today also made of blends, spun synthetics, crossbred and reused wools.  Twill weave (modern version sometimes plain).  Very rugged, harsh, uneven surface that does not hold a crease and sags with wear. Resembles serge but is much more rugged and coarse and will not shine because of the rough surface.   Often sold as a homespun but true homespun has a plain weave and very heavy.  \\nDacron (trademark) used for a synthetic polyester textile fiber\\nLycra (trademark) used for a spandex synthetic fiber.\\nAll-Weather Microfiber- 100% Polyester Microfiber with waterproof coating and fully taped seams. 100% waterproof\",\"primaryKey\":[\"FiberId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"FiberId\",\"attributeReference\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"FiberId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FiberName\",\"attributeReference\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"FiberName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"FiberDescription\",\"attributeReference\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"FiberDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512},{\"type\":\"Existing\",\"name\":\"NaturalFiberIndicator\",\"attributeReference\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"NaturalFiberIndicator\"},\"dataType\":\"boolean\"},{\"type\":\"Existing\",\"name\":\"SyntheticFiberIndicator\",\"attributeReference\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"SyntheticFiberIndicator\"},\"dataType\":\"boolean\"},{\"type\":\"Existing\",\"name\":\"BlendIndicator\",\"attributeReference\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"BlendIndicator\"},\"dataType\":\"boolean\"},{\"type\":\"Existing\",\"name\":\"ElasticFiberIndicator\",\"attributeReference\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"ElasticFiberIndicator\"},\"dataType\":\"boolean\"},{\"type\":\"Existing\",\"name\":\"HypoAllergenicFiberIndicator\",\"attributeReference\":{\"entity\":\"Fiber.cdm.json/Fiber\",\"name\":\"HypoAllergenicFiberIndicator\"},\"dataType\":\"boolean\"}]}}}",
								"Description": "An elongated stringy natural, man-made or manufactured material.\n\nIn the case of natural fibers, they often tie together the parts of natural creatures. Natural vegetable fibers, generally consist of cellulose, examples include cotton, linen, and hemp. \n\nNatural animal fibers include spider silk, sinew, hair, and wool.\n\nEx:\n- Acrylic\n- Alpaca\n- Cotton\n- Angora\n- Silk\n- Camel hair\n- Cashmere\ncaddis  worsted yarn specifically a worsted ribbon or binding formerly used for garters and girdles.\n- Wool\n- Rayon\ncheviot  wool originally and mostly made from wool from the Cheviot sheep but today also made of blends, spun synthetics, crossbred and reused wools.  Twill weave (modern version sometimes plain).  Very rugged, harsh, uneven surface that does not hold a crease and sags with wear. Resembles serge but is much more rugged and coarse and will not shine because of the rough surface.   Often sold as a homespun but true homespun has a plain weave and very heavy.  \nDacron (trademark) used for a synthetic polyester textile fiber\nLycra (trademark) used for a spandex synthetic fiber.\nAll-Weather Microfiber- 100% Polyester Microfiber with waterproof coating and fully taped seams. 100% waterproof",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "FiberId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"FiberId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"FiberName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FiberDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NaturalFiberIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SyntheticFiberIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"BlendIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ElasticFiberIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"HypoAllergenicFiberIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "041ef74c-0cec-4125-afce-8cd0ecbbff88",
							"Description": "An elongated stringy natural, man-made or manufactured material.\n\nIn the case of natural fibers, they often tie together the parts of natural creatures. Natural vegetable fibers, generally consist of cellulose, examples include cotton, linen, and hemp. \n\nNatural animal fibers include spider silk, sinew, hair, and wool.\n\nEx:\n- Acrylic\n- Alpaca\n- Cotton\n- Angora\n- Silk\n- Camel hair\n- Cashmere\ncaddis  worsted yarn specifically a worsted ribbon or binding formerly used for garters and girdles.\n- Wool\n- Rayon\ncheviot  wool originally and mostly made from wool from the Cheviot sheep but today also made of blends, spun synthetics, crossbred and reused wools.  Twill weave (modern version sometimes plain).  Very rugged, harsh, uneven surface that does not hold a crease and sags with wear. Resembles serge but is much more rugged and coarse and will not shine because of the rough surface.   Often sold as a homespun but true homespun has a plain weave and very heavy.  \nDacron (trademark) used for a synthetic polyester textile fiber\nLycra (trademark) used for a spandex synthetic fiber.\nAll-Weather Microfiber- 100% Polyester Microfiber with waterproof coating and fully taped seams. 100% waterproof"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "RetailProduct",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "ProductId",
										"Description": "The unique identifier of a Product.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductId"
										}
									},
									{
										"Name": "ProductName",
										"Description": "The name of the Product, which normally corresponds to the 'marketing name' of the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductName"
										}
									},
									{
										"Name": "ProductShortDescription",
										"Description": "The short description of the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductShortDescription"
										}
									},
									{
										"Name": "ProductDescription",
										"Description": "The description of the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductDescription"
										}
									},
									{
										"Name": "ProductInternalName",
										"Description": "The internal name by which a Product is known.\n\nThis normally approximates the business name by which the public identifies the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductInternalName"
										}
									},
									{
										"Name": "ProductModelName",
										"Description": "The name of the Product Model.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductModelName"
										}
									},
									{
										"Name": "ProductBaseName",
										"Description": "The name of the Product, which normally corresponds to the 'marketing name' of the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductBaseName"
										}
									},
									{
										"Name": "ProductCodeName",
										"Description": "The internal code name by which the Product is known within the company.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductCodeName"
										}
									},
									{
										"Name": "ProductIntendedUse",
										"Description": "The intended use of the product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductIntendedUse"
										}
									},
									{
										"Name": "IntroductionDate",
										"Description": "The date that the Product was introduced for sale.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "IntroductionDate"
										}
									},
									{
										"Name": "FirstDateManufactured",
										"Description": "The date that the Product was first manufactured by the Manufacturer.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "FirstDateManufactured"
										}
									},
									{
										"Name": "PlannedAbandonmentDate",
										"Description": "The planned date to discontinue marketing the product.    \n\nAbandonment is a component in the decline stage of the product's life cycle characterized by a reduced market demand for the product and an increased number of competing products with similar characteristics.\n\nThere are three (3) strategies for abandoning a product:\n\n(1)  Reduced marketing and expenditures to maintain profits.\n\n(2)  Concentrating on the strongest market segments and eliminating the weaker market segments\n\n(3)  Maintain the marketing level until the product is discontinued.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "PlannedAbandonmentDate"
										}
									},
									{
										"Name": "ActualAbandonmentDate",
										"Description": "The actual date that the marketing of the product was discontinued. \n\nAbandonment is a component in the decline stage of the product's life cycle characterized by a reduced market demand for the product and an increased number of competing products with similar characteristics.\n\nThere are three (3) strategies for abandoning a product:\n\n(1)  Reduced marketing and expenditures to maintain profits.\n\n(2)  Concentrating on the strongest market segments and eliminating the weaker market segments\n\n(3)  Maintain the marketing level until the product is discontinued.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ActualAbandonmentDate"
										}
									},
									{
										"Name": "GlobalTradeItemNumber",
										"Description": "The Global Trade Item Number (GTIN) is an identifier for trade items that was developed by GS1.\n\nA GTIN can be assigned to only one brick.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 14,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "GlobalTradeItemNumber"
										}
									},
									{
										"Name": "GtinName",
										"Description": "A note, comment or additional information regarding the Product GTIN.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "GtinName"
										}
									},
									{
										"Name": "EuropeanArticleNumber",
										"Description": "A 13 digit barcoding standard which is a superset of the original 12-digit Universal Product Code (UPC).\n\naka International Article Number (abbreviation of EAN retained)",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 13,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "EuropeanArticleNumber"
										}
									},
									{
										"Name": "UniversalProductCode",
										"Description": "A system that identifies products by type and by manufacturer.  \n\nA UPC consists of eleven (11) digits.  Six (6) indicate the Manufacturer and five (5) digits describe the product.\n\nUPCs appear on product packages as bar codes, which are graphic symbols that are read by optical scanner devices.   \n\nUPCs are assigned by the Uniform Code Council of Dayton, Ohio.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 12,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "UniversalProductCode"
										}
									},
									{
										"Name": "GpcBrickId",
										"Description": "The unique identifier of a GPC Brick.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "GpcBrickId"
										}
									},
									{
										"Name": "ItemElectronicProductCode",
										"Description": "EPC is the RFID version of the UPC barcode. \nEPC is intended to be used for specific product identification. However, EPC goes beyond UPC by not only identifying the product as an SKU, but also providing access to additional data about the origin and history of the specific units. \nThe EPC tag itself identifies the manufacturer, product, version, and serial number. It's the serial number that takes EPC to the next level. \nThis is the key to data related to specific lots/batches as well as potentially tracking the specific unit's history as it moves through the supply chain.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 14,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ItemElectronicProductCode"
										}
									},
									{
										"Name": "ComponentPartIdentifier",
										"Description": "The Component / Part Identifier (CPID) is used to identify components or parts that are used in the assembly of a larger item. The CPID is part of the GS1 system of standards.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 30,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ComponentPartIdentifier"
										}
									},
									{
										"Name": "PluCode",
										"Description": "The PLU or Price Look-Up code is a 4- or 5-digit number that is primarily used on fresh produce items and will typically appear on a small sticker that is applied to an individual piece of fresh produce. \n\nThe PLU code identifies produce items based upon the commodity, variety and size group. \n\nThey are used by supermarkets to make check-out and inventory control easier, faster and more accurate. \n\nThese numbers are assigned by the International Federation for Produce Standards (IFPS)\n\nEx: WHITE FLESH PEACHES\nPLU Code = 4400",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 5,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "PluCode"
										}
									},
									{
										"Name": "ProductNetContent",
										"Description": "The standard product length.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductNetContent"
										}
									},
									{
										"Name": "NetContentUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "NetContentUomId"
										}
									},
									{
										"Name": "ResponsibilityCenterId",
										"Description": "The unique identifier of a Responsibility Center.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ResponsibilityCenterId"
										}
									},
									{
										"Name": "StorageInstructions",
										"Description": "Statements regarding how the product should be stored.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "StorageInstructions"
										}
									},
									{
										"Name": "ShelfLifeDays",
										"Description": "The amount of time that a product can be stored before it can no longer be safely consumed or sold.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ShelfLifeDays"
										}
									},
									{
										"Name": "ConsumerStorageInstructions",
										"Description": "Statements regarding how the product should be stored by the consumer.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ConsumerStorageInstructions"
										}
									},
									{
										"Name": "ProductShippingInstructions",
										"Description": "Statements regarding how the product should be shipped.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductShippingInstructions"
										}
									},
									{
										"Name": "ConsumerUsageInstructions",
										"Description": "Statements regarding how the product should be used by the consumer.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ConsumerUsageInstructions"
										}
									},
									{
										"Name": "HealthClaimDescription",
										"Description": "A health claim regarding the product as per regulations of the target market.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "HealthClaimDescription"
										}
									},
									{
										"Name": "MarketingMessageDescription",
										"Description": "A market message that is present on the packaging of the product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "MarketingMessageDescription"
										}
									},
									{
										"Name": "BundledProductIndicator",
										"Description": "Indicates whether a Product is comprised of a bundle of other Products.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "BundledProductIndicator"
										}
									},
									{
										"Name": "InformationLabelText",
										"Description": "The label text that identifies the care, use, preparation and handling or the product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "InformationLabelText"
										}
									},
									{
										"Name": "DescriptiveLabelText",
										"Description": "The label text that describes significant characteristics and benefits.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "DescriptiveLabelText"
										}
									},
									{
										"Name": "WarningInformationText",
										"Description": "The text of the warning label, if any, appearing upon the product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "WarningInformationText"
										}
									},
									{
										"Name": "GradeLabelText",
										"Description": "The label text that identifies Product quality with letters, number or conditions.\n\nExamples:\n\n-  Grade A\n-  Prime\n-  #1",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "GradeLabelText"
										}
									},
									{
										"Name": "GovernmentWarningLabelText",
										"Description": "The US Government (or foreign government) label text that addressing the US legal requirements of the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "GovernmentWarningLabelText"
										}
									},
									{
										"Name": "PatentNumber",
										"Description": "The patent that is associated with the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 12,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "PatentNumber"
										}
									},
									{
										"Name": "PatentDate",
										"Description": "The date that the Patent was granted.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "PatentDate"
										}
									},
									{
										"Name": "PatentExpirationDate",
										"Description": "The date that the patent is scheduled to expire.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "PatentExpirationDate"
										}
									},
									{
										"Name": "Trademark",
										"Description": "A 'trademark' is a brand name or brand mark that is given legal protection.",
										"OriginDataTypeName": {
											"TypeName": "binary",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "binary"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "Trademark"
										}
									},
									{
										"Name": "ProductLogo",
										"Description": "A design, symbol or series of words that identifies the product.",
										"OriginDataTypeName": {
											"TypeName": "binary",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "binary"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductLogo"
										}
									},
									{
										"Name": "ProductSymbol",
										"Description": "A symbol by which the product is known.",
										"OriginDataTypeName": {
											"TypeName": "binary",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "binary"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductSymbol"
										}
									},
									{
										"Name": "CopyrightNumber",
										"Description": "The unique identifier (number) of the copyright granted.\n\nA copyright is legal protection given to a work so that it can only be published or sold by the copyright holder.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 18,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "CopyrightNumber"
										}
									},
									{
										"Name": "CopyrightDate",
										"Description": "The date that the copyright was granted.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "CopyrightDate"
										}
									},
									{
										"Name": "ProductLicenserName",
										"Description": "The name of the company that receives a flat fee or royalty for selling the rights to use a trademark, Patent, manufacturing right or process for the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductLicenserName"
										}
									},
									{
										"Name": "EligibleForExportIndicator",
										"Description": "Indicates that the product is eligible for export to foreign countries without restriction.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "EligibleForExportIndicator"
										}
									},
									{
										"Name": "ProductExportRestrictionIndicator",
										"Description": "Indicates that exportation of the product is restricted.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductExportRestrictionIndicator"
										}
									},
									{
										"Name": "ProductExportRestrictionStartDate",
										"Description": "The period start date for which the associated restriction is in effect.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductExportRestrictionStartDate"
										}
									},
									{
										"Name": "ProductExportRestrictionEndDate",
										"Description": "The period end date for which the associated restriction is in effect.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductExportRestrictionEndDate"
										}
									},
									{
										"Name": "ProductExportRestrictionDescription",
										"Description": "A description or statement defining the export restriction(s) placed upon the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductExportRestrictionDescription"
										}
									},
									{
										"Name": "BaseProductQuantity",
										"Description": "The number of base product items contained in the product packaging.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "BaseProductQuantity"
										}
									},
									{
										"Name": "ProductLength",
										"Description": "The standard product length.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductLength"
										}
									},
									{
										"Name": "ProductPlanogramLength",
										"Description": "The standard product length.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductPlanogramLength"
										}
									},
									{
										"Name": "ProductLengthUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductLengthUomId"
										}
									},
									{
										"Name": "ProductWidth",
										"Description": "The standard product width.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductWidth"
										}
									},
									{
										"Name": "ProductPlanogramWidth",
										"Description": "The standard product width.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductPlanogramWidth"
										}
									},
									{
										"Name": "ProductWidthUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductWidthUomId"
										}
									},
									{
										"Name": "ProductHeight",
										"Description": "The standard product height.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductHeight"
										}
									},
									{
										"Name": "ProductPlanogramHeight",
										"Description": "The standard product height.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductPlanogramHeight"
										}
									},
									{
										"Name": "ProductHeightUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductHeightUomId"
										}
									},
									{
										"Name": "ProductVolume",
										"Description": "The standard product volume.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductVolume"
										}
									},
									{
										"Name": "ProductVolumeUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductVolumeUomId"
										}
									},
									{
										"Name": "ProductNetWeight",
										"Description": "The net product weight.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductNetWeight"
										}
									},
									{
										"Name": "ProductNetWeightUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductNetWeightUomId"
										}
									},
									{
										"Name": "ProductGrossWeight",
										"Description": "The gross product weight.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductGrossWeight"
										}
									},
									{
										"Name": "ProductGrossWeightUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductGrossWeightUomId"
										}
									},
									{
										"Name": "ProductDrainedWeight",
										"Description": "The drained product weight.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductDrainedWeight"
										}
									},
									{
										"Name": "ProductDrainedWeightUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductDrainedWeightUomId"
										}
									},
									{
										"Name": "MinimumStorageTemperature",
										"Description": "The minimum temperature at which the product may be stored.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "MinimumStorageTemperature"
										}
									},
									{
										"Name": "MinimumStorageTemperatureUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "MinimumStorageTemperatureUomId"
										}
									},
									{
										"Name": "MaximumStorageTemperature",
										"Description": "The maximum temperature at which the product may be stored.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "MaximumStorageTemperature"
										}
									},
									{
										"Name": "MaximumStorageTemperatureUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "MaximumStorageTemperatureUomId"
										}
									},
									{
										"Name": "MinimumStorageHumidity",
										"Description": "The minimum humidity that the product may be stored at.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "MinimumStorageHumidity"
										}
									},
									{
										"Name": "MinimumStorageHumidityUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "MinimumStorageHumidityUomId"
										}
									},
									{
										"Name": "MaximumStorageHumidity",
										"Description": "The maximum humidity that the product may be stored at.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 18,
											"Scale": 8,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "MaximumStorageHumidity"
										}
									},
									{
										"Name": "MaximumStorageHumidityUomId",
										"Description": "The unique identifier of a Unit Of Measure.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "MaximumStorageHumidityUomId"
										}
									},
									{
										"Name": "ReturnPolicyStatement",
										"Description": "A statement detailing the product return policy.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ReturnPolicyStatement"
										}
									},
									{
										"Name": "ReturnPolicyPeriodInDays",
										"Description": "The period in days allowed under the associated return policy.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ReturnPolicyPeriodInDays"
										}
									},
									{
										"Name": "ReplacementPolicyStatement",
										"Description": "A statement detailing the product replacement policy.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ReplacementPolicyStatement"
										}
									},
									{
										"Name": "ReplacementPeriodInDays",
										"Description": "The period in days allowed under the associated replacement policy.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ReplacementPeriodInDays"
										}
									},
									{
										"Name": "ExchangePolicyStatement",
										"Description": "A statement detailing the product exchange policy.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ExchangePolicyStatement"
										}
									},
									{
										"Name": "ExchangePolicyPeriodInDays",
										"Description": "The period in days allowed under the associated exchange policy.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ExchangePolicyPeriodInDays"
										}
									},
									{
										"Name": "ProductMustBeDeliveredDaysPriorToExpirationDate",
										"Description": "The number of days prior to the expiration date of the product that the product must be delivered to the an agreed upon point in the distribution system.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductMustBeDeliveredDaysPriorToExpirationDate"
										}
									},
									{
										"Name": "WarrantyId",
										"Description": "The unique identifier of a Warranty.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "WarrantyId"
										}
									},
									{
										"Name": "ItemSku",
										"Description": "The Stock Keeping Unit identifier, which is typically used for inventory-related activities.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 20,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ItemSku"
										}
									},
									{
										"Name": "PrimaryBrandId",
										"Description": "The unique identifier of a Brand.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "PrimaryBrandId"
										}
									},
									{
										"Name": "ProductTypeId",
										"Description": "The unique identifier of a Product Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ProductTypeId"
										}
									},
									{
										"Name": "PackageTypeId",
										"Description": "The unique identifier of a Package Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "PackageTypeId"
										}
									},
									{
										"Name": "PrimaryCountryOfOriginCountryId",
										"Description": "The unique identifier of the Country.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "PrimaryCountryOfOriginCountryId"
										}
									},
									{
										"Name": "GeographicAreaOfOriginGeographicAreaId",
										"Description": "The unique identifier of a Geographic Area.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "GeographicAreaOfOriginGeographicAreaId"
										}
									},
									{
										"Name": "PrimaryColorId",
										"Description": "The unique identifier of a color.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "PrimaryColorId"
										}
									},
									{
										"Name": "FlavorTypeId",
										"Description": "The unique identifier of a Flavor Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "FlavorTypeId"
										}
									},
									{
										"Name": "ScentTypeId",
										"Description": "The unique identifier of a Scent Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "ScentTypeId"
										}
									},
									{
										"Name": "SuitableAgeRatingId",
										"Description": "The unique identifier of a suitable age rating.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "SuitableAgeRatingId"
										}
									},
									{
										"Name": "SeasonalUsageId",
										"Description": "The unique identifier of a seasonal usage for the associated product.\n\nEx:\n- Summer\n- Fall\n- Winter\n- Spring\n- All seasons",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "RetailProduct.cdm.json/RetailProduct",
											"Name": "SeasonalUsageId"
										}
									}
								],
								"ColumnSetEntityName": "7e3c1778-002f-41a9-ab04-b5bf76701b75",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/RetailProduct",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/RetailProduct",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ProductId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductId\"},\"ProductName\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductName\"},\"ProductShortDescription\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductShortDescription\"},\"ProductDescription\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductDescription\"},\"ProductInternalName\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductInternalName\"},\"ProductModelName\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductModelName\"},\"ProductBaseName\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductBaseName\"},\"ProductCodeName\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductCodeName\"},\"ProductIntendedUse\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductIntendedUse\"},\"IntroductionDate\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"IntroductionDate\"},\"FirstDateManufactured\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"FirstDateManufactured\"},\"PlannedAbandonmentDate\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PlannedAbandonmentDate\"},\"ActualAbandonmentDate\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ActualAbandonmentDate\"},\"GlobalTradeItemNumber\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GlobalTradeItemNumber\"},\"GtinName\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GtinName\"},\"EuropeanArticleNumber\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"EuropeanArticleNumber\"},\"UniversalProductCode\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"UniversalProductCode\"},\"GpcBrickId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GpcBrickId\"},\"ItemElectronicProductCode\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ItemElectronicProductCode\"},\"ComponentPartIdentifier\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ComponentPartIdentifier\"},\"PluCode\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PluCode\"},\"ProductNetContent\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductNetContent\"},\"NetContentUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"NetContentUomId\"},\"ResponsibilityCenterId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ResponsibilityCenterId\"},\"StorageInstructions\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"StorageInstructions\"},\"ShelfLifeDays\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ShelfLifeDays\"},\"ConsumerStorageInstructions\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ConsumerStorageInstructions\"},\"ProductShippingInstructions\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductShippingInstructions\"},\"ConsumerUsageInstructions\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ConsumerUsageInstructions\"},\"HealthClaimDescription\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"HealthClaimDescription\"},\"MarketingMessageDescription\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MarketingMessageDescription\"},\"BundledProductIndicator\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"BundledProductIndicator\"},\"InformationLabelText\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"InformationLabelText\"},\"DescriptiveLabelText\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"DescriptiveLabelText\"},\"WarningInformationText\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"WarningInformationText\"},\"GradeLabelText\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GradeLabelText\"},\"GovernmentWarningLabelText\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GovernmentWarningLabelText\"},\"PatentNumber\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PatentNumber\"},\"PatentDate\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PatentDate\"},\"PatentExpirationDate\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PatentExpirationDate\"},\"Trademark\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"Trademark\"},\"ProductLogo\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductLogo\"},\"ProductSymbol\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductSymbol\"},\"CopyrightNumber\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"CopyrightNumber\"},\"CopyrightDate\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"CopyrightDate\"},\"ProductLicenserName\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductLicenserName\"},\"EligibleForExportIndicator\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"EligibleForExportIndicator\"},\"ProductExportRestrictionIndicator\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductExportRestrictionIndicator\"},\"ProductExportRestrictionStartDate\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductExportRestrictionStartDate\"},\"ProductExportRestrictionEndDate\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductExportRestrictionEndDate\"},\"ProductExportRestrictionDescription\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductExportRestrictionDescription\"},\"BaseProductQuantity\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"BaseProductQuantity\"},\"ProductLength\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductLength\"},\"ProductPlanogramLength\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductPlanogramLength\"},\"ProductLengthUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductLengthUomId\"},\"ProductWidth\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductWidth\"},\"ProductPlanogramWidth\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductPlanogramWidth\"},\"ProductWidthUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductWidthUomId\"},\"ProductHeight\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductHeight\"},\"ProductPlanogramHeight\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductPlanogramHeight\"},\"ProductHeightUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductHeightUomId\"},\"ProductVolume\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductVolume\"},\"ProductVolumeUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductVolumeUomId\"},\"ProductNetWeight\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductNetWeight\"},\"ProductNetWeightUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductNetWeightUomId\"},\"ProductGrossWeight\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductGrossWeight\"},\"ProductGrossWeightUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductGrossWeightUomId\"},\"ProductDrainedWeight\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductDrainedWeight\"},\"ProductDrainedWeightUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductDrainedWeightUomId\"},\"MinimumStorageTemperature\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MinimumStorageTemperature\"},\"MinimumStorageTemperatureUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MinimumStorageTemperatureUomId\"},\"MaximumStorageTemperature\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MaximumStorageTemperature\"},\"MaximumStorageTemperatureUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MaximumStorageTemperatureUomId\"},\"MinimumStorageHumidity\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MinimumStorageHumidity\"},\"MinimumStorageHumidityUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MinimumStorageHumidityUomId\"},\"MaximumStorageHumidity\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MaximumStorageHumidity\"},\"MaximumStorageHumidityUomId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MaximumStorageHumidityUomId\"},\"ReturnPolicyStatement\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ReturnPolicyStatement\"},\"ReturnPolicyPeriodInDays\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ReturnPolicyPeriodInDays\"},\"ReplacementPolicyStatement\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ReplacementPolicyStatement\"},\"ReplacementPeriodInDays\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ReplacementPeriodInDays\"},\"ExchangePolicyStatement\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ExchangePolicyStatement\"},\"ExchangePolicyPeriodInDays\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ExchangePolicyPeriodInDays\"},\"ProductMustBeDeliveredDaysPriorToExpirationDate\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductMustBeDeliveredDaysPriorToExpirationDate\"},\"WarrantyId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"WarrantyId\"},\"ItemSku\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ItemSku\"},\"PrimaryBrandId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PrimaryBrandId\"},\"ProductTypeId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductTypeId\"},\"PackageTypeId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PackageTypeId\"},\"PrimaryCountryOfOriginCountryId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PrimaryCountryOfOriginCountryId\"},\"GeographicAreaOfOriginGeographicAreaId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GeographicAreaOfOriginGeographicAreaId\"},\"PrimaryColorId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PrimaryColorId\"},\"FlavorTypeId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"FlavorTypeId\"},\"ScentTypeId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ScentTypeId\"},\"SuitableAgeRatingId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"SuitableAgeRatingId\"},\"SeasonalUsageId\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"SeasonalUsageId\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"RetailProduct\",\"path\":\"RetailProduct.cdm.json/RetailProduct\"},\"description\":\"A product is anything that can be offered to a market that might satisfy a want or need by potential customers.    That product is the sum of all physical, psychological, symbolic, and service attributes associated with it.\\n\\nThere are two basic types of products:\\n\\n- Tangible (physical)\\n- Intangible (non-physical) such as services\\n\\nA service is a non-material or intangible product - such as professional consultancy, maintenance service, repair service etc.\\nEach product has its own benefits, application, brand name, and packaging that gives it its own identity and distinguishing characteristics.\\n\\nEvery business or organization has business rules that define precisely what a product is.    While we intuitively know what a product is, we must quantify that knowledge and associated business rules with consistent definitions that can be implemented within the organization in strategies and applications.\\n\\nA product typically goes through five stages of development:\\n\\n(1) Idea Stage - involving a thorough evaluation of the potential product\\n\\n(2) Concept Stage - determines customer acceptance by testing and presentation to consumers and distribution channel members.   Specific aspects regarding quality, dependability, reliability, warranty, packaging, service, pricing, terms of sale, sales and distribution channels, advertising and promotions are evaluated.\\n\\n(3) Product Development Stage - transforms the prototype product into an actual product for mass sale.   This stage requires close interaction between both marketing and manufacturing.\\n\\n(4) Test Marketing Stage - may or may not be used since it is an expensive and time-consuming process.  Test marketing involves evaluating various product options and alternatives.\\n\\n(5) Commercialization - It is very expensive to launch a new product so commercialization only applies to those specific products that are actually going to be sold to the market.\\n\\nProducts tend to be categorized as either:  Industrial goods and consumer goods\\n\\nIndustrial goods are used to produce other products .\\n\\nIndustrial goods may be further divided into:\\n\\n- Raw materials\\n- Equipment\\n- Pre-built materials \\n- Supplies.\\n\\nConsumer goods are intended for consumption by the general public.\\n\\nConsumer goods may be further divided into:\\n\\n- Durable goods\\n- Nondurable goods\\n- Packaged goods\\n\\nA product may be a member of a product family or product line.\\n\\nA product family is a grouping of products or services that are related to each other by common function, functionality, design platform or similar characteristics.\\n\\nMembers of a product family frequently have many common parts and assemblies.\\n\\nProduct families are the highest level of grouping for forecasting, capacity planning or related functions.\\n\\nEx:\\nThe Apple Macintosh family of products consists of the product lines:\\n- Mac mini\\n- MacBook Pro\\n- Mac Pro\\n\\nA product line is a grouping of products that are closely related in usage, functionality or marketing characteristics.\\n\\nA Product Family typically is created to address one or five functions:\\n\\n1. To increase profits and not erode the sales of existing products\\n\\n2. To attract additional Markets or Market Segments\\n\\n3. To counter competitor's products\\n\\n4. To fill a gap in an existing Product Family.\\n\\n5. To promote sales of other products in the family line\\n\\nLine Depth refers to the number of products in the product line.\\n\\nLine consistency refers to how closely related the products are that make up the product line.\\n\\nLine vulnerability refers to the percentage of sales or profits that are derived from only a few products in the product line.\\n\\nProduct width refers to the number of different product lines sold by a company.\\n\\nProduct mix refers to the total number of products sold in all product lines.\\n\\nLine extension refers to the adding of a new product to a line.\\n\\n\\\"Trading up or brand leveraging\\\" refers to adding a product of better quality to a product line than the other products in that line.\\n\\n\\\"Trading down\\\" refers to adding a product of lesser quality to a product line than the other products in that line.\\n\\nIf a line of products is sold with the same brand name, this is referred to as family branding.\\nStrategy and decisions regarding a product line are usually incorporated in a high-level marketing plan addressing product line strategy, sales, channels, distribution channels, pricing and related issues.\\nA product-line manager is responsible for a product line and supervises several product managers who are responsible for individual products within the line.\\nProduct-line managers typically have the following responsibilities:\\n- Expansion and composition of a product line\\n- Evaluate the effects of product mixes on the profitability of other items in the line\\n- Planning and allocation of resources to individual products in the line\\nA product is normally associated with a brand strategy - manufacturer, private or generic.\\n\\n1. Manufacturer-  or 'national' branding in which the brand is assigned by the manufacturer of the Product.\\n\\n2. Private - or 'dealer' branding in which the brand is assigned by the retailer or wholesaler of the Product.\\n\\n3. Generic - in which the Product is not marked with any identification.   Generic brands are a means for manufacturers to increase profits by saving on advertising, packaging or other costs associated with manufacturer or private branding.\\n\\nA brand is name, term, sign, symbol or design or a combination of these which identify the goods or services and differentiate them from those of competitors'\\n\\nA Trade mark is a brand or some part of the brand that is given legal protection because it is capable of exclusive appropriation and representation.\\n\\nManufacturers can use their own brands (known as Manufacturers' brands) or brands of their distributors (Distributors' brands).\\n\\nManufacturers/ distributors use brand names for a variety of reasons ranging from simple identification purposes to having legal protection for unique features of the products from imitations.\\n\\nBrands help consumers recognize certain quality parameters. In some cases, brands are just used to endow the product with unique story and character which itself can be a basis for product differentiation.\\n\\nIndividual brands have their own identity and the corporate or common name is not used to promote its equity.\\n\\nIndividual branding requires more expensive advertising and brand extensive brand creation investments.  By extension, each new brand does not benefit from the positive perceptions of earlier brands.\\n\\nBy contrast, family branding has several advantages.\\n\\nEach new product is quickly associated with the other products and brand in terms of quality and benefits.\\n\\nReduced or eliminated time for name identification and advertising for name recognition purposes.\",\"primaryKey\":[\"ProductId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"ProductId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductId\"},\"dataType\":\"long\"},{\"type\":\"Existing\",\"name\":\"ProductName\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"ProductShortDescription\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductShortDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512},{\"type\":\"Existing\",\"name\":\"ProductDescription\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512},{\"type\":\"Existing\",\"name\":\"ProductInternalName\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductInternalName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"ProductModelName\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductModelName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"ProductBaseName\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductBaseName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"ProductCodeName\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductCodeName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"ProductIntendedUse\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductIntendedUse\"},\"dataType\":\"string\",\"dataTypeLength\":2048},{\"type\":\"Existing\",\"name\":\"IntroductionDate\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"IntroductionDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"FirstDateManufactured\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"FirstDateManufactured\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"PlannedAbandonmentDate\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PlannedAbandonmentDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"ActualAbandonmentDate\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ActualAbandonmentDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"GlobalTradeItemNumber\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GlobalTradeItemNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":14,\"scale\":0},{\"type\":\"Existing\",\"name\":\"GtinName\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GtinName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"EuropeanArticleNumber\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"EuropeanArticleNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":13,\"scale\":0},{\"type\":\"Existing\",\"name\":\"UniversalProductCode\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"UniversalProductCode\"},\"dataType\":\"decimal\",\"dataTypeLength\":12,\"scale\":0},{\"type\":\"Existing\",\"name\":\"GpcBrickId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GpcBrickId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ItemElectronicProductCode\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ItemElectronicProductCode\"},\"dataType\":\"decimal\",\"dataTypeLength\":14,\"scale\":0},{\"type\":\"Existing\",\"name\":\"ComponentPartIdentifier\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ComponentPartIdentifier\"},\"dataType\":\"string\",\"dataTypeLength\":30},{\"type\":\"Existing\",\"name\":\"PluCode\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PluCode\"},\"dataType\":\"decimal\",\"dataTypeLength\":5,\"scale\":0},{\"type\":\"Existing\",\"name\":\"ProductNetContent\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductNetContent\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"NetContentUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"NetContentUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ResponsibilityCenterId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ResponsibilityCenterId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"StorageInstructions\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"StorageInstructions\"},\"dataType\":\"string\",\"dataTypeLength\":2048},{\"type\":\"Existing\",\"name\":\"ShelfLifeDays\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ShelfLifeDays\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ConsumerStorageInstructions\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ConsumerStorageInstructions\"},\"dataType\":\"string\",\"dataTypeLength\":2048},{\"type\":\"Existing\",\"name\":\"ProductShippingInstructions\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductShippingInstructions\"},\"dataType\":\"string\",\"dataTypeLength\":2048},{\"type\":\"Existing\",\"name\":\"ConsumerUsageInstructions\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ConsumerUsageInstructions\"},\"dataType\":\"string\",\"dataTypeLength\":2048},{\"type\":\"Existing\",\"name\":\"HealthClaimDescription\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"HealthClaimDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512},{\"type\":\"Existing\",\"name\":\"MarketingMessageDescription\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MarketingMessageDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512},{\"type\":\"Existing\",\"name\":\"BundledProductIndicator\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"BundledProductIndicator\"},\"dataType\":\"boolean\"},{\"type\":\"Existing\",\"name\":\"InformationLabelText\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"InformationLabelText\"},\"dataType\":\"string\",\"dataTypeLength\":1024},{\"type\":\"Existing\",\"name\":\"DescriptiveLabelText\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"DescriptiveLabelText\"},\"dataType\":\"string\",\"dataTypeLength\":1024},{\"type\":\"Existing\",\"name\":\"WarningInformationText\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"WarningInformationText\"},\"dataType\":\"string\",\"dataTypeLength\":1024},{\"type\":\"Existing\",\"name\":\"GradeLabelText\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GradeLabelText\"},\"dataType\":\"string\",\"dataTypeLength\":1024},{\"type\":\"Existing\",\"name\":\"GovernmentWarningLabelText\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GovernmentWarningLabelText\"},\"dataType\":\"string\",\"dataTypeLength\":1024},{\"type\":\"Existing\",\"name\":\"PatentNumber\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PatentNumber\"},\"dataType\":\"string\",\"dataTypeLength\":12},{\"type\":\"Existing\",\"name\":\"PatentDate\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PatentDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"PatentExpirationDate\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PatentExpirationDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"Trademark\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"Trademark\"},\"dataType\":\"binary\"},{\"type\":\"Existing\",\"name\":\"ProductLogo\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductLogo\"},\"dataType\":\"binary\"},{\"type\":\"Existing\",\"name\":\"ProductSymbol\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductSymbol\"},\"dataType\":\"binary\"},{\"type\":\"Existing\",\"name\":\"CopyrightNumber\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"CopyrightNumber\"},\"dataType\":\"string\",\"dataTypeLength\":18},{\"type\":\"Existing\",\"name\":\"CopyrightDate\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"CopyrightDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"ProductLicenserName\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductLicenserName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"EligibleForExportIndicator\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"EligibleForExportIndicator\"},\"dataType\":\"boolean\"},{\"type\":\"Existing\",\"name\":\"ProductExportRestrictionIndicator\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductExportRestrictionIndicator\"},\"dataType\":\"boolean\"},{\"type\":\"Existing\",\"name\":\"ProductExportRestrictionStartDate\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductExportRestrictionStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"ProductExportRestrictionEndDate\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductExportRestrictionEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"ProductExportRestrictionDescription\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductExportRestrictionDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512},{\"type\":\"Existing\",\"name\":\"BaseProductQuantity\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"BaseProductQuantity\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":2},{\"type\":\"Existing\",\"name\":\"ProductLength\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductLength\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductPlanogramLength\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductPlanogramLength\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductLengthUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductLengthUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ProductWidth\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductWidth\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductPlanogramWidth\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductPlanogramWidth\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductWidthUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductWidthUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ProductHeight\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductHeight\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductPlanogramHeight\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductPlanogramHeight\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductHeightUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductHeightUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ProductVolume\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductVolume\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductVolumeUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductVolumeUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ProductNetWeight\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductNetWeight\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductNetWeightUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductNetWeightUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ProductGrossWeight\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductGrossWeight\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductGrossWeightUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductGrossWeightUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ProductDrainedWeight\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductDrainedWeight\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"ProductDrainedWeightUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductDrainedWeightUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"MinimumStorageTemperature\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MinimumStorageTemperature\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"MinimumStorageTemperatureUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MinimumStorageTemperatureUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"MaximumStorageTemperature\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MaximumStorageTemperature\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"MaximumStorageTemperatureUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MaximumStorageTemperatureUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"MinimumStorageHumidity\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MinimumStorageHumidity\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"MinimumStorageHumidityUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MinimumStorageHumidityUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"MaximumStorageHumidity\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MaximumStorageHumidity\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"scale\":8},{\"type\":\"Existing\",\"name\":\"MaximumStorageHumidityUomId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"MaximumStorageHumidityUomId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ReturnPolicyStatement\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ReturnPolicyStatement\"},\"dataType\":\"string\",\"dataTypeLength\":2048},{\"type\":\"Existing\",\"name\":\"ReturnPolicyPeriodInDays\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ReturnPolicyPeriodInDays\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ReplacementPolicyStatement\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ReplacementPolicyStatement\"},\"dataType\":\"string\",\"dataTypeLength\":2048},{\"type\":\"Existing\",\"name\":\"ReplacementPeriodInDays\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ReplacementPeriodInDays\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ExchangePolicyStatement\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ExchangePolicyStatement\"},\"dataType\":\"string\",\"dataTypeLength\":2048},{\"type\":\"Existing\",\"name\":\"ExchangePolicyPeriodInDays\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ExchangePolicyPeriodInDays\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ProductMustBeDeliveredDaysPriorToExpirationDate\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductMustBeDeliveredDaysPriorToExpirationDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\"},{\"type\":\"Existing\",\"name\":\"WarrantyId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"WarrantyId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ItemSku\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ItemSku\"},\"dataType\":\"string\",\"dataTypeLength\":20},{\"type\":\"Existing\",\"name\":\"PrimaryBrandId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PrimaryBrandId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ProductTypeId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ProductTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"PackageTypeId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PackageTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"PrimaryCountryOfOriginCountryId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PrimaryCountryOfOriginCountryId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"GeographicAreaOfOriginGeographicAreaId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"GeographicAreaOfOriginGeographicAreaId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"PrimaryColorId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"PrimaryColorId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FlavorTypeId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"FlavorTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ScentTypeId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"ScentTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"SuitableAgeRatingId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"SuitableAgeRatingId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"SeasonalUsageId\",\"attributeReference\":{\"entity\":\"RetailProduct.cdm.json/RetailProduct\",\"name\":\"SeasonalUsageId\"},\"dataType\":\"integer\"}]}}}",
								"Description": "A product is anything that can be offered to a market that might satisfy a want or need by potential customers.    That product is the sum of all physical, psychological, symbolic, and service attributes associated with it.\n\nThere are two basic types of products:\n\n- Tangible (physical)\n- Intangible (non-physical) such as services\n\nA service is a non-material or intangible product - such as professional consultancy, maintenance service, repair service etc.\nEach product has its own benefits, application, brand name, and packaging that gives it its own identity and distinguishing characteristics.\n\nEvery business or organization has business rules that define precisely what a product is.    While we intuitively know what a product is, we must quantify that knowledge and associated business rules with consistent definitions that can be implemented within the organization in strategies and applications.\n\nA product typically goes through five stages of development:\n\n(1) Idea Stage - involving a thorough evaluation of the potential product\n\n(2) Concept Stage - determines customer acceptance by testing and presentation to consumers and distribution channel members.   Specific aspects regarding quality, dependability, reliability, warranty, packaging, service, pricing, terms of sale, sales and distribution channels, advertising and promotions are evaluated.\n\n(3) Product Development Stage - transforms the prototype product into an actual product for mass sale.   This stage requires close interaction between both marketing and manufacturing.\n\n(4) Test Marketing Stage - may or may not be used since it is an expensive and time-consuming process.  Test marketing involves evaluating various product options and alternatives.\n\n(5) Commercialization - It is very expensive to launch a new product so commercialization only applies to those specific products that are actually going to be sold to the market.\n\nProducts tend to be categorized as either:  Industrial goods and consumer goods\n\nIndustrial goods are used to produce other products .\n\nIndustrial goods may be further divided into:\n\n- Raw materials\n- Equipment\n- Pre-built materials \n- Supplies.\n\nConsumer goods are intended for consumption by the general public.\n\nConsumer goods may be further divided into:\n\n- Durable goods\n- Nondurable goods\n- Packaged goods\n\nA product may be a member of a product family or product line.\n\nA product family is a grouping of products or services that are related to each other by common function, functionality, design platform or similar characteristics.\n\nMembers of a product family frequently have many common parts and assemblies.\n\nProduct families are the highest level of grouping for forecasting, capacity planning or related functions.\n\nEx:\nThe Apple Macintosh family of products consists of the product lines:\n- Mac mini\n- MacBook Pro\n- Mac Pro\n\nA product line is a grouping of products that are closely related in usage, functionality or marketing characteristics.\n\nA Product Family typically is created to address one or five functions:\n\n1. To increase profits and not erode the sales of existing products\n\n2. To attract additional Markets or Market Segments\n\n3. To counter competitor's products\n\n4. To fill a gap in an existing Product Family.\n\n5. To promote sales of other products in the family line\n\nLine Depth refers to the number of products in the product line.\n\nLine consistency refers to how closely related the products are that make up the product line.\n\nLine vulnerability refers to the percentage of sales or profits that are derived from only a few products in the product line.\n\nProduct width refers to the number of different product lines sold by a company.\n\nProduct mix refers to the total number of products sold in all product lines.\n\nLine extension refers to the adding of a new product to a line.\n\n\"Trading up or brand leveraging\" refers to adding a product of better quality to a product line than the other products in that line.\n\n\"Trading down\" refers to adding a product of lesser quality to a product line than the other products in that line.\n\nIf a line of products is sold with the same brand name, this is referred to as family branding.\nStrategy and decisions regarding a product line are usually incorporated in a high-level marketing plan addressing product line strategy, sales, channels, distribution channels, pricing and related issues.\nA product-line manager is responsible for a product line and supervises several product managers who are responsible for individual products within the line.\nProduct-line managers typically have the following responsibilities:\n- Expansion and composition of a product line\n- Evaluate the effects of product mixes on the profitability of other items in the line\n- Planning and allocation of resources to individual products in the line\nA product is normally associated with a brand strategy - manufacturer, private or generic.\n\n1. Manufacturer-  or 'national' branding in which the brand is assigned by the manufacturer of the Product.\n\n2. Private - or 'dealer' branding in which the brand is assigned by the retailer or wholesaler of the Product.\n\n3. Generic - in which the Product is not marked with any identification.   Generic brands are a means for manufacturers to increase profits by saving on advertising, packaging or other costs associated with manufacturer or private branding.\n\nA brand is name, term, sign, symbol or design or a combination of these which identify the goods or services and differentiate them from those of competitors'\n\nA Trade mark is a brand or some part of the brand that is given legal protection because it is capable of exclusive appropriation and representation.\n\nManufacturers can use their own brands (known as Manufacturers' brands) or brands of their distributors (Distributors' brands).\n\nManufacturers/ distributors use brand names for a variety of reasons ranging from simple identification purposes to having legal protection for unique features of the products from imitations.\n\nBrands help consumers recognize certain quality parameters. In some cases, brands are just used to endow the product with unique story and character which itself can be a basis for product differentiation.\n\nIndividual brands have their own identity and the corporate or common name is not used to promote its equity.\n\nIndividual branding requires more expensive advertising and brand extensive brand creation investments.  By extension, each new brand does not benefit from the positive perceptions of earlier brands.\n\nBy contrast, family branding has several advantages.\n\nEach new product is quickly associated with the other products and brand in terms of quality and benefits.\n\nReduced or eliminated time for name identification and advertising for name recognition purposes.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "ProductId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "2",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"ProductId\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"ProductName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductShortDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductInternalName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductModelName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductBaseName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductCodeName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductIntendedUse\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"IntroductionDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FirstDateManufactured\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PlannedAbandonmentDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ActualAbandonmentDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"GlobalTradeItemNumber\",\"type\":\"decimal(14,0)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"GtinName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"EuropeanArticleNumber\",\"type\":\"decimal(13,0)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"UniversalProductCode\",\"type\":\"decimal(12,0)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"GpcBrickId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ItemElectronicProductCode\",\"type\":\"decimal(14,0)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ComponentPartIdentifier\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PluCode\",\"type\":\"decimal(5,0)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductNetContent\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"NetContentUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ResponsibilityCenterId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"StorageInstructions\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ShelfLifeDays\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ConsumerStorageInstructions\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductShippingInstructions\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ConsumerUsageInstructions\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"HealthClaimDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"MarketingMessageDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"BundledProductIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"InformationLabelText\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DescriptiveLabelText\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"WarningInformationText\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"GradeLabelText\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"GovernmentWarningLabelText\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PatentNumber\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PatentDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PatentExpirationDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Trademark\",\"type\":\"binary\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductLogo\",\"type\":\"binary\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductSymbol\",\"type\":\"binary\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CopyrightNumber\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CopyrightDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductLicenserName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"EligibleForExportIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductExportRestrictionIndicator\",\"type\":\"boolean\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductExportRestrictionStartDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductExportRestrictionEndDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductExportRestrictionDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"Base",
								"spark.sql.sources.schema.part.1": "ProductQuantity\",\"type\":\"decimal(18,2)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductLength\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductPlanogramLength\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductLengthUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductWidth\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductPlanogramWidth\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductWidthUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductHeight\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductPlanogramHeight\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductHeightUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductVolume\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductVolumeUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductNetWeight\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductNetWeightUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductGrossWeight\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductGrossWeightUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductDrainedWeight\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductDrainedWeightUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"MinimumStorageTemperature\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"MinimumStorageTemperatureUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"MaximumStorageTemperature\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"MaximumStorageTemperatureUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"MinimumStorageHumidity\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"MinimumStorageHumidityUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"MaximumStorageHumidity\",\"type\":\"decimal(18,8)\",\"nullable\":true,\"metadata\":{}},{\"name\":\"MaximumStorageHumidityUomId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ReturnPolicyStatement\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ReturnPolicyPeriodInDays\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ReplacementPolicyStatement\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ReplacementPeriodInDays\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ExchangePolicyStatement\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ExchangePolicyPeriodInDays\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductMustBeDeliveredDaysPriorToExpirationDate\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"WarrantyId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ItemSku\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PrimaryBrandId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ProductTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PackageTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PrimaryCountryOfOriginCountryId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"GeographicAreaOfOriginGeographicAreaId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"PrimaryColorId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FlavorTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ScentTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SuitableAgeRatingId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SeasonalUsageId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "cf0d12f6-a2cd-4fdf-bcc4-1fb53aaed6c4",
							"Description": "A product is anything that can be offered to a market that might satisfy a want or need by potential customers.    That product is the sum of all physical, psychological, symbolic, and service attributes associated with it.\n\nThere are two basic types of products:\n\n- Tangible (physical)\n- Intangible (non-physical) such as services\n\nA service is a non-material or intangible product - such as professional consultancy, maintenance service, repair service etc.\nEach product has its own benefits, application, brand name, and packaging that gives it its own identity and distinguishing characteristics.\n\nEvery business or organization has business rules that define precisely what a product is.    While we intuitively know what a product is, we must quantify that knowledge and associated business rules with consistent definitions that can be implemented within the organization in strategies and applications.\n\nA product typically goes through five stages of development:\n\n(1) Idea Stage - involving a thorough evaluation of the potential product\n\n(2) Concept Stage - determines customer acceptance by testing and presentation to consumers and distribution channel members.   Specific aspects regarding quality, dependability, reliability, warranty, packaging, service, pricing, terms of sale, sales and distribution channels, advertising and promotions are evaluated.\n\n(3) Product Development Stage - transforms the prototype product into an actual product for mass sale.   This stage requires close interaction between both marketing and manufacturing.\n\n(4) Test Marketing Stage - may or may not be used since it is an expensive and time-consuming process.  Test marketing involves evaluating various product options and alternatives.\n\n(5) Commercialization - It is very expensive to launch a new product so commercialization only applies to those specific products that are actually going to be sold to the market.\n\nProducts tend to be categorized as either:  Industrial goods and consumer goods\n\nIndustrial goods are used to produce other products .\n\nIndustrial goods may be further divided into:\n\n- Raw materials\n- Equipment\n- Pre-built materials \n- Supplies.\n\nConsumer goods are intended for consumption by the general public.\n\nConsumer goods may be further divided into:\n\n- Durable goods\n- Nondurable goods\n- Packaged goods\n\nA product may be a member of a product family or product line.\n\nA product family is a grouping of products or services that are related to each other by common function, functionality, design platform or similar characteristics.\n\nMembers of a product family frequently have many common parts and assemblies.\n\nProduct families are the highest level of grouping for forecasting, capacity planning or related functions.\n\nEx:\nThe Apple Macintosh family of products consists of the product lines:\n- Mac mini\n- MacBook Pro\n- Mac Pro\n\nA product line is a grouping of products that are closely related in usage, functionality or marketing characteristics.\n\nA Product Family typically is created to address one or five functions:\n\n1. To increase profits and not erode the sales of existing products\n\n2. To attract additional Markets or Market Segments\n\n3. To counter competitor's products\n\n4. To fill a gap in an existing Product Family.\n\n5. To promote sales of other products in the family line\n\nLine Depth refers to the number of products in the product line.\n\nLine consistency refers to how closely related the products are that make up the product line.\n\nLine vulnerability refers to the percentage of sales or profits that are derived from only a few products in the product line.\n\nProduct width refers to the number of different product lines sold by a company.\n\nProduct mix refers to the total number of products sold in all product lines.\n\nLine extension refers to the adding of a new product to a line.\n\n\"Trading up or brand leveraging\" refers to adding a product of better quality to a product line than the other products in that line.\n\n\"Trading down\" refers to adding a product of lesser quality to a product line than the other products in that line.\n\nIf a line of products is sold with the same brand name, this is referred to as family branding.\nStrategy and decisions regarding a product line are usually incorporated in a high-level marketing plan addressing product line strategy, sales, channels, distribution channels, pricing and related issues.\nA product-line manager is responsible for a product line and supervises several product managers who are responsible for individual products within the line.\nProduct-line managers typically have the following responsibilities:\n- Expansion and composition of a product line\n- Evaluate the effects of product mixes on the profitability of other items in the line\n- Planning and allocation of resources to individual products in the line\nA product is normally associated with a brand strategy - manufacturer, private or generic.\n\n1. Manufacturer-  or 'national' branding in which the brand is assigned by the manufacturer of the Product.\n\n2. Private - or 'dealer' branding in which the brand is assigned by the retailer or wholesaler of the Product.\n\n3. Generic - in which the Product is not marked with any identification.   Generic brands are a means for manufacturers to increase profits by saving on advertising, packaging or other costs associated with manufacturer or private branding.\n\nA brand is name, term, sign, symbol or design or a combination of these which identify the goods or services and differentiate them from those of competitors'\n\nA Trade mark is a brand or some part of the brand that is given legal protection because it is capable of exclusive appropriation and representation.\n\nManufacturers can use their own brands (known as Manufacturers' brands) or brands of their distributors (Distributors' brands).\n\nManufacturers/ distributors use brand names for a variety of reasons ranging from simple identification purposes to having legal protection for unique features of the products from imitations.\n\nBrands help consumers recognize certain quality parameters. In some cases, brands are just used to endow the product with unique story and character which itself can be a basis for product differentiation.\n\nIndividual brands have their own identity and the corporate or common name is not used to promote its equity.\n\nIndividual branding requires more expensive advertising and brand extensive brand creation investments.  By extension, each new brand does not benefit from the positive perceptions of earlier brands.\n\nBy contrast, family branding has several advantages.\n\nEach new product is quickly associated with the other products and brand in terms of quality and benefits.\n\nReduced or eliminated time for name identification and advertising for name recognition purposes."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Size",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "SizeId",
										"Description": "The unique identifier of a size.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Size.cdm.json/Size",
											"Name": "SizeId"
										}
									},
									{
										"Name": "SizeName",
										"Description": "The name of a size.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Size.cdm.json/Size",
											"Name": "SizeName"
										}
									},
									{
										"Name": "SizeDescription",
										"Description": "The description of a size.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Size.cdm.json/Size",
											"Name": "SizeDescription"
										}
									}
								],
								"ColumnSetEntityName": "daa41e05-718f-4a20-a051-aefbe8804299",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Size",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Size",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"SizeId\":{\"entity\":\"Size.cdm.json/Size\",\"name\":\"SizeId\"},\"SizeName\":{\"entity\":\"Size.cdm.json/Size\",\"name\":\"SizeName\"},\"SizeDescription\":{\"entity\":\"Size.cdm.json/Size\",\"name\":\"SizeDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"Size\",\"path\":\"Size.cdm.json/Size\"},\"description\":\"The size associated with the product SKU.\\n\\nEx:\\n- Small\\n- Medium\\n- Large\\n- X-large\",\"primaryKey\":[\"SizeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"SizeId\",\"attributeReference\":{\"entity\":\"Size.cdm.json/Size\",\"name\":\"SizeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"SizeName\",\"attributeReference\":{\"entity\":\"Size.cdm.json/Size\",\"name\":\"SizeName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"SizeDescription\",\"attributeReference\":{\"entity\":\"Size.cdm.json/Size\",\"name\":\"SizeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512}]}}}",
								"Description": "The size associated with the product SKU.\n\nEx:\n- Small\n- Medium\n- Large\n- X-large",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "SizeId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"SizeId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"SizeName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SizeDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "c7b17f86-7986-4fb8-a82f-93c52cbf1e16",
							"Description": "The size associated with the product SKU.\n\nEx:\n- Small\n- Medium\n- Large\n- X-large"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Style",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "StyleId",
										"Description": "The unique identifier of a style.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Style.cdm.json/Style",
											"Name": "StyleId"
										}
									},
									{
										"Name": "StyleName",
										"Description": "The name of a style.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Style.cdm.json/Style",
											"Name": "StyleName"
										}
									},
									{
										"Name": "StyleDescription",
										"Description": "The description of a style.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Style.cdm.json/Style",
											"Name": "StyleDescription"
										}
									}
								],
								"ColumnSetEntityName": "ba3a7978-b735-42c8-9456-5782ea599b32",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Style",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/Style",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"StyleId\":{\"entity\":\"Style.cdm.json/Style\",\"name\":\"StyleId\"},\"StyleName\":{\"entity\":\"Style.cdm.json/Style\",\"name\":\"StyleName\"},\"StyleDescription\":{\"entity\":\"Style.cdm.json/Style\",\"name\":\"StyleDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"Style\",\"path\":\"Style.cdm.json/Style\"},\"description\":\"The style associated with the product.\\n\\nEx:\\n- Formal evening wear\\n- Casual\\n- Athletic\",\"primaryKey\":[\"StyleId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"StyleId\",\"attributeReference\":{\"entity\":\"Style.cdm.json/Style\",\"name\":\"StyleId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"StyleName\",\"attributeReference\":{\"entity\":\"Style.cdm.json/Style\",\"name\":\"StyleName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"StyleDescription\",\"attributeReference\":{\"entity\":\"Style.cdm.json/Style\",\"name\":\"StyleDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512}]}}}",
								"Description": "The style associated with the product.\n\nEx:\n- Formal evening wear\n- Casual\n- Athletic",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "StyleId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"StyleId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"StyleName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"StyleDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "fc2a0414-674c-4bfc-8ce4-cdb7480c6649",
							"Description": "The style associated with the product.\n\nEx:\n- Formal evening wear\n- Casual\n- Athletic"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "WeaveType",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lake_DB"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "WeaveTypeId",
										"Description": "The unique identifier of a weave type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "WeaveType.cdm.json/WeaveType",
											"Name": "WeaveTypeId"
										}
									},
									{
										"Name": "WeaveTypeName",
										"Description": "The name of a weave type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "WeaveType.cdm.json/WeaveType",
											"Name": "WeaveTypeName"
										}
									},
									{
										"Name": "WeaveTypeDescription",
										"Description": "The description of a weave type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "WeaveType.cdm.json/WeaveType",
											"Name": "WeaveTypeDescription"
										}
									}
								],
								"ColumnSetEntityName": "1286f327-1301-4883-bf7f-1a571a87c701",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/WeaveType",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://wwi-02@asadatalakeimre.dfs.core.windows.net/test/WeaveType",
									"Properties": {
										"LinkedServiceName": "asadatalakeimre",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"WeaveTypeId\":{\"entity\":\"WeaveType.cdm.json/WeaveType\",\"name\":\"WeaveTypeId\"},\"WeaveTypeName\":{\"entity\":\"WeaveType.cdm.json/WeaveType\",\"name\":\"WeaveTypeName\"},\"WeaveTypeDescription\":{\"entity\":\"WeaveType.cdm.json/WeaveType\",\"name\":\"WeaveTypeDescription\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"WeaveType\",\"path\":\"WeaveType.cdm.json/WeaveType\"},\"description\":\"The style of weave used to construct the clothing product.\\n\\nWeaving   is an ancient art of making fabric, with no new types of weaves having been developed since 1747. \\n\\nThe warp yarns and weft yarns are interlaced (woven) with each other to make a fabric (vs. a knit where the yarns are looped together). There are three basic weaving constructions.\\n\\nPlain weave : The Plain Weave is made by weaving one weft yarn over and under each warp yarn, alternating each row. It is the most common type of weave. \\n\\nTwill weave: The twill weave is similar to a satin weave in the sense that the loom is floating the warp or weft yarns over yarns of the opposite direction, but with a twill the yarn is only passing over two of the opposite yarns. A twill is distinctive by the diagonal lines that appear in the fabric. A twill weave, like a satin weave, usually results in a softer fabric than a plain weave. It is excellent for brushed or napped cotton, and is superior for a feather pillow ticking because of its strength. \\n\\nSatin weave: the satin weave is made by \\\"floating\\\" the warp or weft yarns across several yarns to bring them to the surface. Bringing the yarns to the surface gives the fabric sheen because light is reflected off the yarn surface, not absorbed by the intersections of yarns such as in a plain weave. \\n\\nCambric: a plain weave construction, Cambric fabric is also calendared (passed between rollers under heat and pressure) to give the surface a shine. Originally made in Cambrai, France. \\n\\nSateen: a satin weave construction, usually made of mercerized combed cotton, where the weave and quality of cotton give the fabric a wonderful shine and softness. \\n\\nWarp: the yarns that run the length of the loom. The warp yarns are pulled through the loom as the weft or filling yarns are woven across the warp to make the fabric. \\n\\nWeft or Filling: The yarns that are woven across the loom, with Weft being the English term and Filling being the American term. The individual yarns are also known as Picks.\",\"primaryKey\":[\"WeaveTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"WeaveTypeId\",\"attributeReference\":{\"entity\":\"WeaveType.cdm.json/WeaveType\",\"name\":\"WeaveTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"WeaveTypeName\",\"attributeReference\":{\"entity\":\"WeaveType.cdm.json/WeaveType\",\"name\":\"WeaveTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":128},{\"type\":\"Existing\",\"name\":\"WeaveTypeDescription\",\"attributeReference\":{\"entity\":\"WeaveType.cdm.json/WeaveType\",\"name\":\"WeaveTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512}]}}}",
								"Description": "The style of weave used to construct the clothing product.\n\nWeaving   is an ancient art of making fabric, with no new types of weaves having been developed since 1747. \n\nThe warp yarns and weft yarns are interlaced (woven) with each other to make a fabric (vs. a knit where the yarns are looped together). There are three basic weaving constructions.\n\nPlain weave : The Plain Weave is made by weaving one weft yarn over and under each warp yarn, alternating each row. It is the most common type of weave. \n\nTwill weave: The twill weave is similar to a satin weave in the sense that the loom is floating the warp or weft yarns over yarns of the opposite direction, but with a twill the yarn is only passing over two of the opposite yarns. A twill is distinctive by the diagonal lines that appear in the fabric. A twill weave, like a satin weave, usually results in a softer fabric than a plain weave. It is excellent for brushed or napped cotton, and is superior for a feather pillow ticking because of its strength. \n\nSatin weave: the satin weave is made by \"floating\" the warp or weft yarns across several yarns to bring them to the surface. Bringing the yarns to the surface gives the fabric sheen because light is reflected off the yarn surface, not absorbed by the intersections of yarns such as in a plain weave. \n\nCambric: a plain weave construction, Cambric fabric is also calendared (passed between rollers under heat and pressure) to give the surface a shine. Originally made in Cambrai, France. \n\nSateen: a satin weave construction, usually made of mercerized combed cotton, where the weave and quality of cotton give the fabric a wonderful shine and softness. \n\nWarp: the yarns that run the length of the loom. The warp yarns are pulled through the loom as the weft or filling yarns are woven across the warp to make the fabric. \n\nWeft or Filling: The yarns that are woven across the loom, with Weft being the English term and Filling being the American term. The individual yarns are also known as Picks.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "WeaveTypeId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"WeaveTypeId\",\"type\":\"integer\",\"nullable\":false,\"metadata\":{}},{\"name\":\"WeaveTypeName\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"WeaveTypeDescription\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"x-ms-usageinfo": "AzureSynapseDatabaseTemplate"
							},
							"ObjectVersion": 2,
							"ObjectId": "1b350717-85e7-434f-a35b-314490c0a83e",
							"Description": "The style of weave used to construct the clothing product.\n\nWeaving   is an ancient art of making fabric, with no new types of weaves having been developed since 1747. \n\nThe warp yarns and weft yarns are interlaced (woven) with each other to make a fabric (vs. a knit where the yarns are looped together). There are three basic weaving constructions.\n\nPlain weave : The Plain Weave is made by weaving one weft yarn over and under each warp yarn, alternating each row. It is the most common type of weave. \n\nTwill weave: The twill weave is similar to a satin weave in the sense that the loom is floating the warp or weft yarns over yarns of the opposite direction, but with a twill the yarn is only passing over two of the opposite yarns. A twill is distinctive by the diagonal lines that appear in the fabric. A twill weave, like a satin weave, usually results in a softer fabric than a plain weave. It is excellent for brushed or napped cotton, and is superior for a feather pillow ticking because of its strength. \n\nSatin weave: the satin weave is made by \"floating\" the warp or weft yarns across several yarns to bring them to the surface. Bringing the yarns to the surface gives the fabric sheen because light is reflected off the yarn surface, not absorbed by the intersections of yarns such as in a plain weave. \n\nCambric: a plain weave construction, Cambric fabric is also calendared (passed between rollers under heat and pressure) to give the surface a shine. Originally made in Cambrai, France. \n\nSateen: a satin weave construction, usually made of mercerized combed cotton, where the weave and quality of cotton give the fabric a wonderful shine and softness. \n\nWarp: the yarns that run the length of the loom. The warp yarns are pulled through the loom as the weft or filling yarns are woven across the warp to make the fabric. \n\nWeft or Filling: The yarns that are woven across the loom, with Weft being the English term and Filling being the American term. The individual yarns are also known as Picks."
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-azwzrdolle",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "RetailProduct",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ProductId",
									"ToColumnName": "ProductId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"RetailProduct.cdm.json/RetailProduct\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"ProductId\",\"toAttribute\":\"ProductId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "328817af-6b0c-4cd5-bb22-9d85ee191962"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-bpedmeartt",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Fiber",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "FiberId",
									"ToColumnName": "FiberId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Fiber.cdm.json/Fiber\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"FiberId\",\"toAttribute\":\"FiberId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "ee5bf4c9-fb11-4be9-b9c4-7afe339e1e08"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-eurfbjjdae",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Style",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "StyleId",
									"ToColumnName": "StyleId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Style.cdm.json/Style\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"StyleId\",\"toAttribute\":\"StyleId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "3afbbe8e-9929-4d59-b714-52a25406f9fa"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-fsvnhtyqxm",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Size",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "SizeId",
									"ToColumnName": "SizeId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Size.cdm.json/Size\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"SizeId\",\"toAttribute\":\"SizeId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "af775746-bda7-4d1d-ae51-83cea18d79ab"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-hbvhrydgpc",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "DyeType",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "DyeTypeId",
									"ToColumnName": "DyeTypeId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"DyeType.cdm.json/DyeType\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"DyeTypeId\",\"toAttribute\":\"DyeTypeId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "f80e0874-9218-4d20-bc39-9ae3ceb76559"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-hopguhrdvw",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "ConstructionType",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ConstructionTypeId",
									"ToColumnName": "ConstructionTypeId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"ConstructionType.cdm.json/ConstructionType\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"ConstructionTypeId\",\"toAttribute\":\"ConstructionTypeId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "57ab96f8-9734-4bbe-a71d-bb05193cff1d"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-jbpnihrtnw",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Coating",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CoatingId",
									"ToColumnName": "CoatingId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Coating.cdm.json/Coating\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"CoatingId\",\"toAttribute\":\"CoatingId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "d408d785-d6b9-4716-886a-ad5b79738d0a"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-jnjxggjsgf",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "WeaveType",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "WeaveTypeId",
									"ToColumnName": "WeaveTypeId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"WeaveType.cdm.json/WeaveType\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"WeaveTypeId\",\"toAttribute\":\"WeaveTypeId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "ff38afee-ee64-493c-9b53-14fd44bfbce1"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-lylpgsouob",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "ApparelProduct",
							"ToTableName": "ApparelProductFeature",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ProductId",
									"ToColumnName": "ProductId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"toEntity\":\"ApparelProductFeature.cdm.json/ApparelProductFeature\",\"joinPairs\":[{\"fromAttribute\":\"ProductId\",\"toAttribute\":\"ProductId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "bc54a371-501b-4ed8-896b-580e81acba14"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-mahgqyhwwl",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "ApparelProduct",
							"ToTableName": "ApparelProductFinishingProcess",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ProductId",
									"ToColumnName": "ProductId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"toEntity\":\"ApparelProductFinishingProcess.cdm.json/ApparelProductFinishingProcess\",\"joinPairs\":[{\"fromAttribute\":\"ProductId\",\"toAttribute\":\"ProductId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "94a312c5-6484-4cb6-a098-b138eb94128b"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-mgzfzifarx",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Fabric",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "FabricId",
									"ToColumnName": "FabricId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Fabric.cdm.json/Fabric\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"FabricId\",\"toAttribute\":\"FabricId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "056b8fda-84ce-4276-8792-441e4f59636e"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-ozgrexcpkc",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "FabricHand",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "FabricHandId",
									"ToColumnName": "FabricHandId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"FabricHand.cdm.json/FabricHand\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"FabricHandId\",\"toAttribute\":\"FabricHandId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "4719ec5c-b0db-48ed-bb8a-2c763c8980bd"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-qtwinoseqa",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "Imre_lake_DB"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "ApparelProductType",
							"ToTableName": "ApparelProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ApparelProductTypeId",
									"ToColumnName": "ApparelProductTypeId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"ApparelProductType.cdm.json/ApparelProductType\",\"toEntity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"joinPairs\":[{\"fromAttribute\":\"ApparelProductTypeId\",\"toAttribute\":\"ApparelProductTypeId\"}]}}"
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "7cf52582-14c4-47d7-9f88-95a5eea1f303"
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Imre_lakebd2')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Imre_lakebd2",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true,
								"DerivedModelDBInfo": "{\"ModelDirectives\":{\"BaseModel\":{\"Name\":\"Retail\",\"Version\":\"0.1.0\"}}}"
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://tempdata@asadatalakeimre.dfs.core.windows.net/Imre_lakebd2",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "asaworkspaceimre-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "096089cb-3572-4b27-9641-4d7d29361710"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "ApparelProduct",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "Imre_lakebd2"
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "ProductId",
										"Description": "The unique identifier of a Product.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "ProductId"
										}
									},
									{
										"Name": "ThreadCount",
										"Description": "Thread count is measured by adding the number of warp ends per inch and filling picks per square inch in the woven fabric. \n\nThe higher the number, the more dense the yarns are packed together, but unfortunately thread count has come to be the major determinant of quality in the U.S. customer's eyes. \n\nThe quality of the cotton and the finishing process after weaving can often be more important to the soft hand and durability of a fabric than a high thread count.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "ThreadCount"
										}
									},
									{
										"Name": "StyleId",
										"Description": "The unique identifier of a style.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "StyleId"
										}
									},
									{
										"Name": "SizeId",
										"Description": "The unique identifier of a size.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "SizeId"
										}
									},
									{
										"Name": "FabricHandId",
										"Description": "The unique identifier of a fabric hand.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "FabricHandId"
										}
									},
									{
										"Name": "DyeTypeId",
										"Description": "The unique identifier of a dye type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "DyeTypeId"
										}
									},
									{
										"Name": "CoatingId",
										"Description": "The unique identifier of a coating.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "CoatingId"
										}
									},
									{
										"Name": "WeaveTypeId",
										"Description": "The unique identifier of a weave type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "WeaveTypeId"
										}
									},
									{
										"Name": "ConstructionTypeId",
										"Description": "The unique identifier of a construction type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "ConstructionTypeId"
										}
									},
									{
										"Name": "FiberId",
										"Description": "The unique identifier of a fabric.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "FiberId"
										}
									},
									{
										"Name": "FabricId",
										"Description": "The unique identifier of a Fabric.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "FabricId"
										}
									},
									{
										"Name": "ApparelProductTypeId",
										"Description": "The unique identifier of an apparel product type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ApparelProduct.cdm.json/ApparelProduct",
											"Name": "ApparelProductTypeId"
										}
									}
								],
								"ColumnSetEntityName": "0cff9b80-7485-40dc-b57f-78a907f21ad0",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://tempdata@asadatalakeimre.dfs.core.windows.net/Imre_lakebd2/ApparelProduct",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://tempdata@asadatalakeimre.dfs.core.windows.net/Imre_lakebd2/ApparelProduct",
									"Properties": {
										"LinkedServiceName": "asaworkspaceimre-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ProductId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ProductId\"},\"ThreadCount\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ThreadCount\"},\"StyleId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"StyleId\"},\"SizeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"SizeId\"},\"FabricHandId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FabricHandId\"},\"DyeTypeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"DyeTypeId\"},\"CoatingId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"CoatingId\"},\"WeaveTypeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"WeaveTypeId\"},\"ConstructionTypeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ConstructionTypeId\"},\"FiberId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FiberId\"},\"FabricId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FabricId\"},\"ApparelProductTypeId\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ApparelProductTypeId\"}}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ApparelProduct\",\"path\":\"ApparelProduct.cdm.json/ApparelProduct\"},\"description\":\"An apparel product.\",\"primaryKey\":[\"ProductId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"name\":\"ProductId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ProductId\"},\"dataType\":\"long\"},{\"type\":\"Existing\",\"name\":\"ThreadCount\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ThreadCount\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"StyleId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"StyleId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"SizeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"SizeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FabricHandId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FabricHandId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"DyeTypeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"DyeTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"CoatingId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"CoatingId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"WeaveTypeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"WeaveTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ConstructionTypeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ConstructionTypeId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FiberId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FiberId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"FabricId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"FabricId\"},\"dataType\":\"integer\"},{\"type\":\"Existing\",\"name\":\"ApparelProductTypeId\",\"attributeReference\":{\"entity\":\"ApparelProduct.cdm.json/ApparelProduct\",\"name\":\"ApparelProductTypeId\"},\"dataType\":\"integer\"}]}}}",
								"Description": "An apparel product.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#BD4B37\"}",
								"PrimaryKeys": "ProductId",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"ProductId\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"ThreadCount\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"StyleId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"SizeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FabricHandId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DyeTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"CoatingId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"WeaveTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ConstructionTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FiberId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"FabricId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"ApparelProductTypeId\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "9ac859e1-3d1c-4bb8-9586-d0ebe93c458e",
							"Description": "An apparel product."
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool02')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 4,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool01')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 4,
					"minNodeCount": 3
				},
				"nodeCount": 0,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}